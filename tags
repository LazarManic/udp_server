!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AI_CANONNAME	.\include\asio\detail\old_win_sdk_compat.hpp	104;"	d
AI_NUMERICHOST	.\include\asio\detail\old_win_sdk_compat.hpp	108;"	d
AI_PASSIVE	.\include\asio\detail\old_win_sdk_compat.hpp	100;"	d
ASIO_ACCEPT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	206;"	d
ASIO_ASSERT	.\include\asio\detail\assert.hpp	27;"	d
ASIO_ASSERT	.\include\asio\detail\assert.hpp	29;"	d
ASIO_ASSOCIATED_ALLOCATOR_HPP	.\include\asio\associated_allocator.hpp	12;"	d
ASIO_ASSOCIATED_EXECUTOR_HPP	.\include\asio\associated_executor.hpp	12;"	d
ASIO_ASYNC_RESULT_HPP	.\include\asio\async_result.hpp	12;"	d
ASIO_BASIC_DATAGRAM_SOCKET_HPP	.\include\asio\basic_datagram_socket.hpp	12;"	d
ASIO_BASIC_DEADLINE_TIMER_HPP	.\include\asio\basic_deadline_timer.hpp	12;"	d
ASIO_BASIC_IO_OBJECT_HPP	.\include\asio\basic_io_object.hpp	12;"	d
ASIO_BASIC_RAW_SOCKET_HPP	.\include\asio\basic_raw_socket.hpp	12;"	d
ASIO_BASIC_SEQ_PACKET_SOCKET_HPP	.\include\asio\basic_seq_packet_socket.hpp	12;"	d
ASIO_BASIC_SERIAL_PORT_HPP	.\include\asio\basic_serial_port.hpp	13;"	d
ASIO_BASIC_SIGNAL_SET_HPP	.\include\asio\basic_signal_set.hpp	12;"	d
ASIO_BASIC_SOCKET_ACCEPTOR_HPP	.\include\asio\basic_socket_acceptor.hpp	12;"	d
ASIO_BASIC_SOCKET_HPP	.\include\asio\basic_socket.hpp	12;"	d
ASIO_BASIC_SOCKET_IOSTREAM_FWD_DECL	.\include\asio\basic_socket_iostream.hpp	122;"	d
ASIO_BASIC_SOCKET_IOSTREAM_FWD_DECL	.\include\asio\ts\netfwd.hpp	129;"	d
ASIO_BASIC_SOCKET_IOSTREAM_HPP	.\include\asio\basic_socket_iostream.hpp	12;"	d
ASIO_BASIC_SOCKET_STREAMBUF_FWD_DECL	.\include\asio\basic_socket_streambuf.hpp	124;"	d
ASIO_BASIC_SOCKET_STREAMBUF_FWD_DECL	.\include\asio\ts\netfwd.hpp	109;"	d
ASIO_BASIC_SOCKET_STREAMBUF_HPP	.\include\asio\basic_socket_streambuf.hpp	12;"	d
ASIO_BASIC_STREAMBUF_FWD_HPP	.\include\asio\basic_streambuf_fwd.hpp	12;"	d
ASIO_BASIC_STREAMBUF_HPP	.\include\asio\basic_streambuf.hpp	12;"	d
ASIO_BASIC_STREAM_SOCKET_HPP	.\include\asio\basic_stream_socket.hpp	12;"	d
ASIO_BASIC_WAITABLE_TIMER_FWD_DECL	.\include\asio\basic_waitable_timer.hpp	45;"	d
ASIO_BASIC_WAITABLE_TIMER_FWD_DECL	.\include\asio\ts\netfwd.hpp	76;"	d
ASIO_BASIC_WAITABLE_TIMER_HPP	.\include\asio\basic_waitable_timer.hpp	12;"	d
ASIO_BIND_EXECUTOR_HPP	.\include\asio\bind_executor.hpp	12;"	d
ASIO_BUFFERED_HANDSHAKE_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	441;"	d
ASIO_BUFFERED_READ_STREAM_FWD_HPP	.\include\asio\buffered_read_stream_fwd.hpp	12;"	d
ASIO_BUFFERED_READ_STREAM_HPP	.\include\asio\buffered_read_stream.hpp	12;"	d
ASIO_BUFFERED_STREAM_FWD_HPP	.\include\asio\buffered_stream_fwd.hpp	12;"	d
ASIO_BUFFERED_STREAM_HPP	.\include\asio\buffered_stream.hpp	12;"	d
ASIO_BUFFERED_WRITE_STREAM_FWD_HPP	.\include\asio\buffered_write_stream_fwd.hpp	12;"	d
ASIO_BUFFERED_WRITE_STREAM_HPP	.\include\asio\buffered_write_stream.hpp	12;"	d
ASIO_BUFFERS_ITERATOR_HPP	.\include\asio\buffers_iterator.hpp	12;"	d
ASIO_BUFFER_HPP	.\include\asio\buffer.hpp	12;"	d
ASIO_CLR_WORKAROUND	.\include\asio\detail\pop_options.hpp	131;"	d
ASIO_CLR_WORKAROUND	.\include\asio\detail\push_options.hpp	170;"	d
ASIO_COMPLETION_CONDITION_HPP	.\include\asio\completion_condition.hpp	12;"	d
ASIO_CONCURRENCY_HINT_1	.\include\asio\detail\concurrency_hint.hpp	91;"	d
ASIO_CONCURRENCY_HINT_DEFAULT	.\include\asio\detail\concurrency_hint.hpp	84;"	d
ASIO_CONCURRENCY_HINT_ID	.\include\asio\detail\concurrency_hint.hpp	23;"	d
ASIO_CONCURRENCY_HINT_ID_MASK	.\include\asio\detail\concurrency_hint.hpp	24;"	d
ASIO_CONCURRENCY_HINT_IS_LOCKING	.\include\asio\detail\concurrency_hint.hpp	43;"	d
ASIO_CONCURRENCY_HINT_IS_SPECIAL	.\include\asio\detail\concurrency_hint.hpp	37;"	d
ASIO_CONCURRENCY_HINT_LOCKING_REACTOR_IO	.\include\asio\detail\concurrency_hint.hpp	34;"	d
ASIO_CONCURRENCY_HINT_LOCKING_REACTOR_REGISTRATION	.\include\asio\detail\concurrency_hint.hpp	31;"	d
ASIO_CONCURRENCY_HINT_LOCKING_SCHEDULER	.\include\asio\detail\concurrency_hint.hpp	27;"	d
ASIO_CONCURRENCY_HINT_SAFE	.\include\asio\detail\concurrency_hint.hpp	75;"	d
ASIO_CONCURRENCY_HINT_UNSAFE	.\include\asio\detail\concurrency_hint.hpp	60;"	d
ASIO_CONCURRENCY_HINT_UNSAFE_IO	.\include\asio\detail\concurrency_hint.hpp	69;"	d
ASIO_CONNECT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	258;"	d
ASIO_CONNECT_HPP	.\include\asio\connect.hpp	12;"	d
ASIO_CONSTEXPR	.\include\asio\detail\config.hpp	223;"	d
ASIO_CONSTEXPR	.\include\asio\detail\config.hpp	225;"	d
ASIO_CONST_BUFFER	.\include\asio\buffer.hpp	884;"	d
ASIO_COROUTINE_HPP	.\include\asio\coroutine.hpp	12;"	d
ASIO_CORO_FORK	.\include\asio\coroutine.hpp	322;"	d
ASIO_CORO_FORK_IMPL	.\include\asio\coroutine.hpp	311;"	d
ASIO_CORO_REENTER	.\include\asio\coroutine.hpp	281;"	d
ASIO_CORO_YIELD	.\include\asio\coroutine.hpp	321;"	d
ASIO_CORO_YIELD_IMPL	.\include\asio\coroutine.hpp	294;"	d
ASIO_DATAGRAM_SOCKET_SERVICE_HPP	.\include\asio\datagram_socket_service.hpp	12;"	d
ASIO_DEADLINE_TIMER_HPP	.\include\asio\deadline_timer.hpp	12;"	d
ASIO_DEADLINE_TIMER_SERVICE_HPP	.\include\asio\deadline_timer_service.hpp	12;"	d
ASIO_DECL	.\include\asio\detail\config.hpp	43;"	d
ASIO_DECL	.\include\asio\detail\config.hpp	51;"	d
ASIO_DECL	.\include\asio\detail\config.hpp	53;"	d
ASIO_DECL	.\include\asio\detail\config.hpp	61;"	d
ASIO_DEFER_HPP	.\include\asio\defer.hpp	12;"	d
ASIO_DEFINE_HANDLER_ALLOCATOR_PTR	.\include\asio\detail\handler_alloc_helpers.hpp	195;"	d
ASIO_DEFINE_HANDLER_PTR	.\include\asio\detail\handler_alloc_helpers.hpp	149;"	d
ASIO_DELETED	.\include\asio\async_result.hpp	/^  async_result& operator=(const async_result&) ASIO_DELETED;$/;"	m	class:asio::async_result
ASIO_DELETED	.\include\asio\async_result.hpp	/^  async_result(const async_result&) ASIO_DELETED;$/;"	m	class:asio::async_result
ASIO_DELETED	.\include\asio\basic_socket.hpp	/^  basic_socket& operator=(const basic_socket&) ASIO_DELETED;$/;"	m	class:asio::basic_socket
ASIO_DELETED	.\include\asio\basic_socket.hpp	/^  basic_socket(const basic_socket&) ASIO_DELETED;$/;"	m	class:asio::basic_socket
ASIO_DELETED	.\include\asio\basic_socket_iostream.hpp	/^      const basic_socket_iostream&) ASIO_DELETED;$/;"	m	class:asio::basic_socket_iostream
ASIO_DELETED	.\include\asio\basic_socket_iostream.hpp	/^  basic_socket_iostream(const basic_socket_iostream&) ASIO_DELETED;$/;"	m	class:asio::basic_socket_iostream
ASIO_DELETED	.\include\asio\basic_socket_streambuf.hpp	/^      const basic_socket_streambuf&) ASIO_DELETED;$/;"	m	class:asio::basic_socket_streambuf
ASIO_DELETED	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf(const basic_socket_streambuf&) ASIO_DELETED;$/;"	m	class:asio::basic_socket_streambuf
ASIO_DELETED	.\include\asio\basic_waitable_timer.hpp	/^      const basic_waitable_timer&) ASIO_DELETED;$/;"	m	class:asio::basic_waitable_timer
ASIO_DELETED	.\include\asio\basic_waitable_timer.hpp	/^  basic_waitable_timer(const basic_waitable_timer&) ASIO_DELETED;$/;"	m	class:asio::basic_waitable_timer
ASIO_DELETED	.\include\asio\bind_executor.hpp	/^  async_result& operator=(const async_result&) ASIO_DELETED;$/;"	m	class:asio::async_result
ASIO_DELETED	.\include\asio\bind_executor.hpp	/^  async_result(const async_result&) ASIO_DELETED;$/;"	m	class:asio::async_result
ASIO_DELETED	.\include\asio\detail\config.hpp	180;"	d
ASIO_DELETED	.\include\asio\detail\config.hpp	186;"	d
ASIO_DELETED	.\include\asio\detail\config.hpp	191;"	d
ASIO_DELETED	.\include\asio\detail\config.hpp	195;"	d
ASIO_DETAIL_ARRAY_FWD_HPP	.\include\asio\detail\array_fwd.hpp	12;"	d
ASIO_DETAIL_ARRAY_HPP	.\include\asio\detail\array.hpp	12;"	d
ASIO_DETAIL_ASSERT_HPP	.\include\asio\detail\assert.hpp	12;"	d
ASIO_DETAIL_ATOMIC_COUNT_HPP	.\include\asio\detail\atomic_count.hpp	12;"	d
ASIO_DETAIL_BASE_FROM_COMPLETION_COND_HPP	.\include\asio\detail\base_from_completion_cond.hpp	12;"	d
ASIO_DETAIL_BIND_HANDLER_HPP	.\include\asio\detail\bind_handler.hpp	12;"	d
ASIO_DETAIL_BUFFERED_STREAM_STORAGE_HPP	.\include\asio\detail\buffered_stream_storage.hpp	12;"	d
ASIO_DETAIL_BUFFER_RESIZE_GUARD_HPP	.\include\asio\detail\buffer_resize_guard.hpp	12;"	d
ASIO_DETAIL_BUFFER_SEQUENCE_ADAPTER_HPP	.\include\asio\detail\buffer_sequence_adapter.hpp	12;"	d
ASIO_DETAIL_CALL_STACK_HPP	.\include\asio\detail\call_stack.hpp	12;"	d
ASIO_DETAIL_CHRONO_HPP	.\include\asio\detail\chrono.hpp	12;"	d
ASIO_DETAIL_CHRONO_TIME_TRAITS_HPP	.\include\asio\detail\chrono_time_traits.hpp	12;"	d
ASIO_DETAIL_COMPLETION_HANDLER_HPP	.\include\asio\detail\completion_handler.hpp	12;"	d
ASIO_DETAIL_CONCURRENCY_HINT_HPP	.\include\asio\detail\concurrency_hint.hpp	12;"	d
ASIO_DETAIL_CONDITIONALLY_ENABLED_EVENT_HPP	.\include\asio\detail\conditionally_enabled_event.hpp	12;"	d
ASIO_DETAIL_CONDITIONALLY_ENABLED_MUTEX_HPP	.\include\asio\detail\conditionally_enabled_mutex.hpp	12;"	d
ASIO_DETAIL_CONFIG_HPP	.\include\asio\detail\config.hpp	12;"	d
ASIO_DETAIL_CONSUMING_BUFFERS_HPP	.\include\asio\detail\consuming_buffers.hpp	12;"	d
ASIO_DETAIL_CSTDDEF_HPP	.\include\asio\detail\cstddef.hpp	12;"	d
ASIO_DETAIL_CSTDINT_HPP	.\include\asio\detail\cstdint.hpp	12;"	d
ASIO_DETAIL_DATE_TIME_FWD_HPP	.\include\asio\detail\date_time_fwd.hpp	12;"	d
ASIO_DETAIL_DEADLINE_TIMER_SERVICE_HPP	.\include\asio\detail\deadline_timer_service.hpp	12;"	d
ASIO_DETAIL_DEPENDENT_TYPE_HPP	.\include\asio\detail\dependent_type.hpp	12;"	d
ASIO_DETAIL_DESCRIPTOR_OPS_HPP	.\include\asio\detail\descriptor_ops.hpp	12;"	d
ASIO_DETAIL_DESCRIPTOR_READ_OP_HPP	.\include\asio\detail\descriptor_read_op.hpp	12;"	d
ASIO_DETAIL_DESCRIPTOR_WRITE_OP_HPP	.\include\asio\detail\descriptor_write_op.hpp	12;"	d
ASIO_DETAIL_DEV_POLL_REACTOR_HPP	.\include\asio\detail\dev_poll_reactor.hpp	12;"	d
ASIO_DETAIL_EPOLL_REACTOR_HPP	.\include\asio\detail\epoll_reactor.hpp	12;"	d
ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP	.\include\asio\detail\eventfd_select_interrupter.hpp	13;"	d
ASIO_DETAIL_EVENT_HPP	.\include\asio\detail\event.hpp	12;"	d
ASIO_DETAIL_EXECUTOR_OP_HPP	.\include\asio\detail\executor_op.hpp	12;"	d
ASIO_DETAIL_FD_SET_ADAPTER_HPP	.\include\asio\detail\fd_set_adapter.hpp	12;"	d
ASIO_DETAIL_FENCED_BLOCK_HPP	.\include\asio\detail\fenced_block.hpp	12;"	d
ASIO_DETAIL_FUNCTIONAL_HPP	.\include\asio\detail\functional.hpp	12;"	d
ASIO_DETAIL_GCC_ARM_FENCED_BLOCK_HPP	.\include\asio\detail\gcc_arm_fenced_block.hpp	12;"	d
ASIO_DETAIL_GCC_HPPA_FENCED_BLOCK_HPP	.\include\asio\detail\gcc_hppa_fenced_block.hpp	12;"	d
ASIO_DETAIL_GCC_SYNC_FENCED_BLOCK_HPP	.\include\asio\detail\gcc_sync_fenced_block.hpp	12;"	d
ASIO_DETAIL_GCC_X86_FENCED_BLOCK_HPP	.\include\asio\detail\gcc_x86_fenced_block.hpp	12;"	d
ASIO_DETAIL_GLOBAL_HPP	.\include\asio\detail\global.hpp	12;"	d
ASIO_DETAIL_HANDLER_ALLOC_HELPERS_HPP	.\include\asio\detail\handler_alloc_helpers.hpp	12;"	d
ASIO_DETAIL_HANDLER_CONT_HELPERS_HPP	.\include\asio\detail\handler_cont_helpers.hpp	12;"	d
ASIO_DETAIL_HANDLER_INVOKE_HELPERS_HPP	.\include\asio\detail\handler_invoke_helpers.hpp	12;"	d
ASIO_DETAIL_HANDLER_TRACKING_HPP	.\include\asio\detail\handler_tracking.hpp	12;"	d
ASIO_DETAIL_HANDLER_TYPE_REQUIREMENTS_HPP	.\include\asio\detail\handler_type_requirements.hpp	12;"	d
ASIO_DETAIL_HANDLER_WORK_HPP	.\include\asio\detail\handler_work.hpp	12;"	d
ASIO_DETAIL_HASH_MAP_HPP	.\include\asio\detail\hash_map.hpp	12;"	d
ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_HPP	.\include\asio\detail\impl\dev_poll_reactor.hpp	12;"	d
ASIO_DETAIL_IMPL_EPOLL_REACTOR_HPP	.\include\asio\detail\impl\epoll_reactor.hpp	12;"	d
ASIO_DETAIL_IMPL_KQUEUE_REACTOR_HPP	.\include\asio\detail\impl\kqueue_reactor.hpp	13;"	d
ASIO_DETAIL_IMPL_SELECT_REACTOR_HPP	.\include\asio\detail\impl\select_reactor.hpp	12;"	d
ASIO_DETAIL_IMPL_SERVICE_REGISTRY_HPP	.\include\asio\detail\impl\service_registry.hpp	12;"	d
ASIO_DETAIL_IMPL_STRAND_EXECUTOR_SERVICE_HPP	.\include\asio\detail\impl\strand_executor_service.hpp	12;"	d
ASIO_DETAIL_IMPL_STRAND_SERVICE_HPP	.\include\asio\detail\impl\strand_service.hpp	12;"	d
ASIO_DETAIL_IMPL_WINRT_TIMER_SCHEDULER_HPP	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	12;"	d
ASIO_DETAIL_IMPL_WIN_IOCP_IO_CONTEXT_HPP	.\include\asio\detail\impl\win_iocp_io_context.hpp	12;"	d
ASIO_DETAIL_IO_CONTROL_HPP	.\include\asio\detail\io_control.hpp	12;"	d
ASIO_DETAIL_IS_BUFFER_SEQUENCE_HPP	.\include\asio\detail\is_buffer_sequence.hpp	12;"	d
ASIO_DETAIL_IS_EXECUTOR_HPP	.\include\asio\detail\is_executor.hpp	12;"	d
ASIO_DETAIL_KEYWORD_TSS_PTR_HPP	.\include\asio\detail\keyword_tss_ptr.hpp	12;"	d
ASIO_DETAIL_KQUEUE_REACTOR_HPP	.\include\asio\detail\kqueue_reactor.hpp	13;"	d
ASIO_DETAIL_LIMITS_HPP	.\include\asio\detail\limits.hpp	12;"	d
ASIO_DETAIL_LOCAL_FREE_ON_BLOCK_EXIT_HPP	.\include\asio\detail\local_free_on_block_exit.hpp	12;"	d
ASIO_DETAIL_MACOS_FENCED_BLOCK_HPP	.\include\asio\detail\macos_fenced_block.hpp	12;"	d
ASIO_DETAIL_MEMORY_HPP	.\include\asio\detail\memory.hpp	12;"	d
ASIO_DETAIL_MUTEX_HPP	.\include\asio\detail\mutex.hpp	12;"	d
ASIO_DETAIL_NONCOPYABLE_HPP	.\include\asio\detail\noncopyable.hpp	12;"	d
ASIO_DETAIL_NULL_EVENT_HPP	.\include\asio\detail\null_event.hpp	12;"	d
ASIO_DETAIL_NULL_FENCED_BLOCK_HPP	.\include\asio\detail\null_fenced_block.hpp	12;"	d
ASIO_DETAIL_NULL_GLOBAL_HPP	.\include\asio\detail\null_global.hpp	12;"	d
ASIO_DETAIL_NULL_MUTEX_HPP	.\include\asio\detail\null_mutex.hpp	12;"	d
ASIO_DETAIL_NULL_REACTOR_HPP	.\include\asio\detail\null_reactor.hpp	12;"	d
ASIO_DETAIL_NULL_SIGNAL_BLOCKER_HPP	.\include\asio\detail\null_signal_blocker.hpp	12;"	d
ASIO_DETAIL_NULL_SOCKET_SERVICE_HPP	.\include\asio\detail\null_socket_service.hpp	12;"	d
ASIO_DETAIL_NULL_STATIC_MUTEX_HPP	.\include\asio\detail\null_static_mutex.hpp	12;"	d
ASIO_DETAIL_NULL_THREAD_HPP	.\include\asio\detail\null_thread.hpp	12;"	d
ASIO_DETAIL_NULL_TSS_PTR_HPP	.\include\asio\detail\null_tss_ptr.hpp	12;"	d
ASIO_DETAIL_OBJECT_POOL_HPP	.\include\asio\detail\object_pool.hpp	12;"	d
ASIO_DETAIL_OLD_WIN_SDK_COMPAT_HPP	.\include\asio\detail\old_win_sdk_compat.hpp	12;"	d
ASIO_DETAIL_OPERATION_HPP	.\include\asio\detail\operation.hpp	12;"	d
ASIO_DETAIL_OP_QUEUE_HPP	.\include\asio\detail\op_queue.hpp	12;"	d
ASIO_DETAIL_PIPE_SELECT_INTERRUPTER_HPP	.\include\asio\detail\pipe_select_interrupter.hpp	12;"	d
ASIO_DETAIL_POSIX_EVENT_HPP	.\include\asio\detail\posix_event.hpp	12;"	d
ASIO_DETAIL_POSIX_FD_SET_ADAPTER_HPP	.\include\asio\detail\posix_fd_set_adapter.hpp	12;"	d
ASIO_DETAIL_POSIX_GLOBAL_HPP	.\include\asio\detail\posix_global.hpp	12;"	d
ASIO_DETAIL_POSIX_MUTEX_HPP	.\include\asio\detail\posix_mutex.hpp	12;"	d
ASIO_DETAIL_POSIX_SIGNAL_BLOCKER_HPP	.\include\asio\detail\posix_signal_blocker.hpp	12;"	d
ASIO_DETAIL_POSIX_STATIC_MUTEX_HPP	.\include\asio\detail\posix_static_mutex.hpp	12;"	d
ASIO_DETAIL_POSIX_THREAD_HPP	.\include\asio\detail\posix_thread.hpp	12;"	d
ASIO_DETAIL_POSIX_TSS_PTR_HPP	.\include\asio\detail\posix_tss_ptr.hpp	12;"	d
ASIO_DETAIL_REACTIVE_DESCRIPTOR_SERVICE_HPP	.\include\asio\detail\reactive_descriptor_service.hpp	12;"	d
ASIO_DETAIL_REACTIVE_NULL_BUFFERS_OP_HPP	.\include\asio\detail\reactive_null_buffers_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SERIAL_PORT_SERVICE_HPP	.\include\asio\detail\reactive_serial_port_service.hpp	13;"	d
ASIO_DETAIL_REACTIVE_SOCKET_ACCEPT_OP_HPP	.\include\asio\detail\reactive_socket_accept_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_CONNECT_OP_HPP	.\include\asio\detail\reactive_socket_connect_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_RECVFROM_OP_HPP	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_RECVMSG_OP_HPP	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_RECV_OP_HPP	.\include\asio\detail\reactive_socket_recv_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_SENDTO_OP_HPP	.\include\asio\detail\reactive_socket_sendto_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_SEND_OP_HPP	.\include\asio\detail\reactive_socket_send_op.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_SERVICE_BASE_HPP	.\include\asio\detail\reactive_socket_service_base.hpp	12;"	d
ASIO_DETAIL_REACTIVE_SOCKET_SERVICE_HPP	.\include\asio\detail\reactive_socket_service.hpp	12;"	d
ASIO_DETAIL_REACTIVE_WAIT_OP_HPP	.\include\asio\detail\reactive_wait_op.hpp	12;"	d
ASIO_DETAIL_REACTOR_FWD_HPP	.\include\asio\detail\reactor_fwd.hpp	12;"	d
ASIO_DETAIL_REACTOR_HPP	.\include\asio\detail\reactor.hpp	12;"	d
ASIO_DETAIL_REACTOR_OP_HPP	.\include\asio\detail\reactor_op.hpp	12;"	d
ASIO_DETAIL_REACTOR_OP_QUEUE_HPP	.\include\asio\detail\reactor_op_queue.hpp	12;"	d
ASIO_DETAIL_RECYCLING_ALLOCATOR_HPP	.\include\asio\detail\recycling_allocator.hpp	12;"	d
ASIO_DETAIL_REGEX_FWD_HPP	.\include\asio\detail\regex_fwd.hpp	12;"	d
ASIO_DETAIL_RESOLVER_ENDPOINT_OP_HPP	.\include\asio\detail\resolve_endpoint_op.hpp	12;"	d
ASIO_DETAIL_RESOLVER_SERVICE_BASE_HPP	.\include\asio\detail\resolver_service_base.hpp	12;"	d
ASIO_DETAIL_RESOLVER_SERVICE_HPP	.\include\asio\detail\resolver_service.hpp	12;"	d
ASIO_DETAIL_RESOLVE_OP_HPP	.\include\asio\detail\resolve_op.hpp	12;"	d
ASIO_DETAIL_RESOLVE_QUERY_OP_HPP	.\include\asio\detail\resolve_query_op.hpp	12;"	d
ASIO_DETAIL_SCHEDULER_HPP	.\include\asio\detail\scheduler.hpp	12;"	d
ASIO_DETAIL_SCHEDULER_OPERATION_HPP	.\include\asio\detail\scheduler_operation.hpp	12;"	d
ASIO_DETAIL_SCHEDULER_THREAD_INFO_HPP	.\include\asio\detail\scheduler_thread_info.hpp	12;"	d
ASIO_DETAIL_SCOPED_LOCK_HPP	.\include\asio\detail\scoped_lock.hpp	12;"	d
ASIO_DETAIL_SCOPED_PTR_HPP	.\include\asio\detail\scoped_ptr.hpp	12;"	d
ASIO_DETAIL_SELECT_INTERRUPTER_HPP	.\include\asio\detail\select_interrupter.hpp	12;"	d
ASIO_DETAIL_SELECT_REACTOR_HPP	.\include\asio\detail\select_reactor.hpp	12;"	d
ASIO_DETAIL_SERVICE_REGISTRY_HPP	.\include\asio\detail\service_registry.hpp	12;"	d
ASIO_DETAIL_SIGNAL_BLOCKER_HPP	.\include\asio\detail\signal_blocker.hpp	12;"	d
ASIO_DETAIL_SIGNAL_HANDLER_HPP	.\include\asio\detail\signal_handler.hpp	12;"	d
ASIO_DETAIL_SIGNAL_INIT_HPP	.\include\asio\detail\signal_init.hpp	12;"	d
ASIO_DETAIL_SIGNAL_OP_HPP	.\include\asio\detail\signal_op.hpp	12;"	d
ASIO_DETAIL_SIGNAL_SET_SERVICE_HPP	.\include\asio\detail\signal_set_service.hpp	12;"	d
ASIO_DETAIL_SOCKET_HOLDER_HPP	.\include\asio\detail\socket_holder.hpp	12;"	d
ASIO_DETAIL_SOCKET_OPS_HPP	.\include\asio\detail\socket_ops.hpp	12;"	d
ASIO_DETAIL_SOCKET_OPTION_HPP	.\include\asio\detail\socket_option.hpp	12;"	d
ASIO_DETAIL_SOCKET_SELECT_INTERRUPTER_HPP	.\include\asio\detail\socket_select_interrupter.hpp	12;"	d
ASIO_DETAIL_SOCKET_TYPES_HPP	.\include\asio\detail\socket_types.hpp	12;"	d
ASIO_DETAIL_SOLARIS_FENCED_BLOCK_HPP	.\include\asio\detail\solaris_fenced_block.hpp	12;"	d
ASIO_DETAIL_STATIC_MUTEX_HPP	.\include\asio\detail\static_mutex.hpp	12;"	d
ASIO_DETAIL_STD_EVENT_HPP	.\include\asio\detail\std_event.hpp	12;"	d
ASIO_DETAIL_STD_FENCED_BLOCK_HPP	.\include\asio\detail\std_fenced_block.hpp	12;"	d
ASIO_DETAIL_STD_GLOBAL_HPP	.\include\asio\detail\std_global.hpp	12;"	d
ASIO_DETAIL_STD_MUTEX_HPP	.\include\asio\detail\std_mutex.hpp	12;"	d
ASIO_DETAIL_STD_STATIC_MUTEX_HPP	.\include\asio\detail\std_static_mutex.hpp	12;"	d
ASIO_DETAIL_STD_THREAD_HPP	.\include\asio\detail\std_thread.hpp	12;"	d
ASIO_DETAIL_STRAND_EXECUTOR_SERVICE_HPP	.\include\asio\detail\strand_executor_service.hpp	12;"	d
ASIO_DETAIL_STRAND_SERVICE_HPP	.\include\asio\detail\strand_service.hpp	12;"	d
ASIO_DETAIL_STRING_VIEW_HPP	.\include\asio\detail\string_view.hpp	12;"	d
ASIO_DETAIL_THREAD_CONTEXT_HPP	.\include\asio\detail\thread_context.hpp	12;"	d
ASIO_DETAIL_THREAD_GROUP_HPP	.\include\asio\detail\thread_group.hpp	12;"	d
ASIO_DETAIL_THREAD_HPP	.\include\asio\detail\thread.hpp	12;"	d
ASIO_DETAIL_THREAD_INFO_BASE_HPP	.\include\asio\detail\thread_info_base.hpp	12;"	d
ASIO_DETAIL_THROW_ERROR_HPP	.\include\asio\detail\throw_error.hpp	12;"	d
ASIO_DETAIL_THROW_EXCEPTION_HPP	.\include\asio\detail\throw_exception.hpp	12;"	d
ASIO_DETAIL_TIMER_QUEUE_BASE_HPP	.\include\asio\detail\timer_queue_base.hpp	12;"	d
ASIO_DETAIL_TIMER_QUEUE_HPP	.\include\asio\detail\timer_queue.hpp	12;"	d
ASIO_DETAIL_TIMER_QUEUE_PTIME_HPP	.\include\asio\detail\timer_queue_ptime.hpp	12;"	d
ASIO_DETAIL_TIMER_QUEUE_SET_HPP	.\include\asio\detail\timer_queue_set.hpp	12;"	d
ASIO_DETAIL_TIMER_SCHEDULER_FWD_HPP	.\include\asio\detail\timer_scheduler_fwd.hpp	12;"	d
ASIO_DETAIL_TIMER_SCHEDULER_HPP	.\include\asio\detail\timer_scheduler.hpp	12;"	d
ASIO_DETAIL_TSS_PTR_HPP	.\include\asio\detail\tss_ptr.hpp	12;"	d
ASIO_DETAIL_TYPE_TRAITS_HPP	.\include\asio\detail\type_traits.hpp	12;"	d
ASIO_DETAIL_VARIADIC_TEMPLATES_HPP	.\include\asio\detail\variadic_templates.hpp	12;"	d
ASIO_DETAIL_WAIT_HANDLER_HPP	.\include\asio\detail\wait_handler.hpp	12;"	d
ASIO_DETAIL_WAIT_OP_HPP	.\include\asio\detail\wait_op.hpp	12;"	d
ASIO_DETAIL_WINAPP_THREAD_HPP	.\include\asio\detail\winapp_thread.hpp	12;"	d
ASIO_DETAIL_WINCE_THREAD_HPP	.\include\asio\detail\wince_thread.hpp	12;"	d
ASIO_DETAIL_WINRT_ASYNC_MANAGER_HPP	.\include\asio\detail\winrt_async_manager.hpp	12;"	d
ASIO_DETAIL_WINRT_ASYNC_OP_HPP	.\include\asio\detail\winrt_async_op.hpp	12;"	d
ASIO_DETAIL_WINRT_RESOLVER_SERVICE_HPP	.\include\asio\detail\winrt_resolver_service.hpp	12;"	d
ASIO_DETAIL_WINRT_RESOLVE_OP_HPP	.\include\asio\detail\winrt_resolve_op.hpp	12;"	d
ASIO_DETAIL_WINRT_SOCKET_CONNECT_OP_HPP	.\include\asio\detail\winrt_socket_connect_op.hpp	12;"	d
ASIO_DETAIL_WINRT_SOCKET_RECV_OP_HPP	.\include\asio\detail\winrt_socket_recv_op.hpp	12;"	d
ASIO_DETAIL_WINRT_SOCKET_SEND_OP_HPP	.\include\asio\detail\winrt_socket_send_op.hpp	12;"	d
ASIO_DETAIL_WINRT_SSOCKET_SERVICE_BASE_HPP	.\include\asio\detail\winrt_ssocket_service_base.hpp	12;"	d
ASIO_DETAIL_WINRT_SSOCKET_SERVICE_HPP	.\include\asio\detail\winrt_ssocket_service.hpp	12;"	d
ASIO_DETAIL_WINRT_TIMER_SCHEDULER_HPP	.\include\asio\detail\winrt_timer_scheduler.hpp	12;"	d
ASIO_DETAIL_WINRT_UTILS_HPP	.\include\asio\detail\winrt_utils.hpp	12;"	d
ASIO_DETAIL_WINSOCK_INIT_HPP	.\include\asio\detail\winsock_init.hpp	12;"	d
ASIO_DETAIL_WIN_EVENT_HPP	.\include\asio\detail\win_event.hpp	12;"	d
ASIO_DETAIL_WIN_FD_SET_ADAPTER_HPP	.\include\asio\detail\win_fd_set_adapter.hpp	12;"	d
ASIO_DETAIL_WIN_FENCED_BLOCK_HPP	.\include\asio\detail\win_fenced_block.hpp	12;"	d
ASIO_DETAIL_WIN_GLOBAL_HPP	.\include\asio\detail\win_global.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_HANDLE_READ_OP_HPP	.\include\asio\detail\win_iocp_handle_read_op.hpp	13;"	d
ASIO_DETAIL_WIN_IOCP_HANDLE_SERVICE_HPP	.\include\asio\detail\win_iocp_handle_service.hpp	13;"	d
ASIO_DETAIL_WIN_IOCP_HANDLE_WRITE_OP_HPP	.\include\asio\detail\win_iocp_handle_write_op.hpp	13;"	d
ASIO_DETAIL_WIN_IOCP_IO_CONTEXT_HPP	.\include\asio\detail\win_iocp_io_context.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_NULL_BUFFERS_OP_HPP	.\include\asio\detail\win_iocp_null_buffers_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_OPERATION_HPP	.\include\asio\detail\win_iocp_operation.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_OVERLAPPED_OP_HPP	.\include\asio\detail\win_iocp_overlapped_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_OVERLAPPED_PTR_HPP	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SERIAL_PORT_SERVICE_HPP	.\include\asio\detail\win_iocp_serial_port_service.hpp	13;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_ACCEPT_OP_HPP	.\include\asio\detail\win_iocp_socket_accept_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_CONNECT_OP_HPP	.\include\asio\detail\win_iocp_socket_connect_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_RECVFROM_OP_HPP	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_RECVMSG_OP_HPP	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_RECV_OP_HPP	.\include\asio\detail\win_iocp_socket_recv_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_SEND_OP_HPP	.\include\asio\detail\win_iocp_socket_send_op.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_SERVICE_BASE_HPP	.\include\asio\detail\win_iocp_socket_service_base.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_SOCKET_SERVICE_HPP	.\include\asio\detail\win_iocp_socket_service.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_THREAD_INFO_HPP	.\include\asio\detail\win_iocp_thread_info.hpp	12;"	d
ASIO_DETAIL_WIN_IOCP_WAIT_OP_HPP	.\include\asio\detail\win_iocp_wait_op.hpp	12;"	d
ASIO_DETAIL_WIN_MUTEX_HPP	.\include\asio\detail\win_mutex.hpp	12;"	d
ASIO_DETAIL_WIN_OBJECT_HANDLE_SERVICE_HPP	.\include\asio\detail\win_object_handle_service.hpp	13;"	d
ASIO_DETAIL_WIN_STATIC_MUTEX_HPP	.\include\asio\detail\win_static_mutex.hpp	12;"	d
ASIO_DETAIL_WIN_THREAD_HPP	.\include\asio\detail\win_thread.hpp	12;"	d
ASIO_DETAIL_WIN_TSS_PTR_HPP	.\include\asio\detail\win_tss_ptr.hpp	12;"	d
ASIO_DETAIL_WORK_DISPATCHER_HPP	.\include\asio\detail\work_dispatcher.hpp	12;"	d
ASIO_DETAIL_WRAPPED_HANDLER_HPP	.\include\asio\detail\wrapped_handler.hpp	12;"	d
ASIO_DISABLE_BOOST_ARRAY	.\include\asio\detail\config.hpp	15;"	d
ASIO_DISABLE_BOOST_ASSERT	.\include\asio\detail\config.hpp	16;"	d
ASIO_DISABLE_BOOST_BIND	.\include\asio\detail\config.hpp	17;"	d
ASIO_DISABLE_BOOST_CHRONO	.\include\asio\detail\config.hpp	18;"	d
ASIO_DISABLE_BOOST_DATE_TIME	.\include\asio\detail\config.hpp	19;"	d
ASIO_DISABLE_BOOST_LIMITS	.\include\asio\detail\config.hpp	20;"	d
ASIO_DISABLE_BOOST_REGEX	.\include\asio\detail\config.hpp	21;"	d
ASIO_DISABLE_BOOST_STATIC_CONSTANT	.\include\asio\detail\config.hpp	22;"	d
ASIO_DISABLE_BOOST_THROW_EXCEPTION	.\include\asio\detail\config.hpp	23;"	d
ASIO_DISABLE_BOOST_WORKAROUND	.\include\asio\detail\config.hpp	24;"	d
ASIO_DISPATCH_HPP	.\include\asio\dispatch.hpp	12;"	d
ASIO_ENABLE_ARRAY_BUFFER_WORKAROUND	.\include\asio\buffer.hpp	55;"	d
ASIO_ENABLE_BUFFER_DEBUGGING	.\include\asio\buffer.hpp	34;"	d
ASIO_ENABLE_BUFFER_DEBUGGING	.\include\asio\buffer.hpp	42;"	d
ASIO_ENABLE_HANDLER_TRACKING	.\include\asio\detail\handler_tracking.hpp	60;"	d
ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS	.\include\asio\detail\handler_type_requirements.hpp	25;"	d
ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS_ASSERT	.\include\asio\detail\handler_type_requirements.hpp	36;"	d
ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS_ASSERT	.\include\asio\detail\handler_type_requirements.hpp	42;"	d
ASIO_ENABLE_HANDLER_TYPE_REQUIREMENTS_ASSERT	.\include\asio\detail\handler_type_requirements.hpp	47;"	d
ASIO_ERROR_CATEGORY_NOEXCEPT	.\include\asio\detail\config.hpp	338;"	d
ASIO_ERROR_CATEGORY_NOEXCEPT	.\include\asio\detail\config.hpp	341;"	d
ASIO_ERROR_CATEGORY_NOEXCEPT	.\include\asio\detail\config.hpp	346;"	d
ASIO_ERROR_CATEGORY_NOEXCEPT	.\include\asio\detail\config.hpp	351;"	d
ASIO_ERROR_CATEGORY_NOEXCEPT	.\include\asio\detail\config.hpp	355;"	d
ASIO_ERROR_CODE_HPP	.\include\asio\error_code.hpp	12;"	d
ASIO_ERROR_HPP	.\include\asio\error.hpp	12;"	d
ASIO_EXECUTION_CONTEXT_HPP	.\include\asio\execution_context.hpp	12;"	d
ASIO_EXECUTOR_HPP	.\include\asio\executor.hpp	12;"	d
ASIO_EXECUTOR_WORK_GUARD_HPP	.\include\asio\executor_work_guard.hpp	12;"	d
ASIO_EXPERIMENTAL_CO_SPAWN_HPP	.\include\asio\experimental\co_spawn.hpp	12;"	d
ASIO_EXPERIMENTAL_DETACHED_HPP	.\include\asio\experimental\detached.hpp	12;"	d
ASIO_EXPERIMENTAL_HPP	.\include\asio\experimental.hpp	12;"	d
ASIO_EXPERIMENTAL_IMPL_CO_SPAWN_HPP	.\include\asio\experimental\impl\co_spawn.hpp	12;"	d
ASIO_EXPERIMENTAL_IMPL_DETACHED_HPP	.\include\asio\experimental\impl\detached.hpp	12;"	d
ASIO_EXPERIMENTAL_IMPL_REDIRECT_ERROR_HPP	.\include\asio\experimental\impl\redirect_error.hpp	12;"	d
ASIO_EXPERIMENTAL_REDIRECT_ERROR_HPP	.\include\asio\experimental\redirect_error.hpp	12;"	d
ASIO_GENERIC_BASIC_ENDPOINT_HPP	.\include\asio\generic\basic_endpoint.hpp	12;"	d
ASIO_GENERIC_DATAGRAM_PROTOCOL_HPP	.\include\asio\generic\datagram_protocol.hpp	12;"	d
ASIO_GENERIC_DETAIL_ENDPOINT_HPP	.\include\asio\generic\detail\endpoint.hpp	12;"	d
ASIO_GENERIC_RAW_PROTOCOL_HPP	.\include\asio\generic\raw_protocol.hpp	12;"	d
ASIO_GENERIC_SEQ_PACKET_PROTOCOL_HPP	.\include\asio\generic\seq_packet_protocol.hpp	12;"	d
ASIO_GENERIC_STREAM_PROTOCOL_HPP	.\include\asio\generic\stream_protocol.hpp	12;"	d
ASIO_GETADDRINFO_ERROR	.\include\asio\error.hpp	349;"	d
ASIO_GETADDRINFO_ERROR	.\include\asio\error.hpp	38;"	d
ASIO_GETADDRINFO_ERROR	.\include\asio\error.hpp	45;"	d
ASIO_GETADDRINFO_ERROR	.\include\asio\error.hpp	51;"	d
ASIO_GETADDRINFO_ERROR	.\include\asio\error.hpp	57;"	d
ASIO_HANDLER_ALLOC_HOOK_HPP	.\include\asio\handler_alloc_hook.hpp	12;"	d
ASIO_HANDLER_CONTINUATION_HOOK_HPP	.\include\asio\handler_continuation_hook.hpp	12;"	d
ASIO_HANDLER_INVOKE_HOOK_HPP	.\include\asio\handler_invoke_hook.hpp	12;"	d
ASIO_HANDLER_TYPE_HPP	.\include\asio\handler_type.hpp	12;"	d
ASIO_HANDLER_TYPE_REQUIREMENTS_ASSERT	.\include\asio\detail\handler_type_requirements.hpp	103;"	d
ASIO_HANDSHAKE_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	416;"	d
ASIO_HAS_ALIAS_TEMPLATES	.\include\asio\detail\config.hpp	290;"	d
ASIO_HAS_ALIAS_TEMPLATES	.\include\asio\detail\config.hpp	296;"	d
ASIO_HAS_ALIAS_TEMPLATES	.\include\asio\detail\config.hpp	302;"	d
ASIO_HAS_BOOST_ARRAY	.\include\asio\detail\config.hpp	1243;"	d
ASIO_HAS_BOOST_ASSERT	.\include\asio\detail\config.hpp	1250;"	d
ASIO_HAS_BOOST_BIND	.\include\asio\detail\config.hpp	1278;"	d
ASIO_HAS_BOOST_CHRONO	.\include\asio\detail\config.hpp	499;"	d
ASIO_HAS_BOOST_CONFIG	.\include\asio\detail\config.hpp	28;"	d
ASIO_HAS_BOOST_DATE_TIME	.\include\asio\detail\config.hpp	516;"	d
ASIO_HAS_BOOST_LIMITS	.\include\asio\detail\config.hpp	1257;"	d
ASIO_HAS_BOOST_REGEX	.\include\asio\detail\config.hpp	1271;"	d
ASIO_HAS_BOOST_THROW_EXCEPTION	.\include\asio\detail\config.hpp	1264;"	d
ASIO_HAS_BOOST_WORKAROUND	.\include\asio\detail\config.hpp	1285;"	d
ASIO_HAS_CHRONO	.\include\asio\detail\config.hpp	508;"	d
ASIO_HAS_CLANG_LIBCXX	.\include\asio\detail\config.hpp	83;"	d
ASIO_HAS_CONSTEXPR	.\include\asio\detail\config.hpp	204;"	d
ASIO_HAS_CONSTEXPR	.\include\asio\detail\config.hpp	210;"	d
ASIO_HAS_CONSTEXPR	.\include\asio\detail\config.hpp	216;"	d
ASIO_HAS_CO_AWAIT	.\include\asio\detail\config.hpp	1423;"	d
ASIO_HAS_CO_AWAIT	.\include\asio\detail\config.hpp	1431;"	d
ASIO_HAS_CSTDINT	.\include\asio\detail\config.hpp	648;"	d
ASIO_HAS_CSTDINT	.\include\asio\detail\config.hpp	650;"	d
ASIO_HAS_CSTDINT	.\include\asio\detail\config.hpp	656;"	d
ASIO_HAS_CSTDINT	.\include\asio\detail\config.hpp	662;"	d
ASIO_HAS_CXX11_ALLOCATORS	.\include\asio\detail\config.hpp	624;"	d
ASIO_HAS_CXX11_ALLOCATORS	.\include\asio\detail\config.hpp	626;"	d
ASIO_HAS_CXX11_ALLOCATORS	.\include\asio\detail\config.hpp	631;"	d
ASIO_HAS_CXX11_ALLOCATORS	.\include\asio\detail\config.hpp	637;"	d
ASIO_HAS_DECLTYPE	.\include\asio\detail\config.hpp	267;"	d
ASIO_HAS_DECLTYPE	.\include\asio\detail\config.hpp	273;"	d
ASIO_HAS_DECLTYPE	.\include\asio\detail\config.hpp	279;"	d
ASIO_HAS_DEV_POLL	.\include\asio\detail\config.hpp	1041;"	d
ASIO_HAS_EPOLL	.\include\asio\detail\config.hpp	1002;"	d
ASIO_HAS_EVENTFD	.\include\asio\detail\config.hpp	1009;"	d
ASIO_HAS_GETADDRINFO	.\include\asio\detail\config.hpp	1154;"	d
ASIO_HAS_GETADDRINFO	.\include\asio\detail\config.hpp	1156;"	d
ASIO_HAS_GETADDRINFO	.\include\asio\detail\config.hpp	1161;"	d
ASIO_HAS_GETADDRINFO	.\include\asio\detail\config.hpp	1164;"	d
ASIO_HAS_GETADDRINFO	.\include\asio\detail\config.hpp	1167;"	d
ASIO_HAS_HANDLER_HOOKS	.\include\asio\detail\config.hpp	1307;"	d
ASIO_HAS_HANDLER_HOOKS	.\include\asio\detail\config.hpp	1310;"	d
ASIO_HAS_IOCP	.\include\asio\detail\config.hpp	967;"	d
ASIO_HAS_KQUEUE	.\include\asio\detail\config.hpp	1029;"	d
ASIO_HAS_LOCAL_SOCKETS	.\include\asio\detail\config.hpp	1120;"	d
ASIO_HAS_MOVE	.\include\asio\detail\config.hpp	105;"	d
ASIO_HAS_MOVE	.\include\asio\detail\config.hpp	111;"	d
ASIO_HAS_MOVE	.\include\asio\detail\config.hpp	99;"	d
ASIO_HAS_NULLPTR	.\include\asio\detail\config.hpp	602;"	d
ASIO_HAS_NULLPTR	.\include\asio\detail\config.hpp	607;"	d
ASIO_HAS_NULLPTR	.\include\asio\detail\config.hpp	613;"	d
ASIO_HAS_OLD_WIN_SDK	.\include\asio\detail\old_win_sdk_compat.hpp	24;"	d
ASIO_HAS_POSIX_STREAM_DESCRIPTOR	.\include\asio\detail\config.hpp	1107;"	d
ASIO_HAS_PTHREADS	.\include\asio\detail\config.hpp	1219;"	d
ASIO_HAS_PTHREADS	.\include\asio\detail\config.hpp	1221;"	d
ASIO_HAS_SECURE_RTL	.\include\asio\detail\config.hpp	1295;"	d
ASIO_HAS_SERIAL_PORT	.\include\asio\detail\config.hpp	1054;"	d
ASIO_HAS_SIGACTION	.\include\asio\detail\config.hpp	1133;"	d
ASIO_HAS_SIGNAL	.\include\asio\detail\config.hpp	1144;"	d
ASIO_HAS_SSIZE_T	.\include\asio\detail\config.hpp	1346;"	d
ASIO_HAS_STD_ADDRESSOF	.\include\asio\detail\config.hpp	525;"	d
ASIO_HAS_STD_ADDRESSOF	.\include\asio\detail\config.hpp	527;"	d
ASIO_HAS_STD_ADDRESSOF	.\include\asio\detail\config.hpp	533;"	d
ASIO_HAS_STD_ADDRESSOF	.\include\asio\detail\config.hpp	539;"	d
ASIO_HAS_STD_ALLOCATOR_ARG	.\include\asio\detail\config.hpp	416;"	d
ASIO_HAS_STD_ALLOCATOR_ARG	.\include\asio\detail\config.hpp	418;"	d
ASIO_HAS_STD_ALLOCATOR_ARG	.\include\asio\detail\config.hpp	424;"	d
ASIO_HAS_STD_ALLOCATOR_ARG	.\include\asio\detail\config.hpp	430;"	d
ASIO_HAS_STD_ARRAY	.\include\asio\detail\config.hpp	364;"	d
ASIO_HAS_STD_ARRAY	.\include\asio\detail\config.hpp	367;"	d
ASIO_HAS_STD_ARRAY	.\include\asio\detail\config.hpp	374;"	d
ASIO_HAS_STD_ARRAY	.\include\asio\detail\config.hpp	380;"	d
ASIO_HAS_STD_ATOMIC	.\include\asio\detail\config.hpp	441;"	d
ASIO_HAS_STD_ATOMIC	.\include\asio\detail\config.hpp	444;"	d
ASIO_HAS_STD_ATOMIC	.\include\asio\detail\config.hpp	451;"	d
ASIO_HAS_STD_ATOMIC	.\include\asio\detail\config.hpp	457;"	d
ASIO_HAS_STD_CALL_ONCE	.\include\asio\detail\config.hpp	727;"	d
ASIO_HAS_STD_CALL_ONCE	.\include\asio\detail\config.hpp	730;"	d
ASIO_HAS_STD_CALL_ONCE	.\include\asio\detail\config.hpp	737;"	d
ASIO_HAS_STD_CALL_ONCE	.\include\asio\detail\config.hpp	743;"	d
ASIO_HAS_STD_CHRONO	.\include\asio\detail\config.hpp	470;"	d
ASIO_HAS_STD_CHRONO	.\include\asio\detail\config.hpp	473;"	d
ASIO_HAS_STD_CHRONO	.\include\asio\detail\config.hpp	480;"	d
ASIO_HAS_STD_CHRONO	.\include\asio\detail\config.hpp	489;"	d
ASIO_HAS_STD_CHRONO_MONOTONIC_CLOCK	.\include\asio\detail\config.hpp	482;"	d
ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW	.\include\asio\detail\config.hpp	809;"	d
ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW	.\include\asio\detail\config.hpp	816;"	d
ASIO_HAS_STD_FUNCTION	.\include\asio\detail\config.hpp	550;"	d
ASIO_HAS_STD_FUNCTION	.\include\asio\detail\config.hpp	552;"	d
ASIO_HAS_STD_FUNCTION	.\include\asio\detail\config.hpp	558;"	d
ASIO_HAS_STD_FUNCTION	.\include\asio\detail\config.hpp	564;"	d
ASIO_HAS_STD_FUTURE	.\include\asio\detail\config.hpp	754;"	d
ASIO_HAS_STD_FUTURE	.\include\asio\detail\config.hpp	757;"	d
ASIO_HAS_STD_FUTURE	.\include\asio\detail\config.hpp	765;"	d
ASIO_HAS_STD_FUTURE	.\include\asio\detail\config.hpp	772;"	d
ASIO_HAS_STD_INVOKE_RESULT	.\include\asio\detail\config.hpp	857;"	d
ASIO_HAS_STD_IOSTREAM_MOVE	.\include\asio\detail\config.hpp	840;"	d
ASIO_HAS_STD_IOSTREAM_MOVE	.\include\asio\detail\config.hpp	846;"	d
ASIO_HAS_STD_MUTEX_AND_CONDVAR	.\include\asio\detail\config.hpp	700;"	d
ASIO_HAS_STD_MUTEX_AND_CONDVAR	.\include\asio\detail\config.hpp	703;"	d
ASIO_HAS_STD_MUTEX_AND_CONDVAR	.\include\asio\detail\config.hpp	710;"	d
ASIO_HAS_STD_MUTEX_AND_CONDVAR	.\include\asio\detail\config.hpp	716;"	d
ASIO_HAS_STD_SHARED_PTR	.\include\asio\detail\config.hpp	391;"	d
ASIO_HAS_STD_SHARED_PTR	.\include\asio\detail\config.hpp	393;"	d
ASIO_HAS_STD_SHARED_PTR	.\include\asio\detail\config.hpp	399;"	d
ASIO_HAS_STD_SHARED_PTR	.\include\asio\detail\config.hpp	405;"	d
ASIO_HAS_STD_STRING_VIEW	.\include\asio\detail\config.hpp	784;"	d
ASIO_HAS_STD_STRING_VIEW	.\include\asio\detail\config.hpp	791;"	d
ASIO_HAS_STD_STRING_VIEW	.\include\asio\detail\config.hpp	797;"	d
ASIO_HAS_STD_SYSTEM_ERROR	.\include\asio\detail\config.hpp	313;"	d
ASIO_HAS_STD_SYSTEM_ERROR	.\include\asio\detail\config.hpp	316;"	d
ASIO_HAS_STD_SYSTEM_ERROR	.\include\asio\detail\config.hpp	323;"	d
ASIO_HAS_STD_SYSTEM_ERROR	.\include\asio\detail\config.hpp	329;"	d
ASIO_HAS_STD_THREAD	.\include\asio\detail\config.hpp	673;"	d
ASIO_HAS_STD_THREAD	.\include\asio\detail\config.hpp	676;"	d
ASIO_HAS_STD_THREAD	.\include\asio\detail\config.hpp	683;"	d
ASIO_HAS_STD_THREAD	.\include\asio\detail\config.hpp	689;"	d
ASIO_HAS_STD_TYPE_TRAITS	.\include\asio\detail\config.hpp	575;"	d
ASIO_HAS_STD_TYPE_TRAITS	.\include\asio\detail\config.hpp	578;"	d
ASIO_HAS_STD_TYPE_TRAITS	.\include\asio\detail\config.hpp	585;"	d
ASIO_HAS_STD_TYPE_TRAITS	.\include\asio\detail\config.hpp	591;"	d
ASIO_HAS_STRING_VIEW	.\include\asio\detail\config.hpp	827;"	d
ASIO_HAS_STRING_VIEW	.\include\asio\detail\config.hpp	829;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1197;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1200;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1202;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1204;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1206;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1208;"	d
ASIO_HAS_THREADS	.\include\asio\detail\config.hpp	1210;"	d
ASIO_HAS_THREAD_KEYWORD_EXTENSION	.\include\asio\detail\config.hpp	1322;"	d
ASIO_HAS_THREAD_KEYWORD_EXTENSION	.\include\asio\detail\config.hpp	1325;"	d
ASIO_HAS_THREAD_KEYWORD_EXTENSION	.\include\asio\detail\config.hpp	1333;"	d
ASIO_HAS_TIMERFD	.\include\asio\detail\config.hpp	1016;"	d
ASIO_HAS_UNISTD_H	.\include\asio\detail\config.hpp	988;"	d
ASIO_HAS_VARIADIC_TEMPLATES	.\include\asio\detail\config.hpp	157;"	d
ASIO_HAS_VARIADIC_TEMPLATES	.\include\asio\detail\config.hpp	163;"	d
ASIO_HAS_VARIADIC_TEMPLATES	.\include\asio\detail\config.hpp	169;"	d
ASIO_HAS_WINDOWS_OBJECT_HANDLE	.\include\asio\detail\config.hpp	1086;"	d
ASIO_HAS_WINDOWS_OVERLAPPED_PTR	.\include\asio\detail\config.hpp	1096;"	d
ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE	.\include\asio\detail\config.hpp	1076;"	d
ASIO_HAS_WINDOWS_STREAM_HANDLE	.\include\asio\detail\config.hpp	1067;"	d
ASIO_HEADER_ONLY	.\include\asio\detail\config.hpp	37;"	d
ASIO_HIGH_RESOLUTION_TIMER_HPP	.\include\asio\high_resolution_timer.hpp	12;"	d
ASIO_HPP	.\include\asio.hpp	12;"	d
ASIO_IMPL_BUFFERED_READ_STREAM_HPP	.\include\asio\impl\buffered_read_stream.hpp	12;"	d
ASIO_IMPL_BUFFERED_WRITE_STREAM_HPP	.\include\asio\impl\buffered_write_stream.hpp	12;"	d
ASIO_IMPL_CONNECT_HPP	.\include\asio\impl\connect.hpp	12;"	d
ASIO_IMPL_DEFER_HPP	.\include\asio\impl\defer.hpp	12;"	d
ASIO_IMPL_DISPATCH_HPP	.\include\asio\impl\dispatch.hpp	12;"	d
ASIO_IMPL_EXECUTION_CONTEXT_HPP	.\include\asio\impl\execution_context.hpp	12;"	d
ASIO_IMPL_EXECUTOR_HPP	.\include\asio\impl\executor.hpp	12;"	d
ASIO_IMPL_IO_CONTEXT_HPP	.\include\asio\impl\io_context.hpp	12;"	d
ASIO_IMPL_POST_HPP	.\include\asio\impl\post.hpp	12;"	d
ASIO_IMPL_READ_AT_HPP	.\include\asio\impl\read_at.hpp	12;"	d
ASIO_IMPL_READ_HPP	.\include\asio\impl\read.hpp	12;"	d
ASIO_IMPL_READ_UNTIL_HPP	.\include\asio\impl\read_until.hpp	12;"	d
ASIO_IMPL_SERIAL_PORT_BASE_HPP	.\include\asio\impl\serial_port_base.hpp	13;"	d
ASIO_IMPL_SPAWN_HPP	.\include\asio\impl\spawn.hpp	12;"	d
ASIO_IMPL_SRC_HPP	.\include\asio\impl\src.hpp	12;"	d
ASIO_IMPL_SYSTEM_CONTEXT_HPP	.\include\asio\impl\system_context.hpp	12;"	d
ASIO_IMPL_SYSTEM_EXECUTOR_HPP	.\include\asio\impl\system_executor.hpp	12;"	d
ASIO_IMPL_THREAD_POOL_HPP	.\include\asio\impl\thread_pool.hpp	12;"	d
ASIO_IMPL_USE_FUTURE_HPP	.\include\asio\impl\use_future.hpp	12;"	d
ASIO_IMPL_WRITE_AT_HPP	.\include\asio\impl\write_at.hpp	12;"	d
ASIO_IMPL_WRITE_HPP	.\include\asio\impl\write.hpp	12;"	d
ASIO_INHERIT_TRACKED_HANDLER	.\include\asio\detail\scheduler_operation.hpp	/^class scheduler_operation ASIO_INHERIT_TRACKED_HANDLER$/;"	c	namespace:asio::detail
ASIO_INITFN_RESULT_TYPE	.\include\asio\async_result.hpp	203;"	d
ASIO_IO_CONTEXT_HPP	.\include\asio\io_context.hpp	12;"	d
ASIO_IO_CONTEXT_STRAND_HPP	.\include\asio\io_context_strand.hpp	12;"	d
ASIO_IO_SERVICE_HPP	.\include\asio\io_service.hpp	12;"	d
ASIO_IO_SERVICE_STRAND_HPP	.\include\asio\io_service_strand.hpp	12;"	d
ASIO_IP_ADDRESS_HPP	.\include\asio\ip\address.hpp	12;"	d
ASIO_IP_ADDRESS_V4_HPP	.\include\asio\ip\address_v4.hpp	12;"	d
ASIO_IP_ADDRESS_V4_ITERATOR_HPP	.\include\asio\ip\address_v4_iterator.hpp	12;"	d
ASIO_IP_ADDRESS_V4_RANGE_HPP	.\include\asio\ip\address_v4_range.hpp	12;"	d
ASIO_IP_ADDRESS_V6_HPP	.\include\asio\ip\address_v6.hpp	12;"	d
ASIO_IP_ADDRESS_V6_ITERATOR_HPP	.\include\asio\ip\address_v6_iterator.hpp	13;"	d
ASIO_IP_ADDRESS_V6_RANGE_HPP	.\include\asio\ip\address_v6_range.hpp	13;"	d
ASIO_IP_BAD_ADDRESS_CAST_HPP	.\include\asio\ip\bad_address_cast.hpp	12;"	d
ASIO_IP_BASIC_ENDPOINT_HPP	.\include\asio\ip\basic_endpoint.hpp	12;"	d
ASIO_IP_BASIC_RESOLVER_ENTRY_HPP	.\include\asio\ip\basic_resolver_entry.hpp	12;"	d
ASIO_IP_BASIC_RESOLVER_HPP	.\include\asio\ip\basic_resolver.hpp	12;"	d
ASIO_IP_BASIC_RESOLVER_ITERATOR_HPP	.\include\asio\ip\basic_resolver_iterator.hpp	12;"	d
ASIO_IP_BASIC_RESOLVER_QUERY_HPP	.\include\asio\ip\basic_resolver_query.hpp	12;"	d
ASIO_IP_BASIC_RESOLVER_RESULTS_HPP	.\include\asio\ip\basic_resolver_results.hpp	12;"	d
ASIO_IP_DETAIL_ENDPOINT_HPP	.\include\asio\ip\detail\endpoint.hpp	12;"	d
ASIO_IP_DETAIL_SOCKET_OPTION_HPP	.\include\asio\ip\detail\socket_option.hpp	12;"	d
ASIO_IP_HOST_NAME_HPP	.\include\asio\ip\host_name.hpp	12;"	d
ASIO_IP_ICMP_HPP	.\include\asio\ip\icmp.hpp	12;"	d
ASIO_IP_IMPL_ADDRESS_HPP	.\include\asio\ip\impl\address.hpp	12;"	d
ASIO_IP_IMPL_ADDRESS_V4_HPP	.\include\asio\ip\impl\address_v4.hpp	12;"	d
ASIO_IP_IMPL_ADDRESS_V6_HPP	.\include\asio\ip\impl\address_v6.hpp	12;"	d
ASIO_IP_IMPL_BASIC_ENDPOINT_HPP	.\include\asio\ip\impl\basic_endpoint.hpp	12;"	d
ASIO_IP_IMPL_NETWORK_V4_HPP	.\include\asio\ip\impl\network_v4.hpp	13;"	d
ASIO_IP_IMPL_NETWORK_V6_HPP	.\include\asio\ip\impl\network_v6.hpp	12;"	d
ASIO_IP_MULTICAST_HPP	.\include\asio\ip\multicast.hpp	12;"	d
ASIO_IP_NETWORK_V4_HPP	.\include\asio\ip\network_v4.hpp	13;"	d
ASIO_IP_NETWORK_V6_HPP	.\include\asio\ip\network_v6.hpp	13;"	d
ASIO_IP_RESOLVER_BASE_HPP	.\include\asio\ip\resolver_base.hpp	12;"	d
ASIO_IP_RESOLVER_QUERY_BASE_HPP	.\include\asio\ip\resolver_query_base.hpp	12;"	d
ASIO_IP_RESOLVER_SERVICE_HPP	.\include\asio\ip\resolver_service.hpp	12;"	d
ASIO_IP_TCP_HPP	.\include\asio\ip\tcp.hpp	12;"	d
ASIO_IP_UDP_HPP	.\include\asio\ip\udp.hpp	12;"	d
ASIO_IP_UNICAST_HPP	.\include\asio\ip\unicast.hpp	12;"	d
ASIO_IP_V6_ONLY_HPP	.\include\asio\ip\v6_only.hpp	12;"	d
ASIO_IS_EXECUTOR_HPP	.\include\asio\is_executor.hpp	12;"	d
ASIO_IS_READ_BUFFERED_HPP	.\include\asio\is_read_buffered.hpp	12;"	d
ASIO_IS_WRITE_BUFFERED_HPP	.\include\asio\is_write_buffered.hpp	12;"	d
ASIO_ITERATOR_CONNECT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	310;"	d
ASIO_LEGACY_COMPLETION_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	130;"	d
ASIO_LOCAL_BASIC_ENDPOINT_HPP	.\include\asio\local\basic_endpoint.hpp	13;"	d
ASIO_LOCAL_CONNECT_PAIR_HPP	.\include\asio\local\connect_pair.hpp	12;"	d
ASIO_LOCAL_DATAGRAM_PROTOCOL_HPP	.\include\asio\local\datagram_protocol.hpp	12;"	d
ASIO_LOCAL_DETAIL_ENDPOINT_HPP	.\include\asio\local\detail\endpoint.hpp	13;"	d
ASIO_LOCAL_STREAM_PROTOCOL_HPP	.\include\asio\local\stream_protocol.hpp	12;"	d
ASIO_MOVE_ACCEPT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	231;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	121;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	135;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	137;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	141;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	143;"	d
ASIO_MOVE_ARG	.\include\asio\detail\config.hpp	146;"	d
ASIO_MOVE_ARG2	.\include\asio\detail\config.hpp	122;"	d
ASIO_MOVE_CAST	.\include\asio\bind_executor.hpp	/^      target_(ASIO_MOVE_CAST(U)(u))$/;"	f	class:asio::detail::executor_binder_base
ASIO_MOVE_CAST	.\include\asio\detail\config.hpp	123;"	d
ASIO_MOVE_CAST	.\include\asio\detail\config.hpp	148;"	d
ASIO_MOVE_CAST	.\include\asio\impl\spawn.hpp	/^        function_(ASIO_MOVE_CAST(Func)(function))$/;"	f	struct:asio::detail::spawn_data
ASIO_MOVE_CAST	.\include\asio\ip\address_v4_iterator.hpp	/^    : address_(ASIO_MOVE_CAST(address_v4)(other.address_))$/;"	f	class:asio::ip::basic_address_iterator
ASIO_MOVE_CAST	.\include\asio\ip\address_v4_range.hpp	/^      end_(ASIO_MOVE_CAST(iterator)(other.end_))$/;"	f	class:asio::ip::basic_address_range
ASIO_MOVE_CAST	.\include\asio\ip\address_v6_iterator.hpp	/^    : address_(ASIO_MOVE_CAST(address_v6)(other.address_))$/;"	f	class:asio::ip::basic_address_iterator
ASIO_MOVE_CAST	.\include\asio\ip\address_v6_range.hpp	/^      end_(ASIO_MOVE_CAST(iterator)(other.end_))$/;"	f	class:asio::ip::basic_address_range
ASIO_MOVE_CAST	.\include\asio\strand.hpp	/^      impl_(ASIO_MOVE_CAST(implementation_type)(other.impl_))$/;"	f	class:asio::strand
ASIO_MOVE_CAST2	.\include\asio\detail\config.hpp	124;"	d
ASIO_MOVE_CAST2	.\include\asio\detail\config.hpp	149;"	d
ASIO_MSVC	.\include\asio\detail\config.hpp	67;"	d
ASIO_MSVC	.\include\asio\detail\config.hpp	70;"	d
ASIO_MUTABLE_BUFFER	.\include\asio\buffer.hpp	883;"	d
ASIO_NATIVE_ERROR	.\include\asio\error.hpp	32;"	d
ASIO_NATIVE_ERROR	.\include\asio\error.hpp	346;"	d
ASIO_NATIVE_ERROR	.\include\asio\error.hpp	42;"	d
ASIO_NATIVE_ERROR	.\include\asio\error.hpp	48;"	d
ASIO_NATIVE_ERROR	.\include\asio\error.hpp	54;"	d
ASIO_NETDB_ERROR	.\include\asio\error.hpp	348;"	d
ASIO_NETDB_ERROR	.\include\asio\error.hpp	36;"	d
ASIO_NETDB_ERROR	.\include\asio\error.hpp	44;"	d
ASIO_NETDB_ERROR	.\include\asio\error.hpp	50;"	d
ASIO_NETDB_ERROR	.\include\asio\error.hpp	56;"	d
ASIO_NOEXCEPT	.\include\asio\detail\config.hpp	233;"	d
ASIO_NOEXCEPT	.\include\asio\detail\config.hpp	237;"	d
ASIO_NOEXCEPT	.\include\asio\detail\config.hpp	243;"	d
ASIO_NOEXCEPT	.\include\asio\detail\config.hpp	249;"	d
ASIO_NOEXCEPT	.\include\asio\detail\config.hpp	255;"	d
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual bool equals(const impl_base* e) const ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual const void* target() const ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual execution_context& context() ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual impl_base* clone() const ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual type_id_result_type target_type() const ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual void destroy() ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual void on_work_finished() ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual void on_work_started() ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^    virtual void* target() ASIO_NOEXCEPT = 0;$/;"	m	class:asio::executor::impl_base
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^  ASIO_DECL bad_executor() ASIO_NOEXCEPT;$/;"	m	class:asio::bad_executor
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^  Executor* target() ASIO_NOEXCEPT;$/;"	m	class:asio::executor
ASIO_NOEXCEPT	.\include\asio\executor.hpp	/^  const Executor* target() const ASIO_NOEXCEPT;$/;"	m	class:asio::executor
ASIO_NOEXCEPT	.\include\asio\io_context.hpp	/^  bool running_in_this_thread() const ASIO_NOEXCEPT;$/;"	m	class:asio::io_context::executor_type
ASIO_NOEXCEPT	.\include\asio\io_context.hpp	/^  executor_type get_executor() ASIO_NOEXCEPT;$/;"	m	class:asio::io_context
ASIO_NOEXCEPT	.\include\asio\io_context.hpp	/^  io_context& context() const ASIO_NOEXCEPT;$/;"	m	class:asio::io_context::executor_type
ASIO_NOEXCEPT	.\include\asio\io_context.hpp	/^  void on_work_finished() const ASIO_NOEXCEPT;$/;"	m	class:asio::io_context::executor_type
ASIO_NOEXCEPT	.\include\asio\io_context.hpp	/^  void on_work_started() const ASIO_NOEXCEPT;$/;"	m	class:asio::io_context::executor_type
ASIO_NOEXCEPT	.\include\asio\ip\network_v4.hpp	/^  ASIO_DECL address_v4 netmask() const ASIO_NOEXCEPT;$/;"	m	class:asio::ip::network_v4
ASIO_NOEXCEPT	.\include\asio\ip\network_v4.hpp	/^  ASIO_DECL address_v4_range hosts() const ASIO_NOEXCEPT;$/;"	m	class:asio::ip::network_v4
ASIO_NOEXCEPT	.\include\asio\ip\network_v6.hpp	/^  ASIO_DECL address_v6 network() const ASIO_NOEXCEPT;$/;"	m	class:asio::ip::network_v6
ASIO_NOEXCEPT	.\include\asio\ip\network_v6.hpp	/^  ASIO_DECL address_v6_range hosts() const ASIO_NOEXCEPT;$/;"	m	class:asio::ip::network_v6
ASIO_NOEXCEPT	.\include\asio\system_context.hpp	/^  ASIO_DECL bool stopped() const ASIO_NOEXCEPT;$/;"	m	class:asio::system_context
ASIO_NOEXCEPT	.\include\asio\system_context.hpp	/^  executor_type get_executor() ASIO_NOEXCEPT;$/;"	m	class:asio::system_context
ASIO_NOEXCEPT	.\include\asio\system_executor.hpp	/^  system_context& context() const ASIO_NOEXCEPT;$/;"	m	class:asio::system_executor
ASIO_NOEXCEPT	.\include\asio\thread_pool.hpp	/^  bool running_in_this_thread() const ASIO_NOEXCEPT;$/;"	m	class:asio::thread_pool::executor_type
ASIO_NOEXCEPT	.\include\asio\thread_pool.hpp	/^  executor_type get_executor() ASIO_NOEXCEPT;$/;"	m	class:asio::thread_pool
ASIO_NOEXCEPT	.\include\asio\thread_pool.hpp	/^  thread_pool& context() const ASIO_NOEXCEPT;$/;"	m	class:asio::thread_pool::executor_type
ASIO_NOEXCEPT	.\include\asio\thread_pool.hpp	/^  void on_work_finished() const ASIO_NOEXCEPT;$/;"	m	class:asio::thread_pool::executor_type
ASIO_NOEXCEPT	.\include\asio\thread_pool.hpp	/^  void on_work_started() const ASIO_NOEXCEPT;$/;"	m	class:asio::thread_pool::executor_type
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\detail\config.hpp	234;"	d
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\detail\config.hpp	238;"	d
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\detail\config.hpp	244;"	d
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\detail\config.hpp	250;"	d
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\detail\config.hpp	258;"	d
ASIO_NOEXCEPT_OR_NOTHROW	.\include\asio\executor.hpp	/^    ASIO_NOEXCEPT_OR_NOTHROW;$/;"	m	class:asio::bad_executor
ASIO_NO_EXCEPTIONS	.\include\asio\detail\config.hpp	1182;"	d
ASIO_NO_IOSTREAM	.\include\asio\detail\config.hpp	1175;"	d
ASIO_NO_TYPEID	.\include\asio\detail\config.hpp	1189;"	d
ASIO_NULL_STATIC_MUTEX_INIT	.\include\asio\detail\null_static_mutex.hpp	51;"	d
ASIO_OBJC_WORKAROUND	.\include\asio\detail\pop_options.hpp	39;"	d
ASIO_OBJC_WORKAROUND	.\include\asio\detail\pop_options.hpp	61;"	d
ASIO_OBJC_WORKAROUND	.\include\asio\detail\push_options.hpp	40;"	d
ASIO_OBJC_WORKAROUND	.\include\asio\detail\push_options.hpp	64;"	d
ASIO_OPTION_STORAGE	.\include\asio\serial_port_base.hpp	157;"	d
ASIO_OPTION_STORAGE	.\include\asio\serial_port_base.hpp	32;"	d
ASIO_OPTION_STORAGE	.\include\asio\serial_port_base.hpp	34;"	d
ASIO_OPTION_STORAGE	.\include\asio\serial_port_base.hpp	36;"	d
ASIO_OS_DEF	.\include\asio\detail\socket_types.hpp	124;"	d
ASIO_OS_DEF_AF_INET	.\include\asio\detail\socket_types.hpp	126;"	d
ASIO_OS_DEF_AF_INET6	.\include\asio\detail\socket_types.hpp	127;"	d
ASIO_OS_DEF_AF_UNSPEC	.\include\asio\detail\socket_types.hpp	125;"	d
ASIO_OS_DEF_AI_ADDRCONFIG	.\include\asio\detail\socket_types.hpp	180;"	d
ASIO_OS_DEF_AI_ALL	.\include\asio\detail\socket_types.hpp	179;"	d
ASIO_OS_DEF_AI_CANONNAME	.\include\asio\detail\socket_types.hpp	174;"	d
ASIO_OS_DEF_AI_NUMERICHOST	.\include\asio\detail\socket_types.hpp	176;"	d
ASIO_OS_DEF_AI_NUMERICSERV	.\include\asio\detail\socket_types.hpp	177;"	d
ASIO_OS_DEF_AI_PASSIVE	.\include\asio\detail\socket_types.hpp	175;"	d
ASIO_OS_DEF_AI_V4MAPPED	.\include\asio\detail\socket_types.hpp	178;"	d
ASIO_OS_DEF_FIONBIO	.\include\asio\detail\socket_types.hpp	138;"	d
ASIO_OS_DEF_FIONREAD	.\include\asio\detail\socket_types.hpp	139;"	d
ASIO_OS_DEF_INADDR_ANY	.\include\asio\detail\socket_types.hpp	140;"	d
ASIO_OS_DEF_IPPROTO_ICMP	.\include\asio\detail\socket_types.hpp	136;"	d
ASIO_OS_DEF_IPPROTO_ICMPV6	.\include\asio\detail\socket_types.hpp	137;"	d
ASIO_OS_DEF_IPPROTO_IP	.\include\asio\detail\socket_types.hpp	132;"	d
ASIO_OS_DEF_IPPROTO_IPV6	.\include\asio\detail\socket_types.hpp	133;"	d
ASIO_OS_DEF_IPPROTO_TCP	.\include\asio\detail\socket_types.hpp	134;"	d
ASIO_OS_DEF_IPPROTO_UDP	.\include\asio\detail\socket_types.hpp	135;"	d
ASIO_OS_DEF_IPV6_JOIN_GROUP	.\include\asio\detail\socket_types.hpp	172;"	d
ASIO_OS_DEF_IPV6_LEAVE_GROUP	.\include\asio\detail\socket_types.hpp	173;"	d
ASIO_OS_DEF_IPV6_MULTICAST_HOPS	.\include\asio\detail\socket_types.hpp	170;"	d
ASIO_OS_DEF_IPV6_MULTICAST_IF	.\include\asio\detail\socket_types.hpp	169;"	d
ASIO_OS_DEF_IPV6_MULTICAST_LOOP	.\include\asio\detail\socket_types.hpp	171;"	d
ASIO_OS_DEF_IPV6_UNICAST_HOPS	.\include\asio\detail\socket_types.hpp	168;"	d
ASIO_OS_DEF_IP_ADD_MEMBERSHIP	.\include\asio\detail\socket_types.hpp	165;"	d
ASIO_OS_DEF_IP_DROP_MEMBERSHIP	.\include\asio\detail\socket_types.hpp	166;"	d
ASIO_OS_DEF_IP_MULTICAST_IF	.\include\asio\detail\socket_types.hpp	162;"	d
ASIO_OS_DEF_IP_MULTICAST_LOOP	.\include\asio\detail\socket_types.hpp	164;"	d
ASIO_OS_DEF_IP_MULTICAST_TTL	.\include\asio\detail\socket_types.hpp	163;"	d
ASIO_OS_DEF_IP_TTL	.\include\asio\detail\socket_types.hpp	167;"	d
ASIO_OS_DEF_MSG_DONTROUTE	.\include\asio\detail\socket_types.hpp	143;"	d
ASIO_OS_DEF_MSG_EOR	.\include\asio\detail\socket_types.hpp	144;"	d
ASIO_OS_DEF_MSG_OOB	.\include\asio\detail\socket_types.hpp	141;"	d
ASIO_OS_DEF_MSG_PEEK	.\include\asio\detail\socket_types.hpp	142;"	d
ASIO_OS_DEF_SHUT_RD	.\include\asio\detail\socket_types.hpp	145;"	d
ASIO_OS_DEF_SHUT_RDWR	.\include\asio\detail\socket_types.hpp	147;"	d
ASIO_OS_DEF_SHUT_WR	.\include\asio\detail\socket_types.hpp	146;"	d
ASIO_OS_DEF_SOCK_DGRAM	.\include\asio\detail\socket_types.hpp	129;"	d
ASIO_OS_DEF_SOCK_RAW	.\include\asio\detail\socket_types.hpp	130;"	d
ASIO_OS_DEF_SOCK_SEQPACKET	.\include\asio\detail\socket_types.hpp	131;"	d
ASIO_OS_DEF_SOCK_STREAM	.\include\asio\detail\socket_types.hpp	128;"	d
ASIO_OS_DEF_SOL_SOCKET	.\include\asio\detail\socket_types.hpp	149;"	d
ASIO_OS_DEF_SOMAXCONN	.\include\asio\detail\socket_types.hpp	148;"	d
ASIO_OS_DEF_SO_BROADCAST	.\include\asio\detail\socket_types.hpp	150;"	d
ASIO_OS_DEF_SO_DEBUG	.\include\asio\detail\socket_types.hpp	151;"	d
ASIO_OS_DEF_SO_DONTROUTE	.\include\asio\detail\socket_types.hpp	152;"	d
ASIO_OS_DEF_SO_KEEPALIVE	.\include\asio\detail\socket_types.hpp	153;"	d
ASIO_OS_DEF_SO_LINGER	.\include\asio\detail\socket_types.hpp	154;"	d
ASIO_OS_DEF_SO_OOBINLINE	.\include\asio\detail\socket_types.hpp	155;"	d
ASIO_OS_DEF_SO_RCVBUF	.\include\asio\detail\socket_types.hpp	157;"	d
ASIO_OS_DEF_SO_RCVLOWAT	.\include\asio\detail\socket_types.hpp	159;"	d
ASIO_OS_DEF_SO_REUSEADDR	.\include\asio\detail\socket_types.hpp	160;"	d
ASIO_OS_DEF_SO_SNDBUF	.\include\asio\detail\socket_types.hpp	156;"	d
ASIO_OS_DEF_SO_SNDLOWAT	.\include\asio\detail\socket_types.hpp	158;"	d
ASIO_OS_DEF_TCP_NODELAY	.\include\asio\detail\socket_types.hpp	161;"	d
ASIO_PACKAGED_TASK_HPP	.\include\asio\packaged_task.hpp	12;"	d
ASIO_PLACEHOLDERS_HPP	.\include\asio\placeholders.hpp	12;"	d
ASIO_POSIX_BASIC_DESCRIPTOR_HPP	.\include\asio\posix\basic_descriptor.hpp	12;"	d
ASIO_POSIX_BASIC_STREAM_DESCRIPTOR_HPP	.\include\asio\posix\basic_stream_descriptor.hpp	12;"	d
ASIO_POSIX_DESCRIPTOR_BASE_HPP	.\include\asio\posix\descriptor_base.hpp	12;"	d
ASIO_POSIX_DESCRIPTOR_HPP	.\include\asio\posix\descriptor.hpp	12;"	d
ASIO_POSIX_STATIC_MUTEX_INIT	.\include\asio\detail\posix_static_mutex.hpp	55;"	d
ASIO_POSIX_STREAM_DESCRIPTOR_HPP	.\include\asio\posix\stream_descriptor.hpp	12;"	d
ASIO_POSIX_STREAM_DESCRIPTOR_SERVICE_HPP	.\include\asio\posix\stream_descriptor_service.hpp	12;"	d
ASIO_POST_HPP	.\include\asio\post.hpp	12;"	d
ASIO_PREVENT_MACRO_SUBSTITUTION	.\include\asio\detail\config.hpp	1227;"	d
ASIO_PREVENT_MACRO_SUBSTITUTION	.\include\asio\detail\socket_option.hpp	/^  int timeout ASIO_PREVENT_MACRO_SUBSTITUTION() const$/;"	f	class:asio::detail::socket_option::linger
ASIO_PREVENT_MACRO_SUBSTITUTION	.\include\asio\detail\socket_option.hpp	/^  void timeout ASIO_PREVENT_MACRO_SUBSTITUTION(int value)$/;"	f	class:asio::detail::socket_option::linger
ASIO_PRIVATE_ASYNC_RESULT_DEF	.\include\asio\impl\use_future.hpp	840;"	d
ASIO_PRIVATE_ASYNC_RESULT_DEF	.\include\asio\impl\use_future.hpp	878;"	d
ASIO_PRIVATE_BIND_EXECUTOR_CALL_DEF	.\include\asio\bind_executor.hpp	436;"	d
ASIO_PRIVATE_BIND_EXECUTOR_CALL_DEF	.\include\asio\bind_executor.hpp	452;"	d
ASIO_PRIVATE_CALL_OP_DEF	.\include\asio\impl\use_future.hpp	705;"	d
ASIO_PRIVATE_CALL_OP_DEF	.\include\asio\impl\use_future.hpp	714;"	d
ASIO_PRIVATE_CONNECT_DEF	.\include\asio\basic_socket_iostream.hpp	425;"	d
ASIO_PRIVATE_CONNECT_DEF	.\include\asio\basic_socket_iostream.hpp	70;"	d
ASIO_PRIVATE_CONNECT_DEF	.\include\asio\basic_socket_streambuf.hpp	65;"	d
ASIO_PRIVATE_CONNECT_DEF	.\include\asio\basic_socket_streambuf.hpp	702;"	d
ASIO_PRIVATE_CTR_DEF	.\include\asio\basic_socket_iostream.hpp	424;"	d
ASIO_PRIVATE_CTR_DEF	.\include\asio\basic_socket_iostream.hpp	47;"	d
ASIO_PRIVATE_DETACHED_DEF	.\include\asio\experimental\impl\detached.hpp	51;"	d
ASIO_PRIVATE_DETACHED_DEF	.\include\asio\experimental\impl\detached.hpp	58;"	d
ASIO_PRIVATE_MAKE_SERVICE_DEF	.\include\asio\execution_context.hpp	254;"	d
ASIO_PRIVATE_MAKE_SERVICE_DEF	.\include\asio\execution_context.hpp	260;"	d
ASIO_PRIVATE_MAKE_SERVICE_DEF	.\include\asio\impl\execution_context.hpp	61;"	d
ASIO_PRIVATE_MAKE_SERVICE_DEF	.\include\asio\impl\execution_context.hpp	75;"	d
ASIO_PRIVATE_PROMISE_SELECTOR_DEF	.\include\asio\impl\use_future.hpp	562;"	d
ASIO_PRIVATE_PROMISE_SELECTOR_DEF	.\include\asio\impl\use_future.hpp	582;"	d
ASIO_PRIVATE_REDIRECT_ERROR_DEF	.\include\asio\experimental\impl\redirect_error.hpp	110;"	d
ASIO_PRIVATE_REDIRECT_ERROR_DEF	.\include\asio\experimental\impl\redirect_error.hpp	193;"	d
ASIO_PRIVATE_REDIRECT_ERROR_DEF	.\include\asio\experimental\impl\redirect_error.hpp	209;"	d
ASIO_PRIVATE_REDIRECT_ERROR_DEF	.\include\asio\experimental\impl\redirect_error.hpp	90;"	d
ASIO_RANGE_CONNECT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	283;"	d
ASIO_RAW_SOCKET_SERVICE_HPP	.\include\asio\raw_socket_service.hpp	12;"	d
ASIO_READ_AT_HPP	.\include\asio\read_at.hpp	12;"	d
ASIO_READ_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	152;"	d
ASIO_READ_HPP	.\include\asio\read.hpp	12;"	d
ASIO_READ_UNTIL_HPP	.\include\asio\read_until.hpp	12;"	d
ASIO_REBIND_ALLOC	.\include\asio\detail\memory.hpp	57;"	d
ASIO_RESOLVE_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	337;"	d
ASIO_SEQ_PACKET_SOCKET_SERVICE_HPP	.\include\asio\seq_packet_socket_service.hpp	12;"	d
ASIO_SERIAL_PORT_BASE_HPP	.\include\asio\serial_port_base.hpp	13;"	d
ASIO_SERIAL_PORT_HPP	.\include\asio\serial_port.hpp	13;"	d
ASIO_SERIAL_PORT_SERVICE_HPP	.\include\asio\serial_port_service.hpp	12;"	d
ASIO_SHUTDOWN_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	468;"	d
ASIO_SIGNAL_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	389;"	d
ASIO_SIGNAL_SET_HPP	.\include\asio\signal_set.hpp	12;"	d
ASIO_SIGNAL_SET_SERVICE_HPP	.\include\asio\signal_set_service.hpp	12;"	d
ASIO_SOCKET_ACCEPTOR_SERVICE_HPP	.\include\asio\socket_acceptor_service.hpp	12;"	d
ASIO_SOCKET_BASE_HPP	.\include\asio\socket_base.hpp	12;"	d
ASIO_SOCKET_ERROR	.\include\asio\error.hpp	347;"	d
ASIO_SOCKET_ERROR	.\include\asio\error.hpp	34;"	d
ASIO_SOCKET_ERROR	.\include\asio\error.hpp	43;"	d
ASIO_SOCKET_ERROR	.\include\asio\error.hpp	49;"	d
ASIO_SOCKET_ERROR	.\include\asio\error.hpp	55;"	d
ASIO_SOURCE	.\include\asio\impl\src.hpp	14;"	d
ASIO_SOURCE	.\include\asio\ssl\impl\src.hpp	14;"	d
ASIO_SPAWN_HPP	.\include\asio\spawn.hpp	12;"	d
ASIO_SSL_CONTEXT_BASE_HPP	.\include\asio\ssl\context_base.hpp	12;"	d
ASIO_SSL_CONTEXT_HPP	.\include\asio\ssl\context.hpp	12;"	d
ASIO_SSL_DETAIL_BUFFERED_HANDSHAKE_OP_HPP	.\include\asio\ssl\detail\buffered_handshake_op.hpp	12;"	d
ASIO_SSL_DETAIL_ENGINE_HPP	.\include\asio\ssl\detail\engine.hpp	12;"	d
ASIO_SSL_DETAIL_HANDSHAKE_OP_HPP	.\include\asio\ssl\detail\handshake_op.hpp	12;"	d
ASIO_SSL_DETAIL_IO_HPP	.\include\asio\ssl\detail\io.hpp	12;"	d
ASIO_SSL_DETAIL_OPENSSL_INIT_HPP	.\include\asio\ssl\detail\openssl_init.hpp	12;"	d
ASIO_SSL_DETAIL_OPENSSL_TYPES_HPP	.\include\asio\ssl\detail\openssl_types.hpp	12;"	d
ASIO_SSL_DETAIL_PASSWORD_CALLBACK_HPP	.\include\asio\ssl\detail\password_callback.hpp	12;"	d
ASIO_SSL_DETAIL_READ_OP_HPP	.\include\asio\ssl\detail\read_op.hpp	12;"	d
ASIO_SSL_DETAIL_SHUTDOWN_OP_HPP	.\include\asio\ssl\detail\shutdown_op.hpp	12;"	d
ASIO_SSL_DETAIL_STREAM_CORE_HPP	.\include\asio\ssl\detail\stream_core.hpp	12;"	d
ASIO_SSL_DETAIL_VERIFY_CALLBACK_HPP	.\include\asio\ssl\detail\verify_callback.hpp	12;"	d
ASIO_SSL_DETAIL_WRITE_OP_HPP	.\include\asio\ssl\detail\write_op.hpp	12;"	d
ASIO_SSL_ERROR_HPP	.\include\asio\ssl\error.hpp	12;"	d
ASIO_SSL_HPP	.\include\asio\ssl.hpp	12;"	d
ASIO_SSL_IMPL_CONTEXT_HPP	.\include\asio\ssl\impl\context.hpp	13;"	d
ASIO_SSL_IMPL_SRC_HPP	.\include\asio\ssl\impl\src.hpp	12;"	d
ASIO_SSL_RFC2818_VERIFICATION_HPP	.\include\asio\ssl\rfc2818_verification.hpp	12;"	d
ASIO_SSL_STREAM_BASE_HPP	.\include\asio\ssl\stream_base.hpp	12;"	d
ASIO_SSL_STREAM_HPP	.\include\asio\ssl\stream.hpp	12;"	d
ASIO_SSL_VERIFY_CONTEXT_HPP	.\include\asio\ssl\verify_context.hpp	12;"	d
ASIO_SSL_VERIFY_MODE_HPP	.\include\asio\ssl\verify_mode.hpp	12;"	d
ASIO_STATIC_CONSTANT	.\include\asio\detail\config.hpp	1232;"	d
ASIO_STATIC_CONSTANT	.\include\asio\detail\config.hpp	1235;"	d
ASIO_STATIC_MUTEX_INIT	.\include\asio\detail\static_mutex.hpp	37;"	d
ASIO_STD_STATIC_MUTEX_INIT	.\include\asio\detail\std_static_mutex.hpp	72;"	d
ASIO_STEADY_TIMER_HPP	.\include\asio\steady_timer.hpp	12;"	d
ASIO_STRAND_HPP	.\include\asio\strand.hpp	12;"	d
ASIO_STREAMBUF_HPP	.\include\asio\streambuf.hpp	12;"	d
ASIO_STREAM_SOCKET_SERVICE_HPP	.\include\asio\stream_socket_service.hpp	12;"	d
ASIO_STRING_VIEW_PARAM	.\include\asio\detail\string_view.hpp	42;"	d
ASIO_SVC_ACCESS	.\include\asio\detail\config.hpp	1363;"	d
ASIO_SVC_ACCESS	.\include\asio\detail\config.hpp	1375;"	d
ASIO_SVC_T	.\include\asio\basic_deadline_timer.hpp	34;"	d
ASIO_SVC_T	.\include\asio\basic_deadline_timer.hpp	622;"	d
ASIO_SVC_T	.\include\asio\basic_socket.hpp	1754;"	d
ASIO_SVC_T	.\include\asio\basic_socket.hpp	35;"	d
ASIO_SVC_T	.\include\asio\basic_socket.hpp	38;"	d
ASIO_SVC_T	.\include\asio\basic_socket.hpp	41;"	d
ASIO_SVC_T	.\include\asio\basic_socket_acceptor.hpp	1983;"	d
ASIO_SVC_T	.\include\asio\basic_socket_acceptor.hpp	36;"	d
ASIO_SVC_T	.\include\asio\basic_socket_acceptor.hpp	39;"	d
ASIO_SVC_T	.\include\asio\basic_socket_acceptor.hpp	42;"	d
ASIO_SVC_T	.\include\asio\basic_waitable_timer.hpp	35;"	d
ASIO_SVC_T	.\include\asio\basic_waitable_timer.hpp	702;"	d
ASIO_SVC_T	.\include\asio\detail\config.hpp	1357;"	d
ASIO_SVC_T	.\include\asio\ip\basic_resolver.hpp	1015;"	d
ASIO_SVC_T	.\include\asio\ip\basic_resolver.hpp	41;"	d
ASIO_SVC_T	.\include\asio\ip\basic_resolver.hpp	45;"	d
ASIO_SVC_T	.\include\asio\posix\descriptor.hpp	38;"	d
ASIO_SVC_T	.\include\asio\posix\descriptor.hpp	637;"	d
ASIO_SVC_T	.\include\asio\serial_port.hpp	42;"	d
ASIO_SVC_T	.\include\asio\serial_port.hpp	45;"	d
ASIO_SVC_T	.\include\asio\serial_port.hpp	763;"	d
ASIO_SVC_T	.\include\asio\windows\object_handle.hpp	376;"	d
ASIO_SVC_T	.\include\asio\windows\object_handle.hpp	39;"	d
ASIO_SVC_T	.\include\asio\windows\overlapped_handle.hpp	323;"	d
ASIO_SVC_T	.\include\asio\windows\overlapped_handle.hpp	38;"	d
ASIO_SVC_T1	.\include\asio\basic_socket_streambuf.hpp	698;"	d
ASIO_SVC_T1	.\include\asio\basic_socket_streambuf.hpp	81;"	d
ASIO_SVC_T1	.\include\asio\detail\config.hpp	1362;"	d
ASIO_SVC_TARG	.\include\asio\detail\config.hpp	1356;"	d
ASIO_SVC_TARG	.\include\asio\detail\config.hpp	1368;"	d
ASIO_SVC_TARG1	.\include\asio\detail\config.hpp	1361;"	d
ASIO_SVC_TARG1	.\include\asio\detail\config.hpp	1373;"	d
ASIO_SVC_TPARAM	.\include\asio\detail\config.hpp	1353;"	d
ASIO_SVC_TPARAM	.\include\asio\detail\config.hpp	1365;"	d
ASIO_SVC_TPARAM1	.\include\asio\detail\config.hpp	1358;"	d
ASIO_SVC_TPARAM1	.\include\asio\detail\config.hpp	1370;"	d
ASIO_SVC_TPARAM1_DEF1	.\include\asio\detail\config.hpp	1359;"	d
ASIO_SVC_TPARAM1_DEF1	.\include\asio\detail\config.hpp	1371;"	d
ASIO_SVC_TPARAM1_DEF2	.\include\asio\detail\config.hpp	1360;"	d
ASIO_SVC_TPARAM1_DEF2	.\include\asio\detail\config.hpp	1372;"	d
ASIO_SVC_TPARAM_DEF1	.\include\asio\detail\config.hpp	1354;"	d
ASIO_SVC_TPARAM_DEF1	.\include\asio\detail\config.hpp	1366;"	d
ASIO_SVC_TPARAM_DEF2	.\include\asio\detail\config.hpp	1355;"	d
ASIO_SVC_TPARAM_DEF2	.\include\asio\detail\config.hpp	1367;"	d
ASIO_SYNC_OP_VOID	.\include\asio\detail\config.hpp	1380;"	d
ASIO_SYNC_OP_VOID	.\include\asio\detail\config.hpp	1383;"	d
ASIO_SYNC_OP_VOID_RETURN	.\include\asio\detail\config.hpp	1381;"	d
ASIO_SYNC_OP_VOID_RETURN	.\include\asio\detail\config.hpp	1384;"	d
ASIO_SYSTEM_CONTEXT_HPP	.\include\asio\system_context.hpp	12;"	d
ASIO_SYSTEM_ERROR_HPP	.\include\asio\system_error.hpp	12;"	d
ASIO_SYSTEM_EXECUTOR_HPP	.\include\asio\system_executor.hpp	12;"	d
ASIO_SYSTEM_TIMER_HPP	.\include\asio\system_timer.hpp	12;"	d
ASIO_THREAD_HPP	.\include\asio\thread.hpp	12;"	d
ASIO_THREAD_KEYWORD	.\include\asio\detail\config.hpp	1323;"	d
ASIO_THREAD_KEYWORD	.\include\asio\detail\config.hpp	1334;"	d
ASIO_THREAD_KEYWORD	.\include\asio\detail\config.hpp	1339;"	d
ASIO_THREAD_POOL_HPP	.\include\asio\thread_pool.hpp	12;"	d
ASIO_TIME_TRAITS_HPP	.\include\asio\time_traits.hpp	12;"	d
ASIO_TS_BUFFER_HPP	.\include\asio\ts\buffer.hpp	12;"	d
ASIO_TS_EXECUTOR_HPP	.\include\asio\ts\executor.hpp	12;"	d
ASIO_TS_INTERNET_HPP	.\include\asio\ts\internet.hpp	12;"	d
ASIO_TS_IO_CONTEXT_HPP	.\include\asio\ts\io_context.hpp	12;"	d
ASIO_TS_NETFWD_HPP	.\include\asio\ts\netfwd.hpp	12;"	d
ASIO_TS_NET_HPP	.\include\asio\ts\net.hpp	12;"	d
ASIO_TS_SOCKET_HPP	.\include\asio\ts\socket.hpp	12;"	d
ASIO_TS_TIMER_HPP	.\include\asio\ts\timer.hpp	12;"	d
ASIO_UNUSED_TYPEDEF	.\include\asio\detail\config.hpp	1391;"	d
ASIO_UNUSED_TYPEDEF	.\include\asio\detail\config.hpp	1395;"	d
ASIO_UNUSED_TYPEDEF	.\include\asio\detail\config.hpp	1400;"	d
ASIO_UNUSED_TYPEDEF	.\include\asio\detail\config.hpp	1404;"	d
ASIO_UNUSED_VARIABLE	.\include\asio\detail\config.hpp	1410;"	d
ASIO_UNUSED_VARIABLE	.\include\asio\detail\config.hpp	1414;"	d
ASIO_UNUSED_VARIABLE	.\include\asio\error.hpp	/^  addrinfo_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::error
ASIO_UNUSED_VARIABLE	.\include\asio\error.hpp	/^  misc_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::error
ASIO_UNUSED_VARIABLE	.\include\asio\error.hpp	/^  netdb_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::error
ASIO_UNUSED_VARIABLE	.\include\asio\error.hpp	/^  system_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::error
ASIO_UNUSED_VARIABLE	.\include\asio\ssl\error.hpp	/^  ssl_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::error
ASIO_UNUSED_VARIABLE	.\include\asio\ssl\error.hpp	/^  stream_category ASIO_UNUSED_VARIABLE$/;"	m	namespace:asio::ssl::error
ASIO_USES_ALLOCATOR	.\include\asio\detail\memory.hpp	51;"	d
ASIO_USES_EXECUTOR_HPP	.\include\asio\uses_executor.hpp	12;"	d
ASIO_USE_FUTURE_HPP	.\include\asio\use_future.hpp	12;"	d
ASIO_VARIADIC_BYVAL_ARGS	.\include\asio\detail\variadic_templates.hpp	52;"	d
ASIO_VARIADIC_BYVAL_ARGS_1	.\include\asio\detail\variadic_templates.hpp	55;"	d
ASIO_VARIADIC_BYVAL_ARGS_2	.\include\asio\detail\variadic_templates.hpp	56;"	d
ASIO_VARIADIC_BYVAL_ARGS_3	.\include\asio\detail\variadic_templates.hpp	57;"	d
ASIO_VARIADIC_BYVAL_ARGS_4	.\include\asio\detail\variadic_templates.hpp	58;"	d
ASIO_VARIADIC_BYVAL_ARGS_5	.\include\asio\detail\variadic_templates.hpp	59;"	d
ASIO_VARIADIC_BYVAL_PARAMS	.\include\asio\detail\variadic_templates.hpp	43;"	d
ASIO_VARIADIC_BYVAL_PARAMS_1	.\include\asio\detail\variadic_templates.hpp	46;"	d
ASIO_VARIADIC_BYVAL_PARAMS_2	.\include\asio\detail\variadic_templates.hpp	47;"	d
ASIO_VARIADIC_BYVAL_PARAMS_3	.\include\asio\detail\variadic_templates.hpp	48;"	d
ASIO_VARIADIC_BYVAL_PARAMS_4	.\include\asio\detail\variadic_templates.hpp	49;"	d
ASIO_VARIADIC_BYVAL_PARAMS_5	.\include\asio\detail\variadic_templates.hpp	50;"	d
ASIO_VARIADIC_DECAY	.\include\asio\detail\variadic_templates.hpp	97;"	d
ASIO_VARIADIC_DECAY_1	.\include\asio\detail\variadic_templates.hpp	100;"	d
ASIO_VARIADIC_DECAY_2	.\include\asio\detail\variadic_templates.hpp	102;"	d
ASIO_VARIADIC_DECAY_3	.\include\asio\detail\variadic_templates.hpp	104;"	d
ASIO_VARIADIC_DECAY_4	.\include\asio\detail\variadic_templates.hpp	107;"	d
ASIO_VARIADIC_DECAY_5	.\include\asio\detail\variadic_templates.hpp	110;"	d
ASIO_VARIADIC_GENERATE	.\include\asio\detail\variadic_templates.hpp	115;"	d
ASIO_VARIADIC_MOVE_ARGS	.\include\asio\detail\variadic_templates.hpp	79;"	d
ASIO_VARIADIC_MOVE_ARGS_1	.\include\asio\detail\variadic_templates.hpp	82;"	d
ASIO_VARIADIC_MOVE_ARGS_2	.\include\asio\detail\variadic_templates.hpp	84;"	d
ASIO_VARIADIC_MOVE_ARGS_3	.\include\asio\detail\variadic_templates.hpp	86;"	d
ASIO_VARIADIC_MOVE_ARGS_4	.\include\asio\detail\variadic_templates.hpp	89;"	d
ASIO_VARIADIC_MOVE_ARGS_5	.\include\asio\detail\variadic_templates.hpp	92;"	d
ASIO_VARIADIC_MOVE_PARAMS	.\include\asio\detail\variadic_templates.hpp	61;"	d
ASIO_VARIADIC_MOVE_PARAMS_1	.\include\asio\detail\variadic_templates.hpp	64;"	d
ASIO_VARIADIC_MOVE_PARAMS_2	.\include\asio\detail\variadic_templates.hpp	66;"	d
ASIO_VARIADIC_MOVE_PARAMS_3	.\include\asio\detail\variadic_templates.hpp	68;"	d
ASIO_VARIADIC_MOVE_PARAMS_4	.\include\asio\detail\variadic_templates.hpp	71;"	d
ASIO_VARIADIC_MOVE_PARAMS_5	.\include\asio\detail\variadic_templates.hpp	74;"	d
ASIO_VARIADIC_TARGS	.\include\asio\detail\variadic_templates.hpp	35;"	d
ASIO_VARIADIC_TARGS_1	.\include\asio\detail\variadic_templates.hpp	37;"	d
ASIO_VARIADIC_TARGS_2	.\include\asio\detail\variadic_templates.hpp	38;"	d
ASIO_VARIADIC_TARGS_3	.\include\asio\detail\variadic_templates.hpp	39;"	d
ASIO_VARIADIC_TARGS_4	.\include\asio\detail\variadic_templates.hpp	40;"	d
ASIO_VARIADIC_TARGS_5	.\include\asio\detail\variadic_templates.hpp	41;"	d
ASIO_VARIADIC_TPARAMS	.\include\asio\detail\variadic_templates.hpp	22;"	d
ASIO_VARIADIC_TPARAMS_1	.\include\asio\detail\variadic_templates.hpp	24;"	d
ASIO_VARIADIC_TPARAMS_2	.\include\asio\detail\variadic_templates.hpp	26;"	d
ASIO_VARIADIC_TPARAMS_3	.\include\asio\detail\variadic_templates.hpp	28;"	d
ASIO_VARIADIC_TPARAMS_4	.\include\asio\detail\variadic_templates.hpp	30;"	d
ASIO_VARIADIC_TPARAMS_5	.\include\asio\detail\variadic_templates.hpp	32;"	d
ASIO_VERSION	.\include\asio\version.hpp	21;"	d
ASIO_VERSION_HPP	.\include\asio\version.hpp	12;"	d
ASIO_WAITABLE_TIMER_SERVICE_HPP	.\include\asio\waitable_timer_service.hpp	12;"	d
ASIO_WAIT_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	364;"	d
ASIO_WAIT_TRAITS_HPP	.\include\asio\wait_traits.hpp	12;"	d
ASIO_WINDOWS	.\include\asio\detail\config.hpp	893;"	d
ASIO_WINDOWS	.\include\asio\detail\config.hpp	895;"	d
ASIO_WINDOWS	.\include\asio\detail\config.hpp	897;"	d
ASIO_WINDOWS_APP	.\include\asio\detail\config.hpp	869;"	d
ASIO_WINDOWS_BASIC_HANDLE_HPP	.\include\asio\windows\basic_handle.hpp	12;"	d
ASIO_WINDOWS_BASIC_OBJECT_HANDLE_HPP	.\include\asio\windows\basic_object_handle.hpp	13;"	d
ASIO_WINDOWS_BASIC_RANDOM_ACCESS_HANDLE_HPP	.\include\asio\windows\basic_random_access_handle.hpp	12;"	d
ASIO_WINDOWS_BASIC_STREAM_HANDLE_HPP	.\include\asio\windows\basic_stream_handle.hpp	12;"	d
ASIO_WINDOWS_OBJECT_HANDLE_HPP	.\include\asio\windows\object_handle.hpp	13;"	d
ASIO_WINDOWS_OBJECT_HANDLE_SERVICE_HPP	.\include\asio\windows\object_handle_service.hpp	13;"	d
ASIO_WINDOWS_OVERLAPPED_HANDLE_HPP	.\include\asio\windows\overlapped_handle.hpp	12;"	d
ASIO_WINDOWS_OVERLAPPED_PTR_HPP	.\include\asio\windows\overlapped_ptr.hpp	12;"	d
ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_HPP	.\include\asio\windows\random_access_handle.hpp	12;"	d
ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_SERVICE_HPP	.\include\asio\windows\random_access_handle_service.hpp	12;"	d
ASIO_WINDOWS_RUNTIME	.\include\asio\detail\config.hpp	882;"	d
ASIO_WINDOWS_STREAM_HANDLE_HPP	.\include\asio\windows\stream_handle.hpp	12;"	d
ASIO_WINDOWS_STREAM_HANDLE_SERVICE_HPP	.\include\asio\windows\stream_handle_service.hpp	12;"	d
ASIO_WIN_OR_POSIX	.\include\asio\error.hpp	350;"	d
ASIO_WIN_OR_POSIX	.\include\asio\error.hpp	40;"	d
ASIO_WIN_OR_POSIX	.\include\asio\error.hpp	46;"	d
ASIO_WIN_OR_POSIX	.\include\asio\error.hpp	52;"	d
ASIO_WIN_OR_POSIX	.\include\asio\error.hpp	58;"	d
ASIO_WIN_STATIC_MUTEX_INIT	.\include\asio\detail\win_static_mutex.hpp	58;"	d
ASIO_WIN_STATIC_MUTEX_INIT	.\include\asio\detail\win_static_mutex.hpp	60;"	d
ASIO_WRITE_AT_HPP	.\include\asio\write_at.hpp	12;"	d
ASIO_WRITE_HANDLER_CHECK	.\include\asio\detail\handler_type_requirements.hpp	179;"	d
ASIO_WRITE_HPP	.\include\asio\write.hpp	12;"	d
ASIO_WSPIAPI_H_DEFINED	.\include\asio\detail\socket_types.hpp	30;"	d
ASIO_WSPIAPI_H_DEFINED	.\include\asio\detail\socket_types.hpp	45;"	d
AXIS_DELIMITER	.\include\protocol.hpp	42;"	d
BMI085_ACCEL_RANGE_16G	.\include\bmi08x_defs.h	263;"	d
BMI085_ACCEL_RANGE_2G	.\include\bmi08x_defs.h	260;"	d
BMI085_ACCEL_RANGE_4G	.\include\bmi08x_defs.h	261;"	d
BMI085_ACCEL_RANGE_8G	.\include\bmi08x_defs.h	262;"	d
BMI088_ACCEL_RANGE_12G	.\include\bmi08x_defs.h	270;"	d
BMI088_ACCEL_RANGE_24G	.\include\bmi08x_defs.h	271;"	d
BMI088_ACCEL_RANGE_3G	.\include\bmi08x_defs.h	268;"	d
BMI088_ACCEL_RANGE_6G	.\include\bmi08x_defs.h	269;"	d
BMI088_GYRO_INT3_MAP_MASK	.\include\bmi08x_defs.h	495;"	d
BMI088_GYRO_INT3_MAP_POS	.\include\bmi08x_defs.h	499;"	d
BMI088_GYRO_INT4_MAP_MASK	.\include\bmi08x_defs.h	496;"	d
BMI088_GYRO_INT4_MAP_POS	.\include\bmi08x_defs.h	500;"	d
BMI08X_16_BIT_RESOLUTION	.\include\bmi08x_defs.h	566;"	d
BMI08X_ABS	.\include\bmi08x_defs.h	570;"	d
BMI08X_ACCEL_ANYMOTION_ADR	.\include\bmi08x_defs.h	679;"	d
BMI08X_ACCEL_ANYMOTION_DURATION_MASK	.\include\bmi08x_defs.h	685;"	d
BMI08X_ACCEL_ANYMOTION_DURATION_SHIFT	.\include\bmi08x_defs.h	686;"	d
BMI08X_ACCEL_ANYMOTION_INT	.\include\bmi08x_defs.h	/^BMI08X_ACCEL_ANYMOTION_INT      \/* Accel anymotion interrupt for BMI085 *\/$/;"	e	enum:bmi08x_accel_int_types
BMI08X_ACCEL_ANYMOTION_LEN	.\include\bmi08x_defs.h	680;"	d
BMI08X_ACCEL_ANYMOTION_NOMOTION_SEL_MASK	.\include\bmi08x_defs.h	683;"	d
BMI08X_ACCEL_ANYMOTION_NOMOTION_SEL_SHIFT	.\include\bmi08x_defs.h	684;"	d
BMI08X_ACCEL_ANYMOTION_THRESHOLD_MASK	.\include\bmi08x_defs.h	681;"	d
BMI08X_ACCEL_ANYMOTION_THRESHOLD_SHIFT	.\include\bmi08x_defs.h	682;"	d
BMI08X_ACCEL_ANYMOTION_X_EN_MASK	.\include\bmi08x_defs.h	687;"	d
BMI08X_ACCEL_ANYMOTION_X_EN_SHIFT	.\include\bmi08x_defs.h	688;"	d
BMI08X_ACCEL_ANYMOTION_Y_EN_MASK	.\include\bmi08x_defs.h	689;"	d
BMI08X_ACCEL_ANYMOTION_Y_EN_SHIFT	.\include\bmi08x_defs.h	690;"	d
BMI08X_ACCEL_ANYMOTION_Z_EN_MASK	.\include\bmi08x_defs.h	691;"	d
BMI08X_ACCEL_ANYMOTION_Z_EN_SHIFT	.\include\bmi08x_defs.h	692;"	d
BMI08X_ACCEL_BW_MASK	.\include\bmi08x_defs.h	322;"	d
BMI08X_ACCEL_BW_NORMAL	.\include\bmi08x_defs.h	256;"	d
BMI08X_ACCEL_BW_OSR2	.\include\bmi08x_defs.h	255;"	d
BMI08X_ACCEL_BW_OSR4	.\include\bmi08x_defs.h	254;"	d
BMI08X_ACCEL_BW_POS	.\include\bmi08x_defs.h	326;"	d
BMI08X_ACCEL_CHIP_ID	.\include\bmi08x_defs.h	235;"	d
BMI08X_ACCEL_CHIP_ID	.\include\bmi08x_defs.h	238;"	d
BMI08X_ACCEL_CHIP_ID_REG	.\include\bmi08x_defs.h	138;"	d
BMI08X_ACCEL_CONF_REG	.\include\bmi08x_defs.h	195;"	d
BMI08X_ACCEL_DATA_RDY_INT	.\include\bmi08x_defs.h	/^BMI08X_ACCEL_DATA_RDY_INT,      \/* Accel data ready interrupt *\/$/;"	e	enum:bmi08x_accel_int_types
BMI08X_ACCEL_DATA_READY_INT	.\include\bmi08x_defs.h	251;"	d
BMI08X_ACCEL_DATA_SYNC_ADR	.\include\bmi08x_defs.h	712;"	d
BMI08X_ACCEL_DATA_SYNC_LEN	.\include\bmi08x_defs.h	713;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_1000HZ	.\include\bmi08x_defs.h	719;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_2000HZ	.\include\bmi08x_defs.h	720;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_400HZ	.\include\bmi08x_defs.h	718;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_MASK	.\include\bmi08x_defs.h	714;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_OFF	.\include\bmi08x_defs.h	717;"	d
BMI08X_ACCEL_DATA_SYNC_MODE_SHIFT	.\include\bmi08x_defs.h	715;"	d
BMI08X_ACCEL_ERR_REG	.\include\bmi08x_defs.h	141;"	d
BMI08X_ACCEL_FEATURE_CFG_REG	.\include\bmi08x_defs.h	248;"	d
BMI08X_ACCEL_GP_0_REG	.\include\bmi08x_defs.h	180;"	d
BMI08X_ACCEL_GP_4_REG	.\include\bmi08x_defs.h	189;"	d
BMI08X_ACCEL_I2C_ADDR_PRIMARY	.\include\bmi08x_defs.h	242;"	d
BMI08X_ACCEL_I2C_ADDR_SECONDARY	.\include\bmi08x_defs.h	243;"	d
BMI08X_ACCEL_INIT_CTRL_REG	.\include\bmi08x_defs.h	219;"	d
BMI08X_ACCEL_INT1_DRDY_MASK	.\include\bmi08x_defs.h	349;"	d
BMI08X_ACCEL_INT1_DRDY_POS	.\include\bmi08x_defs.h	353;"	d
BMI08X_ACCEL_INT1_INT2_MAP_DATA_REG	.\include\bmi08x_defs.h	216;"	d
BMI08X_ACCEL_INT1_IO_CONF_REG	.\include\bmi08x_defs.h	201;"	d
BMI08X_ACCEL_INT1_MAP_REG	.\include\bmi08x_defs.h	210;"	d
BMI08X_ACCEL_INT2_DRDY_MASK	.\include\bmi08x_defs.h	350;"	d
BMI08X_ACCEL_INT2_DRDY_POS	.\include\bmi08x_defs.h	354;"	d
BMI08X_ACCEL_INT2_IO_CONF_REG	.\include\bmi08x_defs.h	204;"	d
BMI08X_ACCEL_INT2_MAP_REG	.\include\bmi08x_defs.h	213;"	d
BMI08X_ACCEL_INTA_DISABLE	.\include\bmi08x_defs.h	298;"	d
BMI08X_ACCEL_INTA_ENABLE	.\include\bmi08x_defs.h	299;"	d
BMI08X_ACCEL_INTB_DISABLE	.\include\bmi08x_defs.h	300;"	d
BMI08X_ACCEL_INTB_ENABLE	.\include\bmi08x_defs.h	301;"	d
BMI08X_ACCEL_INTERNAL_STAT_REG	.\include\bmi08x_defs.h	192;"	d
BMI08X_ACCEL_INT_EDGE_MASK	.\include\bmi08x_defs.h	329;"	d
BMI08X_ACCEL_INT_EDGE_POS	.\include\bmi08x_defs.h	336;"	d
BMI08X_ACCEL_INT_IN_MASK	.\include\bmi08x_defs.h	333;"	d
BMI08X_ACCEL_INT_IN_POS	.\include\bmi08x_defs.h	340;"	d
BMI08X_ACCEL_INT_IO_MASK	.\include\bmi08x_defs.h	332;"	d
BMI08X_ACCEL_INT_IO_POS	.\include\bmi08x_defs.h	339;"	d
BMI08X_ACCEL_INT_LATCH_CONF_REG	.\include\bmi08x_defs.h	207;"	d
BMI08X_ACCEL_INT_LVL_MASK	.\include\bmi08x_defs.h	330;"	d
BMI08X_ACCEL_INT_LVL_POS	.\include\bmi08x_defs.h	337;"	d
BMI08X_ACCEL_INT_OD_MASK	.\include\bmi08x_defs.h	331;"	d
BMI08X_ACCEL_INT_OD_POS	.\include\bmi08x_defs.h	338;"	d
BMI08X_ACCEL_INT_STAT_0_REG	.\include\bmi08x_defs.h	174;"	d
BMI08X_ACCEL_INT_STAT_1_REG	.\include\bmi08x_defs.h	177;"	d
BMI08X_ACCEL_MAP_INTA_MASK	.\include\bmi08x_defs.h	343;"	d
BMI08X_ACCEL_MAP_INTA_POS	.\include\bmi08x_defs.h	346;"	d
BMI08X_ACCEL_NEGATIVE_SELF_TEST	.\include\bmi08x_defs.h	287;"	d
BMI08X_ACCEL_ODR_100_HZ	.\include\bmi08x_defs.h	278;"	d
BMI08X_ACCEL_ODR_12_5_HZ	.\include\bmi08x_defs.h	275;"	d
BMI08X_ACCEL_ODR_1600_HZ	.\include\bmi08x_defs.h	282;"	d
BMI08X_ACCEL_ODR_200_HZ	.\include\bmi08x_defs.h	279;"	d
BMI08X_ACCEL_ODR_25_HZ	.\include\bmi08x_defs.h	276;"	d
BMI08X_ACCEL_ODR_400_HZ	.\include\bmi08x_defs.h	280;"	d
BMI08X_ACCEL_ODR_50_HZ	.\include\bmi08x_defs.h	277;"	d
BMI08X_ACCEL_ODR_800_HZ	.\include\bmi08x_defs.h	281;"	d
BMI08X_ACCEL_ODR_MASK	.\include\bmi08x_defs.h	321;"	d
BMI08X_ACCEL_PM_ACTIVE	.\include\bmi08x_defs.h	290;"	d
BMI08X_ACCEL_PM_SUSPEND	.\include\bmi08x_defs.h	291;"	d
BMI08X_ACCEL_POSITIVE_SELF_TEST	.\include\bmi08x_defs.h	286;"	d
BMI08X_ACCEL_POWER_DISABLE	.\include\bmi08x_defs.h	294;"	d
BMI08X_ACCEL_POWER_ENABLE	.\include\bmi08x_defs.h	295;"	d
BMI08X_ACCEL_PWR_CONF_REG	.\include\bmi08x_defs.h	225;"	d
BMI08X_ACCEL_PWR_CTRL_REG	.\include\bmi08x_defs.h	228;"	d
BMI08X_ACCEL_RANGE_MASK	.\include\bmi08x_defs.h	323;"	d
BMI08X_ACCEL_RANGE_REG	.\include\bmi08x_defs.h	198;"	d
BMI08X_ACCEL_RESERVED_5B_REG	.\include\bmi08x_defs.h	246;"	d
BMI08X_ACCEL_RESERVED_5C_REG	.\include\bmi08x_defs.h	247;"	d
BMI08X_ACCEL_SELF_TEST_REG	.\include\bmi08x_defs.h	222;"	d
BMI08X_ACCEL_SENSORTIME_0_REG	.\include\bmi08x_defs.h	165;"	d
BMI08X_ACCEL_SENSORTIME_1_REG	.\include\bmi08x_defs.h	168;"	d
BMI08X_ACCEL_SENSORTIME_2_REG	.\include\bmi08x_defs.h	171;"	d
BMI08X_ACCEL_SOFTRESET_DELAY_MS	.\include\bmi08x_defs.h	304;"	d
BMI08X_ACCEL_SOFTRESET_REG	.\include\bmi08x_defs.h	231;"	d
BMI08X_ACCEL_STATUS_MASK	.\include\bmi08x_defs.h	315;"	d
BMI08X_ACCEL_STATUS_POS	.\include\bmi08x_defs.h	318;"	d
BMI08X_ACCEL_STATUS_REG	.\include\bmi08x_defs.h	144;"	d
BMI08X_ACCEL_SWITCH_OFF_SELF_TEST	.\include\bmi08x_defs.h	285;"	d
BMI08X_ACCEL_SYNC_DATA_RDY_INT	.\include\bmi08x_defs.h	/^BMI08X_ACCEL_SYNC_DATA_RDY_INT, \/* Accel synchronized data ready interrupt *\/$/;"	e	enum:bmi08x_accel_int_types
BMI08X_ACCEL_SYNC_INPUT	.\include\bmi08x_defs.h	/^BMI08X_ACCEL_SYNC_INPUT,        \/* Accel synchronized data ready input*\/$/;"	e	enum:bmi08x_accel_int_types
BMI08X_ACCEL_X_LSB_REG	.\include\bmi08x_defs.h	147;"	d
BMI08X_ACCEL_X_MSB_REG	.\include\bmi08x_defs.h	150;"	d
BMI08X_ACCEL_Y_LSB_REG	.\include\bmi08x_defs.h	153;"	d
BMI08X_ACCEL_Y_MSB_REG	.\include\bmi08x_defs.h	156;"	d
BMI08X_ACCEL_Z_LSB_REG	.\include\bmi08x_defs.h	159;"	d
BMI08X_ACCEL_Z_MSB_REG	.\include\bmi08x_defs.h	162;"	d
BMI08X_ASIC_INITIALIZED	.\include\bmi08x_defs.h	357;"	d
BMI08X_ASIC_INIT_TIME_MS	.\include\bmi08x_defs.h	548;"	d
BMI08X_CMD_ERR_POS	.\include\bmi08x_defs.h	311;"	d
BMI08X_CONFIG_STREAM_SIZE	.\include\bmi08x_defs.h	550;"	d
BMI08X_DEFS_H_	.\include\bmi08x_defs.h	54;"	d
BMI08X_DELAY_BETWEEN_WRITES_MS	.\include\bmi08x_defs.h	543;"	d
BMI08X_DISABLE	.\include\bmi08x_defs.h	538;"	d
BMI08X_ENABLE	.\include\bmi08x_defs.h	539;"	d
BMI08X_ENABLE_BMI085	.\include\bmi08x_defs.h	110;"	d
BMI08X_ENABLE_BMI088	.\include\bmi08x_defs.h	114;"	d
BMI08X_ERR_CODE_MASK	.\include\bmi08x_defs.h	308;"	d
BMI08X_ERR_CODE_POS	.\include\bmi08x_defs.h	312;"	d
BMI08X_E_COM_FAIL	.\include\bmi08x_defs.h	522;"	d
BMI08X_E_CONFIG_STREAM_ERROR	.\include\bmi08x_defs.h	526;"	d
BMI08X_E_DEV_NOT_FOUND	.\include\bmi08x_defs.h	523;"	d
BMI08X_E_FEATURE_NOT_SUPPORTED	.\include\bmi08x_defs.h	529;"	d
BMI08X_E_INVALID_CONFIG	.\include\bmi08x_defs.h	528;"	d
BMI08X_E_INVALID_INPUT	.\include\bmi08x_defs.h	525;"	d
BMI08X_E_NULL_PTR	.\include\bmi08x_defs.h	521;"	d
BMI08X_E_OUT_OF_RANGE	.\include\bmi08x_defs.h	524;"	d
BMI08X_E_RD_WR_LENGTH_INVALID	.\include\bmi08x_defs.h	527;"	d
BMI08X_FATAL_ERR_MASK	.\include\bmi08x_defs.h	307;"	d
BMI08X_FEATURE_BMI085	.\include\bmi08x_defs.h	120;"	d
BMI08X_FEATURE_BMI085	.\include\bmi08x_defs.h	127;"	d
BMI08X_FEATURE_BMI088	.\include\bmi08x_defs.h	122;"	d
BMI08X_FEATURE_BMI088	.\include\bmi08x_defs.h	129;"	d
BMI08X_GET_BITS	.\include\bmi08x_defs.h	583;"	d
BMI08X_GET_BITS_POS_0	.\include\bmi08x_defs.h	590;"	d
BMI08X_GET_DIFF	.\include\bmi08x_defs.h	595;"	d
BMI08X_GET_LSB	.\include\bmi08x_defs.h	598;"	d
BMI08X_GET_MSB	.\include\bmi08x_defs.h	601;"	d
BMI08X_GYRO_BANDWIDTH_REG	.\include\bmi08x_defs.h	391;"	d
BMI08X_GYRO_BW_116_ODR_1000_HZ	.\include\bmi08x_defs.h	428;"	d
BMI08X_GYRO_BW_12_ODR_100_HZ	.\include\bmi08x_defs.h	431;"	d
BMI08X_GYRO_BW_230_ODR_2000_HZ	.\include\bmi08x_defs.h	427;"	d
BMI08X_GYRO_BW_23_ODR_200_HZ	.\include\bmi08x_defs.h	430;"	d
BMI08X_GYRO_BW_32_ODR_100_HZ	.\include\bmi08x_defs.h	433;"	d
BMI08X_GYRO_BW_47_ODR_400_HZ	.\include\bmi08x_defs.h	429;"	d
BMI08X_GYRO_BW_532_ODR_2000_HZ	.\include\bmi08x_defs.h	426;"	d
BMI08X_GYRO_BW_64_ODR_200_HZ	.\include\bmi08x_defs.h	432;"	d
BMI08X_GYRO_BW_MASK	.\include\bmi08x_defs.h	457;"	d
BMI08X_GYRO_CHIP_ID	.\include\bmi08x_defs.h	412;"	d
BMI08X_GYRO_CHIP_ID_REG	.\include\bmi08x_defs.h	364;"	d
BMI08X_GYRO_DATA_EN_MASK	.\include\bmi08x_defs.h	464;"	d
BMI08X_GYRO_DATA_EN_POS	.\include\bmi08x_defs.h	467;"	d
BMI08X_GYRO_DATA_RDY_INT	.\include\bmi08x_defs.h	/^BMI08X_GYRO_DATA_RDY_INT \/* Gyro data ready interrupt *\/$/;"	e	enum:bmi08x_gyro_int_types
BMI08X_GYRO_DRDY_INT_DISABLE_VAL	.\include\bmi08x_defs.h	442;"	d
BMI08X_GYRO_DRDY_INT_ENABLE_VAL	.\include\bmi08x_defs.h	443;"	d
BMI08X_GYRO_I2C_ADDR_PRIMARY	.\include\bmi08x_defs.h	415;"	d
BMI08X_GYRO_I2C_ADDR_SECONDARY	.\include\bmi08x_defs.h	416;"	d
BMI08X_GYRO_INT3_INT4_IO_CONF_REG	.\include\bmi08x_defs.h	403;"	d
BMI08X_GYRO_INT3_INT4_IO_MAP_REG	.\include\bmi08x_defs.h	406;"	d
BMI08X_GYRO_INT3_LVL_MASK	.\include\bmi08x_defs.h	470;"	d
BMI08X_GYRO_INT3_MAP_MASK	.\include\bmi08x_defs.h	487;"	d
BMI08X_GYRO_INT3_MAP_POS	.\include\bmi08x_defs.h	491;"	d
BMI08X_GYRO_INT3_OD_MASK	.\include\bmi08x_defs.h	471;"	d
BMI08X_GYRO_INT3_OD_POS	.\include\bmi08x_defs.h	476;"	d
BMI08X_GYRO_INT4_LVL_MASK	.\include\bmi08x_defs.h	472;"	d
BMI08X_GYRO_INT4_LVL_POS	.\include\bmi08x_defs.h	477;"	d
BMI08X_GYRO_INT4_MAP_MASK	.\include\bmi08x_defs.h	488;"	d
BMI08X_GYRO_INT4_MAP_POS	.\include\bmi08x_defs.h	492;"	d
BMI08X_GYRO_INT4_OD_MASK	.\include\bmi08x_defs.h	473;"	d
BMI08X_GYRO_INT4_OD_POS	.\include\bmi08x_defs.h	478;"	d
BMI08X_GYRO_INT_CTRL_REG	.\include\bmi08x_defs.h	400;"	d
BMI08X_GYRO_INT_EN_MASK	.\include\bmi08x_defs.h	481;"	d
BMI08X_GYRO_INT_EN_POS	.\include\bmi08x_defs.h	484;"	d
BMI08X_GYRO_INT_STAT_1_REG	.\include\bmi08x_defs.h	385;"	d
BMI08X_GYRO_LPM1_REG	.\include\bmi08x_defs.h	394;"	d
BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4	.\include\bmi08x_defs.h	448;"	d
BMI08X_GYRO_MAP_DRDY_TO_INT3	.\include\bmi08x_defs.h	446;"	d
BMI08X_GYRO_MAP_DRDY_TO_INT4	.\include\bmi08x_defs.h	447;"	d
BMI08X_GYRO_ODR_RESET_VAL	.\include\bmi08x_defs.h	434;"	d
BMI08X_GYRO_PM_DEEP_SUSPEND	.\include\bmi08x_defs.h	438;"	d
BMI08X_GYRO_PM_NORMAL	.\include\bmi08x_defs.h	437;"	d
BMI08X_GYRO_PM_SUSPEND	.\include\bmi08x_defs.h	439;"	d
BMI08X_GYRO_POWER_MASK	.\include\bmi08x_defs.h	458;"	d
BMI08X_GYRO_POWER_MODE_CONFIG_DELAY	.\include\bmi08x_defs.h	453;"	d
BMI08X_GYRO_POWER_POS	.\include\bmi08x_defs.h	461;"	d
BMI08X_GYRO_RANGE_1000_DPS	.\include\bmi08x_defs.h	420;"	d
BMI08X_GYRO_RANGE_125_DPS	.\include\bmi08x_defs.h	423;"	d
BMI08X_GYRO_RANGE_2000_DPS	.\include\bmi08x_defs.h	419;"	d
BMI08X_GYRO_RANGE_250_DPS	.\include\bmi08x_defs.h	422;"	d
BMI08X_GYRO_RANGE_500_DPS	.\include\bmi08x_defs.h	421;"	d
BMI08X_GYRO_RANGE_MASK	.\include\bmi08x_defs.h	456;"	d
BMI08X_GYRO_RANGE_REG	.\include\bmi08x_defs.h	388;"	d
BMI08X_GYRO_SELF_TEST_EN_MASK	.\include\bmi08x_defs.h	502;"	d
BMI08X_GYRO_SELF_TEST_FUNCTION_MASK	.\include\bmi08x_defs.h	505;"	d
BMI08X_GYRO_SELF_TEST_FUNCTION_POS	.\include\bmi08x_defs.h	510;"	d
BMI08X_GYRO_SELF_TEST_RDY_MASK	.\include\bmi08x_defs.h	503;"	d
BMI08X_GYRO_SELF_TEST_RDY_POS	.\include\bmi08x_defs.h	508;"	d
BMI08X_GYRO_SELF_TEST_REG	.\include\bmi08x_defs.h	409;"	d
BMI08X_GYRO_SELF_TEST_RESULT_MASK	.\include\bmi08x_defs.h	504;"	d
BMI08X_GYRO_SELF_TEST_RESULT_POS	.\include\bmi08x_defs.h	509;"	d
BMI08X_GYRO_SOFTRESET_DELAY	.\include\bmi08x_defs.h	451;"	d
BMI08X_GYRO_SOFTRESET_REG	.\include\bmi08x_defs.h	397;"	d
BMI08X_GYRO_X_LSB_REG	.\include\bmi08x_defs.h	367;"	d
BMI08X_GYRO_X_MSB_REG	.\include\bmi08x_defs.h	370;"	d
BMI08X_GYRO_Y_LSB_REG	.\include\bmi08x_defs.h	373;"	d
BMI08X_GYRO_Y_MSB_REG	.\include\bmi08x_defs.h	376;"	d
BMI08X_GYRO_Z_LSB_REG	.\include\bmi08x_defs.h	379;"	d
BMI08X_GYRO_Z_MSB_REG	.\include\bmi08x_defs.h	382;"	d
BMI08X_H_	.\include\bmi08x.h	51;"	d
BMI08X_I2C_INTF	.\include\bmi08x_defs.h	/^BMI08X_I2C_INTF,$/;"	e	enum:bmi08x_intf
BMI08X_INT_ACTIVE_HIGH	.\include\bmi08x_defs.h	559;"	d
BMI08X_INT_ACTIVE_LOW	.\include\bmi08x_defs.h	558;"	d
BMI08X_INT_CHANNEL_1	.\include\bmi08x_defs.h	/^BMI08X_INT_CHANNEL_1, \/* interrupt Channel 1 for accel sensor*\/$/;"	e	enum:bmi08x_accel_int_channel
BMI08X_INT_CHANNEL_2	.\include\bmi08x_defs.h	/^BMI08X_INT_CHANNEL_2 \/* interrupt Channel 2 for accel sensor*\/$/;"	e	enum:bmi08x_accel_int_channel
BMI08X_INT_CHANNEL_3	.\include\bmi08x_defs.h	/^BMI08X_INT_CHANNEL_3, \/* interrupt Channel 3 for gyro sensor*\/$/;"	e	enum:bmi08x_gyro_int_channel
BMI08X_INT_CHANNEL_4	.\include\bmi08x_defs.h	/^BMI08X_INT_CHANNEL_4 \/* interrupt Channel 4 for gyro sensor*\/$/;"	e	enum:bmi08x_gyro_int_channel
BMI08X_INT_MODE_OPEN_DRAIN	.\include\bmi08x_defs.h	563;"	d
BMI08X_INT_MODE_PUSH_PULL	.\include\bmi08x_defs.h	562;"	d
BMI08X_OK	.\include\bmi08x_defs.h	518;"	d
BMI08X_POWER_CONFIG_DELAY	.\include\bmi08x_defs.h	545;"	d
BMI08X_SELF_TEST_DATA_READ_MS	.\include\bmi08x_defs.h	547;"	d
BMI08X_SELF_TEST_DELAY_MS	.\include\bmi08x_defs.h	544;"	d
BMI08X_SENSOR_DATA_SYNC_TIME_MS	.\include\bmi08x_defs.h	542;"	d
BMI08X_SENSOR_SETTLE_TIME_MS	.\include\bmi08x_defs.h	546;"	d
BMI08X_SENSOR_TIME_LSB_BYTE	.\include\bmi08x_defs.h	555;"	d
BMI08X_SENSOR_TIME_MSB_BYTE	.\include\bmi08x_defs.h	553;"	d
BMI08X_SENSOR_TIME_XLSB_BYTE	.\include\bmi08x_defs.h	554;"	d
BMI08X_SET_BITS	.\include\bmi08x_defs.h	579;"	d
BMI08X_SET_BITS_POS_0	.\include\bmi08x_defs.h	586;"	d
BMI08X_SET_BIT_VAL_0	.\include\bmi08x_defs.h	592;"	d
BMI08X_SET_HIGH_BYTE	.\include\bmi08x_defs.h	575;"	d
BMI08X_SET_LOW_BYTE	.\include\bmi08x_defs.h	574;"	d
BMI08X_SET_LOW_NIBBLE	.\include\bmi08x_defs.h	576;"	d
BMI08X_SOFT_RESET_CMD	.\include\bmi08x_defs.h	535;"	d
BMI08X_SPI_INTF	.\include\bmi08x_defs.h	/^BMI08X_SPI_INTF$/;"	e	enum:bmi08x_intf
BMI08X_SPI_RD_MASK	.\include\bmi08x_defs.h	514;"	d
BMI08X_SPI_WR_MASK	.\include\bmi08x_defs.h	515;"	d
BMI08X_TEMP_LSB_REG	.\include\bmi08x_defs.h	186;"	d
BMI08X_TEMP_MSB_REG	.\include\bmi08x_defs.h	183;"	d
BMI08X_W_SELF_TEST_FAIL	.\include\bmi08x_defs.h	532;"	d
Byte	.\include\asio\detail\old_win_sdk_compat.hpp	/^    u_char Byte[16];$/;"	m	union:asio::detail::in6_addr_emulation::__anon16
CMD_ACCEL_OUTPUT_DATA_RATE	.\include\protocol.hpp	21;"	d
CMD_ACCEL_POWER_MODE	.\include\protocol.hpp	20;"	d
CMD_ACCEL_RANGE	.\include\protocol.hpp	22;"	d
CMD_BOARD_INFO	.\include\protocol.hpp	14;"	d
CMD_CONNECT	.\include\protocol.hpp	12;"	d
CMD_DISCONNECT	.\include\protocol.hpp	13;"	d
CMD_GYRO_BANDWIDTH	.\include\protocol.hpp	24;"	d
CMD_GYRO_POWER_MODE	.\include\protocol.hpp	23;"	d
CMD_GYRO_RANGE	.\include\protocol.hpp	25;"	d
CMD_G_STATUS	.\include\protocol.hpp	15;"	d
CMD_ID	.\source\main.cpp	7;"	d	file:
CMD_SM_PACK	.\include\protocol.hpp	16;"	d
CMD_STREAM_START	.\include\protocol.hpp	17;"	d
CMD_STREAM_STOP	.\include\protocol.hpp	18;"	d
CONTENT	.\source\main.cpp	8;"	d	file:
DELIMITER	.\include\protocol.hpp	41;"	d
EAI_AGAIN	.\include\asio\detail\old_win_sdk_compat.hpp	112;"	d
EAI_BADFLAGS	.\include\asio\detail\old_win_sdk_compat.hpp	116;"	d
EAI_FAIL	.\include\asio\detail\old_win_sdk_compat.hpp	120;"	d
EAI_FAMILY	.\include\asio\detail\old_win_sdk_compat.hpp	124;"	d
EAI_MEMORY	.\include\asio\detail\old_win_sdk_compat.hpp	128;"	d
EAI_NODATA	.\include\asio\detail\old_win_sdk_compat.hpp	132;"	d
EAI_NONAME	.\include\asio\detail\old_win_sdk_compat.hpp	136;"	d
EAI_SERVICE	.\include\asio\detail\old_win_sdk_compat.hpp	140;"	d
EAI_SOCKTYPE	.\include\asio\detail\old_win_sdk_compat.hpp	144;"	d
EV_OOBAND	.\include\asio\detail\kqueue_reactor.hpp	42;"	d
FALSE	.\include\bmi08x_defs.h	105;"	d
INT16_C	.\include\bmi08x_defs.h	77;"	d
INT32_C	.\include\bmi08x_defs.h	82;"	d
INT64_C	.\include\bmi08x_defs.h	87;"	d
INT8_C	.\include\bmi08x_defs.h	72;"	d
IPPROTO_ICMPV6	.\include\asio\detail\old_win_sdk_compat.hpp	209;"	d
IPPROTO_IPV6	.\include\asio\detail\old_win_sdk_compat.hpp	168;"	d
IPV6_JOIN_GROUP	.\include\asio\detail\old_win_sdk_compat.hpp	188;"	d
IPV6_LEAVE_GROUP	.\include\asio\detail\old_win_sdk_compat.hpp	192;"	d
IPV6_MULTICAST_HOPS	.\include\asio\detail\old_win_sdk_compat.hpp	180;"	d
IPV6_MULTICAST_IF	.\include\asio\detail\old_win_sdk_compat.hpp	176;"	d
IPV6_MULTICAST_LOOP	.\include\asio\detail\old_win_sdk_compat.hpp	184;"	d
IPV6_UNICAST_HOPS	.\include\asio\detail\old_win_sdk_compat.hpp	172;"	d
IPV6_V6ONLY	.\include\asio\detail\old_win_sdk_compat.hpp	204;"	d
MAX_LEN	.\include\global_types.hpp	10;"	d
MSG_BOARD	.\include\protocol.hpp	9;"	d
MSG_COMMAND	.\include\protocol.hpp	5;"	d
MSG_RESPONSE	.\include\protocol.hpp	6;"	d
MSG_SENSOR_1_AXIS	.\include\protocol.hpp	8;"	d
MSG_SENSOR_3_AXIS	.\include\protocol.hpp	7;"	d
NI_DGRAM	.\include\asio\detail\old_win_sdk_compat.hpp	164;"	d
NI_NAMEREQD	.\include\asio\detail\old_win_sdk_compat.hpp	156;"	d
NI_NOFQDN	.\include\asio\detail\old_win_sdk_compat.hpp	148;"	d
NI_NUMERICHOST	.\include\asio\detail\old_win_sdk_compat.hpp	152;"	d
NI_NUMERICSERV	.\include\asio\detail\old_win_sdk_compat.hpp	160;"	d
NOMINMAX	.\include\asio\detail\config.hpp	956;"	d
NULL	.\include\bmi08x_defs.h	94;"	d
NULL	.\include\bmi08x_defs.h	96;"	d
PodType	.\include\asio\buffer.hpp	/^inline ASIO_CONST_BUFFER buffer(const PodType (&data)[N],$/;"	m	namespace:asio
PodType	.\include\asio\buffer.hpp	/^inline ASIO_MUTABLE_BUFFER buffer(PodType (&data)[N],$/;"	m	namespace:asio
Protocol	.\include\asio\detail\pop_options.hpp	37;"	d
Protocol	.\include\asio\detail\pop_options.hpp	59;"	d
Protocol	.\include\asio\detail\push_options.hpp	38;"	d
Protocol	.\include\asio\detail\push_options.hpp	62;"	d
RSP_FAIL	.\include\protocol.hpp	33;"	d
RSP_OK	.\include\protocol.hpp	32;"	d
SENSOR_ACCELEROMETER	.\include\protocol.hpp	36;"	d
SENSOR_GYROSCOPE	.\include\protocol.hpp	38;"	d
SENSOR_MAGNETOMETER	.\include\protocol.hpp	37;"	d
STATUS_ACTIVE	.\include\protocol.hpp	28;"	d
STATUS_READY	.\include\protocol.hpp	29;"	d
TRUE	.\include\bmi08x_defs.h	101;"	d
TYPE	.\source\main.cpp	6;"	d	file:
U	.\include\asio\bind_executor.hpp	/^      target_(executor_arg_t(), executor_, ASIO_MOVE_CAST(U)(u))$/;"	f	class:asio::detail::executor_binder_base
UINT16_C	.\include\bmi08x_defs.h	78;"	d
UINT32_C	.\include\bmi08x_defs.h	83;"	d
UINT64_C	.\include\bmi08x_defs.h	88;"	d
UINT8_C	.\include\bmi08x_defs.h	73;"	d
WIN32	.\include\asio\detail\config.hpp	921;"	d
WIN32	.\include\asio\detail\config.hpp	930;"	d
WIN32_LEAN_AND_MEAN	.\include\asio\detail\config.hpp	947;"	d
Word	.\include\asio\detail\old_win_sdk_compat.hpp	/^    u_short Word[8];$/;"	m	union:asio::detail::in6_addr_emulation::__anon16
_BOARD_IF_H	.\include\board_if.hpp	2;"	d
_GLOBAL_TYPES_HPP	.\include\global_types.hpp	2;"	d
_PROTOCOL_HPP_	.\include\protocol.hpp	2;"	d
_S6_u8	.\include\asio\detail\old_win_sdk_compat.hpp	68;"	d
_S6_un	.\include\asio\detail\old_win_sdk_compat.hpp	67;"	d
_STRM_QUEUE_H_	.\include\strm_queue.hpp	2;"	d
_UDP_CHANNEL_HPP_	.\include\udp_channel.hpp	2;"	d
_UDP_IF_HPP_	.\include\udp_if.hpp	2;"	d
_UDP_PARSER_H_	.\include\udp_parser.hpp	2;"	d
_WIN32_WINNT	.\include\asio\detail\config.hpp	916;"	d
_WSPIAPI_H_	.\include\asio\detail\socket_types.hpp	29;"	d
_WSPIAPI_H_	.\include\asio\detail\socket_types.hpp	44;"	d
__ss_align	.\include\asio\detail\old_win_sdk_compat.hpp	/^  __int64 __ss_align;$/;"	m	struct:asio::detail::sockaddr_storage_emulation
__ss_pad1	.\include\asio\detail\old_win_sdk_compat.hpp	/^  char __ss_pad1[sockaddr_storage_pad1size];$/;"	m	struct:asio::detail::sockaddr_storage_emulation
__ss_pad2	.\include\asio\detail\old_win_sdk_compat.hpp	/^  char __ss_pad2[sockaddr_storage_pad2size];$/;"	m	struct:asio::detail::sockaddr_storage_emulation
accel_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_cfg accel_cfg;$/;"	m	struct:bmi08x_dev	typeref:struct:bmi08x_dev::bmi08x_cfg
accel_chip_id	.\include\bmi08x_defs.h	/^uint8_t accel_chip_id;$/;"	m	struct:bmi08x_dev
accel_id	.\include\bmi08x_defs.h	/^uint8_t accel_id;$/;"	m	struct:bmi08x_dev
accel_int_config_1	.\include\bmi08x_defs.h	/^struct bmi08x_accel_int_channel_cfg accel_int_config_1;$/;"	m	struct:bmi08x_int_cfg	typeref:struct:bmi08x_int_cfg::bmi08x_accel_int_channel_cfg
accel_int_config_2	.\include\bmi08x_defs.h	/^struct bmi08x_accel_int_channel_cfg accel_int_config_2;$/;"	m	struct:bmi08x_int_cfg	typeref:struct:bmi08x_int_cfg::bmi08x_accel_int_channel_cfg
accept	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID accept($/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept($/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept()$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept(asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept(asio::io_context& io_context)$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept(asio::io_context& io_context,$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  typename Protocol::socket accept(endpoint_type& peer_endpoint)$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  void accept(basic_socket<Protocol1, SocketService>& peer,$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:asio::basic_socket_acceptor
accept	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code accept(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
accept	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code accept(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
accept	.\include\asio\detail\reactive_socket_service.hpp	/^  typename Protocol::socket accept(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
accept	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code accept(implementation_type& impl, Socket& peer,$/;"	f	class:asio::detail::win_iocp_socket_service
accept	.\include\asio\detail\win_iocp_socket_service.hpp	/^  typename Protocol::socket accept(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
accept	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID accept(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
accept	.\include\asio\socket_acceptor_service.hpp	/^  typename Protocol::socket accept(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
acceptor	.\include\asio\ip\tcp.hpp	/^  typedef basic_socket_acceptor<tcp> acceptor;$/;"	t	class:asio::ip::tcp
acceptor	.\include\asio\local\stream_protocol.hpp	/^  typedef basic_socket_acceptor<stream_protocol> acceptor;$/;"	t	class:asio::local::stream_protocol
access_denied	.\include\asio\error.hpp	/^  access_denied = ASIO_SOCKET_ERROR(EACCES),$/;"	e	enum:asio::error::basic_errors
acquire	.\include\global_types.hpp	/^	bool acquire()$/;"	f	class:wait_semaphore
adapt_completion_condition_result	.\include\asio\completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(bool result)$/;"	f	namespace:asio::detail
adapt_completion_condition_result	.\include\asio\completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(std::size_t result)$/;"	f	namespace:asio::detail
add	.\include\asio\basic_signal_set.hpp	/^  ASIO_SYNC_OP_VOID add(int signal_number, asio::error_code& ec)$/;"	f	class:asio::basic_signal_set
add	.\include\asio\basic_signal_set.hpp	/^  void add(int signal_number)$/;"	f	class:asio::basic_signal_set
add	.\include\asio\detail\chrono_time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:asio::detail::chrono_time_traits
add	.\include\asio\signal_set_service.hpp	/^  ASIO_SYNC_OP_VOID add(implementation_type& impl,$/;"	f	class:asio::signal_set_service
add	.\include\asio\time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:asio::time_traits
add_ready_events	.\include\asio\detail\epoll_reactor.hpp	/^    void add_ready_events(uint32_t events) { task_result_ |= events; }$/;"	f	class:asio::detail::epoll_reactor::descriptor_state
add_ref	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaiter* add_ref()$/;"	f	class:asio::experimental::detail::awaiter
add_service	.\include\asio\detail\impl\service_registry.hpp	/^void service_registry::add_service(Service* new_service)$/;"	f	class:asio::detail::service_registry
add_service	.\include\asio\impl\execution_context.hpp	/^inline void add_service(execution_context& e, Service* svc)$/;"	f	namespace:asio
add_timer_queue	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^void dev_poll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::dev_poll_reactor
add_timer_queue	.\include\asio\detail\impl\epoll_reactor.hpp	/^void epoll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::epoll_reactor
add_timer_queue	.\include\asio\detail\impl\kqueue_reactor.hpp	/^void kqueue_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::kqueue_reactor
add_timer_queue	.\include\asio\detail\impl\select_reactor.hpp	/^void select_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::select_reactor
add_timer_queue	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^void win_iocp_io_context::add_timer_queue($/;"	f	class:asio::detail::win_iocp_io_context
add_timer_queue	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^void winrt_timer_scheduler::add_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::winrt_timer_scheduler
addr_	.\include\asio\ip\address_v4.hpp	/^  asio::detail::in4_addr_type addr_;$/;"	m	class:asio::ip::address_v4
addr_	.\include\asio\ip\address_v6.hpp	/^  asio::detail::in6_addr_type addr_;$/;"	m	class:asio::ip::address_v6
address	.\include\asio\ip\address.hpp	/^class address$/;"	c	namespace:asio::ip
address	.\include\asio\ip\basic_endpoint.hpp	/^  asio::ip::address address() const$/;"	f	class:asio::ip::basic_endpoint
address	.\include\asio\ip\basic_endpoint.hpp	/^  void address(const asio::ip::address& addr)$/;"	f	class:asio::ip::basic_endpoint
address_	.\include\asio\ip\address_v4_iterator.hpp	/^    : address_(addr)$/;"	f	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\address_v4_iterator.hpp	/^    : address_(other.address_)$/;"	f	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\address_v4_iterator.hpp	/^  address_v4 address_;$/;"	m	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\address_v6_iterator.hpp	/^    : address_(addr)$/;"	f	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\address_v6_iterator.hpp	/^    : address_(other.address_)$/;"	f	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\address_v6_iterator.hpp	/^  address_v6 address_;$/;"	m	class:asio::ip::basic_address_iterator
address_	.\include\asio\ip\network_v4.hpp	/^  address_v4 address_;$/;"	m	class:asio::ip::network_v4
address_	.\include\asio\ip\network_v6.hpp	/^  address_v6 address_;$/;"	m	class:asio::ip::network_v6
address_configured	.\include\asio\ip\resolver_base.hpp	/^  static const flags address_configured = implementation_defined;$/;"	m	class:asio::ip::resolver_base
address_family_not_supported	.\include\asio\error.hpp	/^  address_family_not_supported = ASIO_SOCKET_ERROR(EAFNOSUPPORT),$/;"	e	enum:asio::error::basic_errors
address_in_use	.\include\asio\error.hpp	/^  address_in_use = ASIO_SOCKET_ERROR(EADDRINUSE),$/;"	e	enum:asio::error::basic_errors
address_length	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  DWORD address_length()$/;"	f	class:asio::detail::win_iocp_socket_accept_op
address_length	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  DWORD address_length()$/;"	f	class:asio::detail::win_iocp_socket_move_accept_op
address_v4	.\include\asio\ip\address_v4.hpp	/^  address_v4()$/;"	f	class:asio::ip::address_v4
address_v4	.\include\asio\ip\address_v4.hpp	/^  address_v4(address_v4&& other)$/;"	f	class:asio::ip::address_v4
address_v4	.\include\asio\ip\address_v4.hpp	/^  address_v4(const address_v4& other)$/;"	f	class:asio::ip::address_v4
address_v4	.\include\asio\ip\address_v4.hpp	/^class address_v4$/;"	c	namespace:asio::ip
address_v4	.\include\asio\ip\address_v4_range.hpp	/^      end_(address_v4())$/;"	f	class:asio::ip::basic_address_range
address_v4_iterator	.\include\asio\ip\address_v4_iterator.hpp	/^typedef basic_address_iterator<address_v4> address_v4_iterator;$/;"	t	namespace:asio::ip
address_v4_iterator	.\include\asio\ts\netfwd.hpp	/^typedef basic_address_iterator<address_v4> address_v4_iterator;$/;"	t	namespace:asio::ip
address_v4_range	.\include\asio\ip\address_v4_range.hpp	/^typedef basic_address_range<address_v4> address_v4_range;$/;"	t	namespace:asio::ip
address_v4_range	.\include\asio\ts\netfwd.hpp	/^typedef basic_address_range<address_v4> address_v4_range;$/;"	t	namespace:asio::ip
address_v6	.\include\asio\ip\address_v6.hpp	/^class address_v6$/;"	c	namespace:asio::ip
address_v6	.\include\asio\ip\address_v6_range.hpp	/^      end_(address_v6())$/;"	f	class:asio::ip::basic_address_range
address_v6_iterator	.\include\asio\ip\address_v6_iterator.hpp	/^typedef basic_address_iterator<address_v6> address_v6_iterator;$/;"	t	namespace:asio::ip
address_v6_iterator	.\include\asio\ts\netfwd.hpp	/^typedef basic_address_iterator<address_v6> address_v6_iterator;$/;"	t	namespace:asio::ip
address_v6_range	.\include\asio\ip\address_v6_range.hpp	/^typedef basic_address_range<address_v6> address_v6_range;$/;"	t	namespace:asio::ip
address_v6_range	.\include\asio\ts\netfwd.hpp	/^typedef basic_address_range<address_v6> address_v6_range;$/;"	t	namespace:asio::ip
addrinfo_	.\include\asio\detail\resolve_query_op.hpp	/^  asio::detail::addrinfo_type* addrinfo_;$/;"	m	class:asio::detail::resolve_query_op
addrinfo_emulation	.\include\asio\detail\old_win_sdk_compat.hpp	/^struct addrinfo_emulation$/;"	s	namespace:asio::detail
addrinfo_errors	.\include\asio\error.hpp	/^enum addrinfo_errors$/;"	g	namespace:asio::error
addrinfo_type	.\include\asio\detail\socket_types.hpp	/^struct addrinfo_type { int ai_flags;$/;"	s	namespace:asio::detail
addrlen_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  std::size_t addrlen_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
adopt_lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    enum adopt_lock_t { adopt_lock };$/;"	e	enum:asio::detail::conditionally_enabled_mutex::scoped_lock::adopt_lock_t
adopt_lock	.\include\asio\detail\scoped_lock.hpp	/^  enum adopt_lock_t { adopt_lock };$/;"	e	enum:asio::detail::scoped_lock::adopt_lock_t
adopt_lock_t	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    enum adopt_lock_t { adopt_lock };$/;"	g	class:asio::detail::conditionally_enabled_mutex::scoped_lock
adopt_lock_t	.\include\asio\detail\scoped_lock.hpp	/^  enum adopt_lock_t { adopt_lock };$/;"	g	class:asio::detail::scoped_lock
advance	.\include\asio\buffers_iterator.hpp	/^  void advance(std::ptrdiff_t n)$/;"	f	class:asio::buffers_iterator
ai_	.\include\asio\detail\resolver_service_base.hpp	/^    asio::detail::addrinfo_type* ai_;$/;"	m	class:asio::detail::resolver_service_base::auto_addrinfo
ai_addr	.\include\asio\detail\old_win_sdk_compat.hpp	/^  sockaddr* ai_addr;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_addr	.\include\asio\detail\socket_types.hpp	/^  int ai_addrlen; const void* ai_addr;$/;"	m	struct:asio::detail::addrinfo_type
ai_addrlen	.\include\asio\detail\old_win_sdk_compat.hpp	/^  size_t ai_addrlen;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_addrlen	.\include\asio\detail\socket_types.hpp	/^  int ai_addrlen; const void* ai_addr;$/;"	m	struct:asio::detail::addrinfo_type
ai_canonname	.\include\asio\detail\old_win_sdk_compat.hpp	/^  char* ai_canonname;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_canonname	.\include\asio\detail\socket_types.hpp	/^  const char* ai_canonname; addrinfo_type* ai_next; };$/;"	m	struct:asio::detail::addrinfo_type
ai_family	.\include\asio\detail\old_win_sdk_compat.hpp	/^  int ai_family;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_family	.\include\asio\detail\socket_types.hpp	/^  int ai_family, ai_socktype, ai_protocol;$/;"	m	struct:asio::detail::addrinfo_type
ai_flags	.\include\asio\detail\old_win_sdk_compat.hpp	/^  int ai_flags;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_flags	.\include\asio\detail\socket_types.hpp	/^struct addrinfo_type { int ai_flags;$/;"	m	struct:asio::detail::addrinfo_type
ai_next	.\include\asio\detail\old_win_sdk_compat.hpp	/^  addrinfo_emulation* ai_next;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_next	.\include\asio\detail\socket_types.hpp	/^  const char* ai_canonname; addrinfo_type* ai_next; };$/;"	m	struct:asio::detail::addrinfo_type
ai_protocol	.\include\asio\detail\old_win_sdk_compat.hpp	/^  int ai_protocol;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_protocol	.\include\asio\detail\socket_types.hpp	/^  int ai_family, ai_socktype, ai_protocol;$/;"	m	struct:asio::detail::addrinfo_type
ai_socktype	.\include\asio\detail\old_win_sdk_compat.hpp	/^  int ai_socktype;$/;"	m	struct:asio::detail::addrinfo_emulation
ai_socktype	.\include\asio\detail\socket_types.hpp	/^  int ai_family, ai_socktype, ai_protocol;$/;"	m	struct:asio::detail::addrinfo_type
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  bool all_empty() const$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(Iterator begin, Iterator end)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const Buffers& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const asio::const_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const asio::const_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const asio::mutable_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const asio::mutable_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const boost::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_empty	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static bool all_empty(const std::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
all_matching	.\include\asio\ip\resolver_base.hpp	/^  static const flags all_matching = implementation_defined;$/;"	m	class:asio::ip::resolver_base
alloc	.\include\asio\detail\object_pool.hpp	/^  Object* alloc()$/;"	f	class:asio::detail::object_pool
alloc	.\include\asio\detail\object_pool.hpp	/^  Object* alloc(Arg arg)$/;"	f	class:asio::detail::object_pool
allocate	.\include\asio\detail\handler_alloc_helpers.hpp	/^  T* allocate(std::size_t n)$/;"	f	class:asio::detail::hook_allocator
allocate	.\include\asio\detail\handler_alloc_helpers.hpp	/^inline void* allocate(std::size_t s, Handler& h)$/;"	f	namespace:asio_handler_alloc_helpers
allocate	.\include\asio\detail\recycling_allocator.hpp	/^  T* allocate(std::size_t n)$/;"	f	class:asio::detail::recycling_allocator
allocate	.\include\asio\detail\thread_info_base.hpp	/^  static void* allocate(Purpose, thread_info_base* this_thread,$/;"	f	class:asio::detail::thread_info_base
allocate	.\include\asio\detail\thread_info_base.hpp	/^  static void* allocate(thread_info_base* this_thread, std::size_t size)$/;"	f	class:asio::detail::thread_info_base
allocator_	.\include\asio\detail\executor_op.hpp	/^      allocator_(allocator)$/;"	f	class:asio::detail::executor_op
allocator_	.\include\asio\detail\executor_op.hpp	/^  Alloc allocator_;$/;"	m	class:asio::detail::executor_op
allocator_	.\include\asio\impl\executor.hpp	/^      allocator_(a)$/;"	f	class:asio::executor::impl
allocator_	.\include\asio\impl\executor.hpp	/^    allocator_type allocator_;$/;"	m	struct:asio::executor::impl::raw_mem
allocator_	.\include\asio\impl\executor.hpp	/^  Allocator allocator_;$/;"	m	class:asio::executor::impl
allocator_	.\include\asio\impl\use_future.hpp	/^  Allocator allocator_;$/;"	m	class:asio::detail::packaged_handler
allocator_	.\include\asio\impl\use_future.hpp	/^  Allocator allocator_;$/;"	m	class:asio::detail::packaged_token
allocator_	.\include\asio\impl\use_future.hpp	/^  Allocator allocator_;$/;"	m	class:asio::detail::promise_handler
allocator_	.\include\asio\use_future.hpp	/^    std_allocator_void, Allocator>::type allocator_;$/;"	m	class:asio::use_future_t
allocator_type	.\include\asio\impl\executor.hpp	/^  typedef ASIO_REBIND_ALLOC(Allocator, impl) allocator_type;$/;"	t	class:asio::executor::impl
allocator_type	.\include\asio\impl\use_future.hpp	/^  typedef Allocator allocator_type;$/;"	t	class:asio::detail::packaged_handler
allocator_type	.\include\asio\impl\use_future.hpp	/^  typedef Allocator allocator_type;$/;"	t	class:asio::detail::promise_handler
allocator_type	.\include\asio\use_future.hpp	/^  typedef Allocator allocator_type;$/;"	t	class:asio::use_future_t
already_connected	.\include\asio\error.hpp	/^  already_connected = ASIO_SOCKET_ERROR(EISCONN),$/;"	e	enum:asio::error::basic_errors
already_open	.\include\asio\error.hpp	/^  already_open = 1,$/;"	e	enum:asio::error::misc_errors
already_started	.\include\asio\error.hpp	/^  already_started = ASIO_SOCKET_ERROR(EALREADY),$/;"	e	enum:asio::error::basic_errors
always_fail_option	.\include\asio\detail\socket_types.hpp	/^const int always_fail_option = 2;$/;"	m	namespace:asio::detail
any	.\include\asio\ip\address_v4.hpp	/^  static address_v4 any()$/;"	f	class:asio::ip::address_v4
any	.\include\asio\ip\address_v6.hpp	/^  static address_v6 any()$/;"	f	class:asio::ip::address_v6
arg	.\include\asio\experimental\impl\redirect_error.hpp	/^  operator()(ASIO_MOVE_ARG(Arg) arg, ASIO_MOVE_ARG(Args)... args)$/;"	m	class:asio::experimental::detail::redirect_error_handler
arg1	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1, const Arg2& arg2)$/;"	m	namespace:asio::detail
arg1	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1, const Arg2& arg2,$/;"	m	namespace:asio::detail
arg1	.\include\asio\detail\bind_handler.hpp	/^bind_handler(ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1,$/;"	m	namespace:asio::detail
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::binder1
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::binder2
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::binder3
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::binder4
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::binder5
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::move_binder1
arg1_	.\include\asio\detail\bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:asio::detail::move_binder2
arg2	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1, const Arg2& arg2,$/;"	m	namespace:asio::detail
arg2	.\include\asio\detail\bind_handler.hpp	/^    const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)$/;"	m	namespace:asio::detail
arg2	.\include\asio\detail\bind_handler.hpp	/^    const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)$/;"	m	namespace:asio::detail
arg2_	.\include\asio\detail\bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:asio::detail::binder2
arg2_	.\include\asio\detail\bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:asio::detail::binder3
arg2_	.\include\asio\detail\bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:asio::detail::binder4
arg2_	.\include\asio\detail\bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:asio::detail::binder5
arg2_	.\include\asio\detail\bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:asio::detail::move_binder2
arg3	.\include\asio\detail\bind_handler.hpp	/^    const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)$/;"	m	namespace:asio::detail
arg3	.\include\asio\detail\bind_handler.hpp	/^    const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)$/;"	m	namespace:asio::detail
arg3_	.\include\asio\detail\bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:asio::detail::binder3
arg3_	.\include\asio\detail\bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:asio::detail::binder4
arg3_	.\include\asio\detail\bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:asio::detail::binder5
arg4	.\include\asio\detail\bind_handler.hpp	/^    const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)$/;"	m	namespace:asio::detail
arg4_	.\include\asio\detail\bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:asio::detail::binder4
arg4_	.\include\asio\detail\bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:asio::detail::binder5
arg5_	.\include\asio\detail\bind_handler.hpp	/^  Arg5 arg5_;$/;"	m	class:asio::detail::binder5
argument_type	.\include\asio\bind_executor.hpp	/^  typedef A1 argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_type
argument_type	.\include\asio\bind_executor.hpp	/^  typedef see_below argument_type;$/;"	t	class:asio::executor_binder
argument_type	.\include\asio\bind_executor.hpp	/^  typedef typename T::argument_type argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_type
asio	.\include\asio\associated_allocator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\associated_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\async_result.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_datagram_socket.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_deadline_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_io_object.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_raw_socket.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_seq_packet_socket.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_serial_port.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_signal_set.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_socket.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_socket_acceptor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_socket_iostream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_socket_streambuf.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_stream_socket.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_streambuf.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_streambuf_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\basic_waitable_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\bind_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_read_stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_read_stream_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_stream_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_write_stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffered_write_stream_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\buffers_iterator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\completion_condition.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\connect.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\coroutine.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\datagram_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\deadline_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\deadline_timer_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\defer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\array.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\atomic_count.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\base_from_completion_cond.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\bind_handler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\buffer_resize_guard.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\buffer_sequence_adapter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\buffered_stream_storage.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\call_stack.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\chrono.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\chrono_time_traits.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\completion_handler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\conditionally_enabled_event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\consuming_buffers.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\cstddef.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\cstdint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\deadline_timer_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\dependent_type.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\descriptor_ops.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\descriptor_read_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\descriptor_write_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\dev_poll_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\epoll_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\eventfd_select_interrupter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\executor_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\fd_set_adapter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\functional.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\global.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\handler_alloc_helpers.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\handler_tracking.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\handler_type_requirements.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\handler_work.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\hash_map.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\epoll_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\kqueue_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\select_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\service_registry.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\strand_executor_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\strand_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\io_control.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\is_buffer_sequence.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\is_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\keyword_tss_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\kqueue_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\local_free_on_block_exit.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\macos_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\memory.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\noncopyable.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_global.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_signal_blocker.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_static_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\null_tss_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\object_pool.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\old_win_sdk_compat.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\op_queue.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\operation.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\pipe_select_interrupter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_fd_set_adapter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_global.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_signal_blocker.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_static_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\posix_tss_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_descriptor_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_null_buffers_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_serial_port_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_accept_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_connect_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_recv_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_send_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_socket_service_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactive_wait_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactor_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactor_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\reactor_op_queue.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\recycling_allocator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\resolve_endpoint_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\resolve_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\resolve_query_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\resolver_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\resolver_service_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\scheduler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\scheduler_operation.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\scheduler_thread_info.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\scoped_lock.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\scoped_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\select_interrupter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\select_reactor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\service_registry.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\signal_blocker.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\signal_handler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\signal_init.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\signal_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\signal_set_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\socket_holder.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\socket_ops.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\socket_option.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\socket_select_interrupter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\socket_types.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\solaris_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\static_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_global.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_static_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\std_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\strand_executor_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\strand_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\string_view.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\thread_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\thread_group.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\thread_info_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\throw_error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\throw_exception.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\timer_queue.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\timer_queue_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\timer_queue_ptime.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\timer_queue_set.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\timer_scheduler_fwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\tss_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\type_traits.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\wait_handler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\wait_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_event.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_fd_set_adapter.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_fenced_block.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_global.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_handle_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_io_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_operation.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_thread_info.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_iocp_wait_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_object_handle_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_static_mutex.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\win_tss_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winapp_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\wince_thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_async_manager.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_async_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_resolve_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_resolver_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_socket_connect_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_socket_recv_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_socket_send_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_ssocket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_timer_scheduler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winrt_utils.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\winsock_init.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\work_dispatcher.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\detail\wrapped_handler.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\dispatch.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\error_code.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\execution_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\executor_work_guard.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\co_spawn.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\detached.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\impl\co_spawn.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\impl\detached.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\impl\redirect_error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\experimental\redirect_error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\basic_endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\datagram_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\detail\endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\raw_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\seq_packet_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\generic\stream_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\handler_alloc_hook.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\handler_continuation_hook.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\handler_invoke_hook.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\handler_type.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\high_resolution_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\buffered_read_stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\buffered_write_stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\connect.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\defer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\dispatch.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\execution_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\io_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\post.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\read.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\read_at.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\read_until.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\serial_port_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\spawn.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\system_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\system_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\thread_pool.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\use_future.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\write.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\impl\write_at.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\io_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\io_context_strand.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\io_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v4.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v4_iterator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v4_range.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v6.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v6_iterator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\address_v6_range.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\bad_address_cast.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_resolver.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_resolver_entry.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_resolver_iterator.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_resolver_query.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\basic_resolver_results.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\detail\endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\detail\socket_option.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\host_name.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\icmp.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\address.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\address_v4.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\address_v6.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\basic_endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\network_v4.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\impl\network_v6.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\multicast.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\network_v4.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\network_v6.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\resolver_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\resolver_query_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\resolver_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\tcp.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\udp.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\unicast.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ip\v6_only.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\is_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\is_read_buffered.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\is_write_buffered.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\local\basic_endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\local\connect_pair.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\local\datagram_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\local\detail\endpoint.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\local\stream_protocol.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\packaged_task.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\placeholders.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\basic_descriptor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\basic_stream_descriptor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\descriptor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\descriptor_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\stream_descriptor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\posix\stream_descriptor_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\post.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\raw_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\read.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\read_at.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\read_until.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\seq_packet_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\serial_port.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\serial_port_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\serial_port_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\signal_set.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\signal_set_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\socket_acceptor_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\socket_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\spawn.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\context_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\engine.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\handshake_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\io.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\openssl_init.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\password_callback.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\read_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\shutdown_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\stream_core.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\verify_callback.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\detail\write_op.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\impl\context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\rfc2818_verification.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\stream.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\stream_base.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\verify_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ssl\verify_mode.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\steady_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\strand.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\stream_socket_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\streambuf.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\system_context.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\system_error.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\system_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\system_timer.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\thread.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\thread_pool.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\time_traits.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\ts\netfwd.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\use_future.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\uses_executor.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\wait_traits.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\waitable_timer_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\basic_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\basic_object_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\basic_random_access_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\basic_stream_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\object_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\object_handle_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\overlapped_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\overlapped_ptr.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\random_access_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\random_access_handle_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\stream_handle.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\windows\stream_handle_service.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\write.hpp	/^namespace asio {$/;"	n
asio	.\include\asio\write_at.hpp	/^namespace asio {$/;"	n
asio_handler_alloc_helpers	.\include\asio\detail\handler_alloc_helpers.hpp	/^namespace asio_handler_alloc_helpers {$/;"	n
asio_handler_allocate	.\include\asio\detail\bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\detail\wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\experimental\impl\redirect_error.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::experimental::detail
asio_handler_allocate	.\include\asio\impl\buffered_read_stream.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\buffered_write_stream.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\connect.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\read.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\read_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\read_until.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\spawn.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\write.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\impl\write_at.hpp	/^  inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_allocate	.\include\asio\ssl\detail\io.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:asio::ssl::detail
asio_handler_cont_helpers	.\include\asio\detail\handler_cont_helpers.hpp	/^namespace asio_handler_cont_helpers {$/;"	n
asio_handler_deallocate	.\include\asio\detail\bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\detail\wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\experimental\impl\redirect_error.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::experimental::detail
asio_handler_deallocate	.\include\asio\impl\buffered_read_stream.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\buffered_write_stream.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\connect.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\read.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\read_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\read_until.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\spawn.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\write.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\impl\write_at.hpp	/^  inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::detail
asio_handler_deallocate	.\include\asio\ssl\detail\io.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:asio::ssl::detail
asio_handler_invoke	.\include\asio\detail\bind_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\detail\bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\detail\wrapped_handler.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\detail\wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\experimental\impl\redirect_error.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::experimental::detail
asio_handler_invoke	.\include\asio\experimental\impl\redirect_error.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::experimental::detail
asio_handler_invoke	.\include\asio\handler_invoke_hook.hpp	/^inline void asio_handler_invoke(Function& function, ...)$/;"	f	namespace:asio
asio_handler_invoke	.\include\asio\handler_invoke_hook.hpp	/^inline void asio_handler_invoke(const Function& function, ...)$/;"	f	namespace:asio
asio_handler_invoke	.\include\asio\impl\buffered_read_stream.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\buffered_read_stream.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\buffered_write_stream.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\buffered_write_stream.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\connect.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\connect.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read_until.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\read_until.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\spawn.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\spawn.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\use_future.hpp	/^inline void asio_handler_invoke(Function& f,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\use_future.hpp	/^inline void asio_handler_invoke(const Function& f,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\write.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\write.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\write_at.hpp	/^  inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\impl\write_at.hpp	/^  inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::detail
asio_handler_invoke	.\include\asio\ssl\detail\io.hpp	/^inline void asio_handler_invoke(Function& function,$/;"	f	namespace:asio::ssl::detail
asio_handler_invoke	.\include\asio\ssl\detail\io.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:asio::ssl::detail
asio_handler_invoke_helpers	.\include\asio\detail\handler_invoke_helpers.hpp	/^namespace asio_handler_invoke_helpers {$/;"	n
asio_handler_is_continuation	.\include\asio\detail\bind_handler.hpp	/^inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\detail\wrapped_handler.hpp	/^inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\experimental\impl\redirect_error.hpp	/^inline bool asio_handler_is_continuation($/;"	f	namespace:asio::experimental::detail
asio_handler_is_continuation	.\include\asio\handler_continuation_hook.hpp	/^inline bool asio_handler_is_continuation(...)$/;"	f	namespace:asio
asio_handler_is_continuation	.\include\asio\impl\buffered_read_stream.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\buffered_write_stream.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\connect.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\read.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\read_at.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\read_until.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\spawn.hpp	/^  inline bool asio_handler_is_continuation(coro_handler<Handler, T>*)$/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\write.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\impl\write_at.hpp	/^  inline bool asio_handler_is_continuation($/;"	f	namespace:asio::detail
asio_handler_is_continuation	.\include\asio\ssl\detail\io.hpp	/^inline bool asio_handler_is_continuation($/;"	f	namespace:asio::ssl::detail
asn1	.\include\asio\ssl\context_base.hpp	/^    asn1,$/;"	e	enum:asio::ssl::context_base::file_format
assign	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID assign(const native_handle_type& native_serial_port,$/;"	f	class:asio::basic_serial_port
assign	.\include\asio\basic_serial_port.hpp	/^  void assign(const native_handle_type& native_serial_port)$/;"	f	class:asio::basic_serial_port
assign	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID assign(const protocol_type& protocol,$/;"	f	class:asio::basic_socket
assign	.\include\asio\basic_socket.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:asio::basic_socket
assign	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID assign(const protocol_type& protocol,$/;"	f	class:asio::basic_socket_acceptor
assign	.\include\asio\basic_socket_acceptor.hpp	/^  void assign(const protocol_type& protocol,$/;"	f	class:asio::basic_socket_acceptor
assign	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
assign	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code assign(implementation_type&, const protocol_type&,$/;"	f	class:asio::detail::null_socket_service
assign	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code assign(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
assign	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code assign(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
assign	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code assign(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
assign	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code assign(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
assign	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code assign(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
assign	.\include\asio\error_code.hpp	/^  void assign(int v, const error_category& c)$/;"	f	class:asio::error_code
assign	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID assign(const native_handle_type& native_descriptor,$/;"	f	class:asio::posix::basic_descriptor
assign	.\include\asio\posix\basic_descriptor.hpp	/^  void assign(const native_handle_type& native_descriptor)$/;"	f	class:asio::posix::basic_descriptor
assign	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID assign(const native_handle_type& native_descriptor,$/;"	f	class:asio::posix::descriptor
assign	.\include\asio\posix\descriptor.hpp	/^  void assign(const native_handle_type& native_descriptor)$/;"	f	class:asio::posix::descriptor
assign	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
assign	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
assign	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
assign	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::serial_port_service
assign	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
assign	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
assign	.\include\asio\windows\basic_handle.hpp	/^  ASIO_SYNC_OP_VOID assign(const native_handle_type& handle,$/;"	f	class:asio::windows::basic_handle
assign	.\include\asio\windows\basic_handle.hpp	/^  void assign(const native_handle_type& handle)$/;"	f	class:asio::windows::basic_handle
assign	.\include\asio\windows\object_handle_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
assign	.\include\asio\windows\overlapped_handle.hpp	/^  ASIO_SYNC_OP_VOID assign(const native_handle_type& handle,$/;"	f	class:asio::windows::overlapped_handle
assign	.\include\asio\windows\overlapped_handle.hpp	/^  void assign(const native_handle_type& handle)$/;"	f	class:asio::windows::overlapped_handle
assign	.\include\asio\windows\random_access_handle_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
assign	.\include\asio\windows\stream_handle_service.hpp	/^  ASIO_SYNC_OP_VOID assign(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
associated_allocator	.\include\asio\associated_allocator.hpp	/^struct associated_allocator$/;"	s	namespace:asio
associated_allocator	.\include\asio\bind_executor.hpp	/^struct associated_allocator<executor_binder<T, Executor>, Allocator>$/;"	s	namespace:asio
associated_allocator	.\include\asio\detail\bind_handler.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\detail\bind_handler.hpp	/^struct associated_allocator<detail::binder1<Handler, Arg1>, Allocator>$/;"	s	namespace:asio
associated_allocator	.\include\asio\detail\bind_handler.hpp	/^struct associated_allocator<detail::binder2<Handler, Arg1, Arg2>, Allocator>$/;"	s	namespace:asio
associated_allocator	.\include\asio\detail\bind_handler.hpp	/^struct associated_allocator<detail::move_binder1<Handler, Arg1>, Allocator>$/;"	s	namespace:asio
associated_allocator	.\include\asio\experimental\impl\redirect_error.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\buffered_read_stream.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\buffered_write_stream.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\connect.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\read.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\read_at.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\read_until.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\spawn.hpp	/^struct associated_allocator<detail::coro_handler<Handler, T>, Allocator>$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\write.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\impl\write_at.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator	.\include\asio\ssl\detail\io.hpp	/^struct associated_allocator<$/;"	s	namespace:asio
associated_allocator_check	.\include\asio\associated_allocator.hpp	/^struct associated_allocator_check$/;"	s	namespace:asio::detail
associated_allocator_impl	.\include\asio\associated_allocator.hpp	/^struct associated_allocator_impl$/;"	s	namespace:asio::detail
associated_allocator_impl	.\include\asio\associated_allocator.hpp	/^struct associated_allocator_impl<T, E,$/;"	s	namespace:asio::detail
associated_executor	.\include\asio\associated_executor.hpp	/^struct associated_executor$/;"	s	namespace:asio
associated_executor	.\include\asio\bind_executor.hpp	/^struct associated_executor<executor_binder<T, Executor>, Executor1>$/;"	s	namespace:asio
associated_executor	.\include\asio\detail\bind_handler.hpp	/^struct associated_executor<detail::binder1<Handler, Arg1>, Executor>$/;"	s	namespace:asio
associated_executor	.\include\asio\detail\bind_handler.hpp	/^struct associated_executor<detail::binder2<Handler, Arg1, Arg2>, Executor>$/;"	s	namespace:asio
associated_executor	.\include\asio\detail\bind_handler.hpp	/^struct associated_executor<detail::move_binder1<Handler, Arg1>, Executor>$/;"	s	namespace:asio
associated_executor	.\include\asio\detail\bind_handler.hpp	/^struct associated_executor<detail::move_binder2<Handler, Arg1, Arg2>, Executor>$/;"	s	namespace:asio
associated_executor	.\include\asio\experimental\impl\redirect_error.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\buffered_read_stream.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\buffered_write_stream.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\connect.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\read.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\read_at.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\read_until.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\spawn.hpp	/^struct associated_executor<detail::coro_handler<Handler, T>, Executor>$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\write.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\impl\write_at.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor	.\include\asio\ssl\detail\io.hpp	/^struct associated_executor<$/;"	s	namespace:asio
associated_executor_check	.\include\asio\associated_executor.hpp	/^struct associated_executor_check$/;"	s	namespace:asio::detail
associated_executor_impl	.\include\asio\associated_executor.hpp	/^struct associated_executor_impl$/;"	s	namespace:asio::detail
associated_executor_impl	.\include\asio\associated_executor.hpp	/^struct associated_executor_impl<T, E,$/;"	s	namespace:asio::detail
async_accept	.\include\asio\basic_socket_acceptor.hpp	/^  async_accept(asio::io_context& io_context,$/;"	f	class:asio::basic_socket_acceptor
async_accept	.\include\asio\basic_socket_acceptor.hpp	/^  async_accept(basic_socket<Protocol1, SocketService>& peer,$/;"	f	class:asio::basic_socket_acceptor
async_accept	.\include\asio\basic_socket_acceptor.hpp	/^  async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:asio::basic_socket_acceptor
async_accept	.\include\asio\basic_socket_acceptor.hpp	/^  async_accept(endpoint_type& peer_endpoint,$/;"	f	class:asio::basic_socket_acceptor
async_accept	.\include\asio\detail\null_socket_service.hpp	/^  void async_accept(implementation_type&, Socket&,$/;"	f	class:asio::detail::null_socket_service
async_accept	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:asio::detail::reactive_socket_service
async_accept	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
async_accept	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_accept(implementation_type& impl, Socket& peer,$/;"	f	class:asio::detail::win_iocp_socket_service
async_accept	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
async_accept	.\include\asio\socket_acceptor_service.hpp	/^  async_accept(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
async_completion	.\include\asio\async_result.hpp	/^  explicit async_completion(CompletionToken& token)$/;"	f	struct:asio::async_completion
async_completion	.\include\asio\async_result.hpp	/^  explicit async_completion(const typename decay<CompletionToken>::type& token)$/;"	f	struct:asio::async_completion
async_completion	.\include\asio\async_result.hpp	/^  explicit async_completion(typename decay<CompletionToken>::type& token)$/;"	f	struct:asio::async_completion
async_completion	.\include\asio\async_result.hpp	/^struct async_completion$/;"	s	namespace:asio
async_connect	.\include\asio\basic_socket.hpp	/^  async_connect(const endpoint_type& peer_endpoint,$/;"	f	class:asio::basic_socket
async_connect	.\include\asio\datagram_socket_service.hpp	/^  async_connect(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
async_connect	.\include\asio\detail\null_socket_service.hpp	/^  void async_connect(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
async_connect	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
async_connect	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
async_connect	.\include\asio\detail\winrt_ssocket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
async_connect	.\include\asio\impl\connect.hpp	/^async_connect(basic_socket<Protocol ASIO_SVC_TARG>& s,$/;"	f	namespace:asio
async_connect	.\include\asio\raw_socket_service.hpp	/^  async_connect(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
async_connect	.\include\asio\seq_packet_socket_service.hpp	/^  async_connect(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
async_connect	.\include\asio\stream_socket_service.hpp	/^  async_connect(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
async_handshake	.\include\asio\ssl\stream.hpp	/^  async_handshake(handshake_type type, const ConstBufferSequence& buffers,$/;"	f	class:asio::ssl::stream
async_handshake	.\include\asio\ssl\stream.hpp	/^  async_handshake(handshake_type type,$/;"	f	class:asio::ssl::stream
async_io	.\include\asio\ssl\detail\io.hpp	/^inline void async_io(Stream& next_layer, stream_core& core,$/;"	f	namespace:asio::ssl::detail
async_manager_	.\include\asio\detail\winrt_resolver_service.hpp	/^  winrt_async_manager& async_manager_;$/;"	m	class:asio::detail::winrt_resolver_service
async_manager_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  winrt_async_manager& async_manager_;$/;"	m	class:asio::detail::winrt_ssocket_service_base
async_read	.\include\asio\impl\read.hpp	/^async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	f	namespace:asio
async_read	.\include\asio\impl\read.hpp	/^async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:asio
async_read	.\include\asio\impl\read.hpp	/^async_read(AsyncReadStream& s,$/;"	f	namespace:asio
async_read_at	.\include\asio\impl\read_at.hpp	/^async_read_at(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:asio
async_read_some	.\include\asio\basic_serial_port.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_serial_port
async_read_some	.\include\asio\basic_stream_socket.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
async_read_some	.\include\asio\buffered_stream.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_stream
async_read_some	.\include\asio\buffered_write_stream.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_write_stream
async_read_some	.\include\asio\detail\reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
async_read_some	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
async_read_some	.\include\asio\detail\win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_handle_service
async_read_some	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
async_read_some	.\include\asio\impl\buffered_read_stream.hpp	/^buffered_read_stream<Stream>::async_read_some($/;"	f	class:asio::buffered_read_stream
async_read_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::posix::basic_stream_descriptor
async_read_some	.\include\asio\posix\stream_descriptor_service.hpp	/^  async_read_some(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
async_read_some	.\include\asio\serial_port_service.hpp	/^  async_read_some(implementation_type& impl,$/;"	f	class:asio::serial_port_service
async_read_some	.\include\asio\ssl\stream.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::ssl::stream
async_read_some	.\include\asio\windows\basic_stream_handle.hpp	/^  async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::windows::basic_stream_handle
async_read_some	.\include\asio\windows\stream_handle_service.hpp	/^  async_read_some(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
async_read_some_at	.\include\asio\detail\win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::detail::win_iocp_handle_service
async_read_some_at	.\include\asio\windows\basic_random_access_handle.hpp	/^  async_read_some_at(uint64_t offset,$/;"	f	class:asio::windows::basic_random_access_handle
async_read_some_at	.\include\asio\windows\random_access_handle_service.hpp	/^  async_read_some_at(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
async_read_until	.\include\asio\impl\read_until.hpp	/^async_read_until(AsyncReadStream& s,$/;"	f	namespace:asio
async_receive	.\include\asio\basic_datagram_socket.hpp	/^  async_receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
async_receive	.\include\asio\basic_raw_socket.hpp	/^  async_receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
async_receive	.\include\asio\basic_seq_packet_socket.hpp	/^  async_receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_seq_packet_socket
async_receive	.\include\asio\basic_stream_socket.hpp	/^  async_receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
async_receive	.\include\asio\datagram_socket_service.hpp	/^  async_receive(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
async_receive	.\include\asio\detail\null_socket_service.hpp	/^  void async_receive(implementation_type&, const MutableBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
async_receive	.\include\asio\detail\null_socket_service.hpp	/^  void async_receive(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
async_receive	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service_base
async_receive	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
async_receive	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_receive	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_receive	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  void async_receive(base_implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service_base
async_receive	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  void async_receive(base_implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
async_receive	.\include\asio\raw_socket_service.hpp	/^  async_receive(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
async_receive	.\include\asio\seq_packet_socket_service.hpp	/^  async_receive(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
async_receive	.\include\asio\stream_socket_service.hpp	/^  async_receive(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
async_receive_from	.\include\asio\basic_datagram_socket.hpp	/^  async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
async_receive_from	.\include\asio\basic_raw_socket.hpp	/^  async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
async_receive_from	.\include\asio\datagram_socket_service.hpp	/^  async_receive_from(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
async_receive_from	.\include\asio\detail\null_socket_service.hpp	/^  void async_receive_from(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
async_receive_from	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
async_receive_from	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
async_receive_from	.\include\asio\raw_socket_service.hpp	/^  async_receive_from(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
async_receive_with_flags	.\include\asio\detail\null_socket_service.hpp	/^  void async_receive_with_flags(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
async_receive_with_flags	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
async_receive_with_flags	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_receive_with_flags(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_resolve	.\include\asio\detail\resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:asio::detail::resolver_service
async_resolve	.\include\asio\detail\winrt_resolver_service.hpp	/^  void async_resolve(implementation_type& impl,$/;"	f	class:asio::detail::winrt_resolver_service
async_resolve	.\include\asio\detail\winrt_resolver_service.hpp	/^  void async_resolve(implementation_type&,$/;"	f	class:asio::detail::winrt_resolver_service
async_resolve	.\include\asio\ip\basic_resolver.hpp	/^  async_resolve(ASIO_STRING_VIEW_PARAM host,$/;"	f	class:asio::ip::basic_resolver
async_resolve	.\include\asio\ip\basic_resolver.hpp	/^  async_resolve(const endpoint_type& e,$/;"	f	class:asio::ip::basic_resolver
async_resolve	.\include\asio\ip\basic_resolver.hpp	/^  async_resolve(const protocol_type& protocol,$/;"	f	class:asio::ip::basic_resolver
async_resolve	.\include\asio\ip\basic_resolver.hpp	/^  async_resolve(const query& q,$/;"	f	class:asio::ip::basic_resolver
async_resolve	.\include\asio\ip\resolver_service.hpp	/^  async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:asio::ip::resolver_service
async_resolve	.\include\asio\ip\resolver_service.hpp	/^  async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:asio::ip::resolver_service
async_result	.\include\asio\async_result.hpp	/^  explicit async_result(Handler&)$/;"	f	class:asio::async_result
async_result	.\include\asio\async_result.hpp	/^  explicit async_result(completion_handler_type& h)$/;"	f	class:asio::async_result
async_result	.\include\asio\async_result.hpp	/^class async_result$/;"	c	namespace:asio
async_result	.\include\asio\async_result.hpp	/^class async_result<Handler>$/;"	c	namespace:asio
async_result	.\include\asio\bind_executor.hpp	/^  explicit async_result(executor_binder<T, Executor>& b)$/;"	f	class:asio::async_result
async_result	.\include\asio\bind_executor.hpp	/^class async_result<executor_binder<T, Executor> >$/;"	c	namespace:asio
async_result	.\include\asio\bind_executor.hpp	/^class async_result<executor_binder<T, Executor>, Signature>$/;"	c	namespace:asio
async_result	.\include\asio\experimental\impl\co_spawn.hpp	/^  async_result(completion_handler_type& h)$/;"	f	class:asio::async_result
async_result	.\include\asio\experimental\impl\co_spawn.hpp	/^  async_result(experimental::detail::await_handler<Executor, Args...>& h)$/;"	f	class:asio::async_result
async_result	.\include\asio\experimental\impl\co_spawn.hpp	/^class async_result<experimental::await_token<Executor>, R(Args...)>$/;"	c	namespace:asio
async_result	.\include\asio\experimental\impl\co_spawn.hpp	/^class async_result<experimental::detail::await_handler<Executor, Args...>>$/;"	c	namespace:asio
async_result	.\include\asio\experimental\impl\detached.hpp	/^  explicit async_result(completion_handler_type&)$/;"	f	struct:asio::async_result
async_result	.\include\asio\experimental\impl\detached.hpp	/^struct async_result<experimental::detached_t, Signature>$/;"	s	namespace:asio
async_result	.\include\asio\experimental\impl\redirect_error.hpp	/^  explicit async_result($/;"	f	struct:asio::async_result
async_result	.\include\asio\experimental\impl\redirect_error.hpp	/^  explicit async_result(completion_handler_type& h)$/;"	f	struct:asio::async_result
async_result	.\include\asio\experimental\impl\redirect_error.hpp	/^struct async_result<experimental::detail::redirect_error_handler<Handler> >$/;"	s	namespace:asio
async_result	.\include\asio\experimental\impl\redirect_error.hpp	/^struct async_result<experimental::redirect_error_t<CompletionToken>, Signature>$/;"	s	namespace:asio
async_result	.\include\asio\impl\spawn.hpp	/^  explicit async_result($/;"	f	class:asio::async_result
async_result	.\include\asio\impl\spawn.hpp	/^class async_result<basic_yield_context<Handler>, ReturnType()>$/;"	c	namespace:asio
async_result	.\include\asio\impl\spawn.hpp	/^class async_result<basic_yield_context<Handler>, ReturnType(Arg1)>$/;"	c	namespace:asio
async_result	.\include\asio\impl\spawn.hpp	/^class async_result<basic_yield_context<Handler>,$/;"	c	namespace:asio
async_result	.\include\asio\impl\spawn.hpp	/^class async_result<detail::coro_handler<Handler, T> >$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^  explicit async_result($/;"	f	class:asio::async_result
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<detail::packaged_handler<Function, Allocator, Result> >$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<detail::packaged_token<Function, Allocator>, Result()>$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<detail::packaged_token<Function, Allocator>, Result(Args...)>$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<detail::promise_handler<Signature, Allocator> >$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<use_future_t<Allocator>, Result()>$/;"	c	namespace:asio
async_result	.\include\asio\impl\use_future.hpp	/^class async_result<use_future_t<Allocator>, Result(Args...)>$/;"	c	namespace:asio
async_result	.\include\asio\packaged_task.hpp	/^  explicit async_result(completion_handler_type& h)$/;"	f	class:asio::async_result
async_result	.\include\asio\packaged_task.hpp	/^class async_result<std::packaged_task<Result(Args...)>, Signature>$/;"	c	namespace:asio
async_result_helper	.\include\asio\async_result.hpp	/^struct async_result_helper$/;"	s	namespace:asio::detail
async_send	.\include\asio\basic_datagram_socket.hpp	/^  async_send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
async_send	.\include\asio\basic_raw_socket.hpp	/^  async_send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
async_send	.\include\asio\basic_seq_packet_socket.hpp	/^  async_send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_seq_packet_socket
async_send	.\include\asio\basic_stream_socket.hpp	/^  async_send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
async_send	.\include\asio\datagram_socket_service.hpp	/^  async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:asio::datagram_socket_service
async_send	.\include\asio\detail\null_socket_service.hpp	/^  void async_send(implementation_type&, const ConstBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
async_send	.\include\asio\detail\null_socket_service.hpp	/^  void async_send(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
async_send	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service_base
async_send	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
async_send	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_send	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_send	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  void async_send(base_implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service_base
async_send	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  void async_send(base_implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
async_send	.\include\asio\raw_socket_service.hpp	/^  async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:asio::raw_socket_service
async_send	.\include\asio\seq_packet_socket_service.hpp	/^  async_send(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
async_send	.\include\asio\stream_socket_service.hpp	/^  async_send(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
async_send_to	.\include\asio\basic_datagram_socket.hpp	/^  async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
async_send_to	.\include\asio\basic_raw_socket.hpp	/^  async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
async_send_to	.\include\asio\datagram_socket_service.hpp	/^  async_send_to(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
async_send_to	.\include\asio\detail\null_socket_service.hpp	/^  void async_send_to(implementation_type&, const ConstBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
async_send_to	.\include\asio\detail\null_socket_service.hpp	/^  void async_send_to(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
async_send_to	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service
async_send_to	.\include\asio\detail\reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
async_send_to	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service
async_send_to	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
async_send_to	.\include\asio\raw_socket_service.hpp	/^  async_send_to(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
async_wait	.\include\asio\basic_socket.hpp	/^  async_wait(wait_type w, ASIO_MOVE_ARG(WaitHandler) handler)$/;"	f	class:asio::basic_socket
async_wait	.\include\asio\basic_socket_acceptor.hpp	/^  async_wait(wait_type w, ASIO_MOVE_ARG(WaitHandler) handler)$/;"	f	class:asio::basic_socket_acceptor
async_wait	.\include\asio\datagram_socket_service.hpp	/^  async_wait(implementation_type& impl, socket_base::wait_type w,$/;"	f	class:asio::datagram_socket_service
async_wait	.\include\asio\deadline_timer_service.hpp	/^  async_wait(implementation_type& impl,$/;"	f	class:asio::deadline_timer_service
async_wait	.\include\asio\detail\deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, Handler& handler)$/;"	f	class:asio::detail::deadline_timer_service
async_wait	.\include\asio\detail\reactive_descriptor_service.hpp	/^  void async_wait(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
async_wait	.\include\asio\detail\reactive_socket_service_base.hpp	/^  void async_wait(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
async_wait	.\include\asio\detail\signal_set_service.hpp	/^  void async_wait(implementation_type& impl, Handler& handler)$/;"	f	class:asio::detail::signal_set_service
async_wait	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void async_wait(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
async_wait	.\include\asio\detail\win_object_handle_service.hpp	/^  void async_wait(implementation_type& impl, Handler& handler)$/;"	f	class:asio::detail::win_object_handle_service
async_wait	.\include\asio\posix\basic_descriptor.hpp	/^  async_wait(wait_type w, ASIO_MOVE_ARG(WaitHandler) handler)$/;"	f	class:asio::posix::basic_descriptor
async_wait	.\include\asio\posix\descriptor.hpp	/^  async_wait(wait_type w, ASIO_MOVE_ARG(WaitHandler) handler)$/;"	f	class:asio::posix::descriptor
async_wait	.\include\asio\posix\stream_descriptor_service.hpp	/^  async_wait(implementation_type& impl, descriptor_base::wait_type w,$/;"	f	class:asio::posix::stream_descriptor_service
async_wait	.\include\asio\raw_socket_service.hpp	/^  async_wait(implementation_type& impl, socket_base::wait_type w,$/;"	f	class:asio::raw_socket_service
async_wait	.\include\asio\seq_packet_socket_service.hpp	/^  async_wait(implementation_type& impl, socket_base::wait_type w,$/;"	f	class:asio::seq_packet_socket_service
async_wait	.\include\asio\signal_set_service.hpp	/^  async_wait(implementation_type& impl,$/;"	f	class:asio::signal_set_service
async_wait	.\include\asio\socket_acceptor_service.hpp	/^  async_wait(implementation_type& impl, socket_base::wait_type w,$/;"	f	class:asio::socket_acceptor_service
async_wait	.\include\asio\stream_socket_service.hpp	/^  async_wait(implementation_type& impl, socket_base::wait_type w,$/;"	f	class:asio::stream_socket_service
async_wait	.\include\asio\waitable_timer_service.hpp	/^  async_wait(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
async_wait	.\include\asio\windows\object_handle_service.hpp	/^  async_wait(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
async_write	.\include\asio\impl\write.hpp	/^async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:asio
async_write	.\include\asio\impl\write.hpp	/^async_write(AsyncWriteStream& s,$/;"	f	namespace:asio
async_write_at	.\include\asio\impl\write_at.hpp	/^async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:asio
async_write_some	.\include\asio\basic_serial_port.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_serial_port
async_write_some	.\include\asio\basic_stream_socket.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
async_write_some	.\include\asio\buffered_read_stream.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::buffered_read_stream
async_write_some	.\include\asio\buffered_stream.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::buffered_stream
async_write_some	.\include\asio\detail\reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
async_write_some	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
async_write_some	.\include\asio\detail\win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_handle_service
async_write_some	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
async_write_some	.\include\asio\impl\buffered_write_stream.hpp	/^buffered_write_stream<Stream>::async_write_some($/;"	f	class:asio::buffered_write_stream
async_write_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::posix::basic_stream_descriptor
async_write_some	.\include\asio\posix\stream_descriptor_service.hpp	/^  async_write_some(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
async_write_some	.\include\asio\serial_port_service.hpp	/^  async_write_some(implementation_type& impl,$/;"	f	class:asio::serial_port_service
async_write_some	.\include\asio\ssl\stream.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::ssl::stream
async_write_some	.\include\asio\windows\basic_stream_handle.hpp	/^  async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::windows::basic_stream_handle
async_write_some	.\include\asio\windows\stream_handle_service.hpp	/^  async_write_some(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
async_write_some_at	.\include\asio\detail\win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::detail::win_iocp_handle_service
async_write_some_at	.\include\asio\windows\basic_random_access_handle.hpp	/^  async_write_some_at(uint64_t offset,$/;"	f	class:asio::windows::basic_random_access_handle
async_write_some_at	.\include\asio\windows\random_access_handle_service.hpp	/^  async_write_some_at(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
at_mark	.\include\asio\basic_socket.hpp	/^  bool at_mark() const$/;"	f	class:asio::basic_socket
at_mark	.\include\asio\basic_socket.hpp	/^  bool at_mark(asio::error_code& ec) const$/;"	f	class:asio::basic_socket
at_mark	.\include\asio\datagram_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
at_mark	.\include\asio\detail\null_socket_service.hpp	/^  bool at_mark(const implementation_type&,$/;"	f	class:asio::detail::null_socket_service
at_mark	.\include\asio\detail\reactive_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
at_mark	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  bool at_mark(const base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
at_mark	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  bool at_mark(const base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
at_mark	.\include\asio\raw_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:asio::raw_socket_service
at_mark	.\include\asio\seq_packet_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
at_mark	.\include\asio\stream_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:asio::stream_socket_service
atomic_bool	.\include\global_types.hpp	/^	atomic_bool() : val(false){}$/;"	f	class:atomic_bool
atomic_bool	.\include\global_types.hpp	/^class atomic_bool$/;"	c
atomic_count	.\include\asio\detail\atomic_count.hpp	/^typedef long atomic_count;$/;"	t	namespace:asio::detail
attach_awaitee	.\include\asio\experimental\impl\co_spawn.hpp	/^  void attach_awaitee(const awaitable<T, Executor>& a)$/;"	f	class:asio::experimental::detail::await_handler_base
attach_callees	.\include\asio\experimental\impl\co_spawn.hpp	/^  void attach_callees(awaiter<Executor>* a)$/;"	f	class:asio::experimental::detail::awaitee_base
attach_caller	.\include\asio\experimental\impl\co_spawn.hpp	/^  void attach_caller(coroutine_handle<awaitee<U, Executor>> h)$/;"	f	class:asio::experimental::detail::awaitee_base
attach_caller	.\include\asio\experimental\impl\co_spawn.hpp	/^  void attach_caller(coroutine_handle<awaiter<Executor>> h)$/;"	f	class:asio::experimental::detail::awaitee_base
attributes	.\include\asio\impl\spawn.hpp	/^    const boost::coroutines::attributes& attributes,$/;"	m	namespace:asio
attributes	.\include\asio\spawn.hpp	/^    const boost::coroutines::attributes& attributes$/;"	m	namespace:asio
attributes_	.\include\asio\impl\spawn.hpp	/^    boost::coroutines::attributes attributes_;$/;"	m	struct:asio::detail::spawn_helper
auto_addrinfo	.\include\asio\detail\resolver_service_base.hpp	/^    explicit auto_addrinfo(asio::detail::addrinfo_type* ai)$/;"	f	class:asio::detail::resolver_service_base::auto_addrinfo
auto_addrinfo	.\include\asio\detail\resolver_service_base.hpp	/^  class auto_addrinfo$/;"	c	class:asio::detail::resolver_service_base
auto_func_base_ptr	.\include\asio\detail\posix_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:asio::detail::posix_thread
auto_func_base_ptr	.\include\asio\detail\win_thread.hpp	/^  struct auto_func_base_ptr$/;"	s	class:asio::detail::win_thread
auto_handle	.\include\asio\detail\win_iocp_io_context.hpp	/^    auto_handle() : handle(0) {}$/;"	f	struct:asio::detail::win_iocp_io_context::auto_handle
auto_handle	.\include\asio\detail\win_iocp_io_context.hpp	/^  struct auto_handle$/;"	s	class:asio::detail::win_iocp_io_context
auto_service_ptr	.\include\asio\detail\service_registry.hpp	/^  struct auto_service_ptr$/;"	s	class:asio::detail::service_registry
available	.\include\asio\basic_socket.hpp	/^  std::size_t available() const$/;"	f	class:asio::basic_socket
available	.\include\asio\basic_socket.hpp	/^  std::size_t available(asio::error_code& ec) const$/;"	f	class:asio::basic_socket
available	.\include\asio\datagram_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
available	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t available(const implementation_type&,$/;"	f	class:asio::detail::null_socket_service
available	.\include\asio\detail\reactive_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
available	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  std::size_t available(const base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
available	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  std::size_t available(const base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
available	.\include\asio\raw_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:asio::raw_socket_service
available	.\include\asio\seq_packet_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
available	.\include\asio\stream_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:asio::stream_socket_service
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, T>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, asio::error_code, T>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, asio::error_code, Ts...>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, asio::error_code>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, std::exception_ptr, T>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, std::exception_ptr, Ts...>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, std::exception_ptr>$/;"	c	namespace:asio::experimental::detail
await_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler<Executor, void>$/;"	c	namespace:asio::experimental::detail
await_handler_base	.\include\asio\experimental\impl\co_spawn.hpp	/^  await_handler_base(await_token<Executor> token)$/;"	f	class:asio::experimental::detail::await_handler_base
await_handler_base	.\include\asio\experimental\impl\co_spawn.hpp	/^class await_handler_base : public awaiter_task<Executor>$/;"	c	namespace:asio::experimental::detail
await_resume	.\include\asio\experimental\co_spawn.hpp	/^  T await_resume()$/;"	f	class:asio::experimental::awaitable
await_resume	.\include\asio\experimental\impl\co_spawn.hpp	/^    Executor await_resume()$/;"	f	class:asio::experimental::detail::awaitee_base::awaitable_executor
await_resume	.\include\asio\experimental\impl\co_spawn.hpp	/^    await_token<Executor> await_resume()$/;"	f	class:asio::experimental::detail::awaitee_base::awaitable_token
await_suspend	.\include\asio\experimental\co_spawn.hpp	/^  void await_suspend(detail::coroutine_handle<detail::awaitee<U, Executor>> h)$/;"	f	class:asio::experimental::awaitable
await_suspend	.\include\asio\experimental\co_spawn.hpp	/^  void await_suspend(detail::coroutine_handle<detail::awaiter<Executor>> h)$/;"	f	class:asio::experimental::awaitable
await_suspend	.\include\asio\experimental\impl\co_spawn.hpp	/^    void await_suspend(coroutine_handle<void>)$/;"	f	struct:asio::experimental::detail::awaitee_base::final_suspender
await_token	.\include\asio\experimental\co_spawn.hpp	/^  explicit await_token(detail::awaiter<Executor>* a)$/;"	f	class:asio::experimental::await_token
await_token	.\include\asio\experimental\co_spawn.hpp	/^class await_token$/;"	c	namespace:asio::experimental
await_transform	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitable<T, Executor> await_transform(awaitable<T, Executor>& t) const$/;"	f	class:asio::experimental::detail::awaitee_base
await_transform	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitable<T, Executor> await_transform(awaitable<T, Executor>&& t) const$/;"	f	class:asio::experimental::detail::awaitee_base
await_transform	.\include\asio\experimental\impl\co_spawn.hpp	/^  std::experimental::suspend_always await_transform($/;"	f	class:asio::experimental::detail::awaitee_base
awaitable	.\include\asio\experimental\co_spawn.hpp	/^  explicit awaitable(detail::awaitee<T, Executor>* a) : awaitee_(a) {}$/;"	f	class:asio::experimental::awaitable
awaitable	.\include\asio\experimental\co_spawn.hpp	/^class awaitable$/;"	c	namespace:asio::experimental
awaitable_	.\include\asio\experimental\impl\co_spawn.hpp	/^  return_type awaitable_;$/;"	m	class:asio::async_result
awaitable_	.\include\asio\experimental\impl\co_spawn.hpp	/^  type awaitable_;$/;"	m	class:asio::async_result
awaitable_executor	.\include\asio\experimental\impl\co_spawn.hpp	/^    explicit awaitable_executor(awaitee_base* a)$/;"	f	class:asio::experimental::detail::awaitee_base::awaitable_executor
awaitable_executor	.\include\asio\experimental\impl\co_spawn.hpp	/^  class awaitable_executor$/;"	c	class:asio::experimental::detail::awaitee_base
awaitable_signature	.\include\asio\experimental\impl\co_spawn.hpp	/^struct awaitable_signature<awaitable<T, Executor>>$/;"	s	namespace:asio::experimental::detail
awaitable_signature	.\include\asio\experimental\impl\co_spawn.hpp	/^struct awaitable_signature<awaitable<void, Executor>>$/;"	s	namespace:asio::experimental::detail
awaitable_token	.\include\asio\experimental\impl\co_spawn.hpp	/^    explicit awaitable_token(awaitee_base* a)$/;"	f	class:asio::experimental::detail::awaitee_base::awaitable_token
awaitable_token	.\include\asio\experimental\impl\co_spawn.hpp	/^  class awaitable_token$/;"	c	class:asio::experimental::detail::awaitee_base
awaitable_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef awaitable<T, Executor> awaitable_type;$/;"	t	class:asio::experimental::detail::await_handler_base
awaitee	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitee()$/;"	f	class:asio::experimental::detail::awaitee
awaitee	.\include\asio\experimental\impl\co_spawn.hpp	/^class awaitee$/;"	c	namespace:asio::experimental::detail
awaitee	.\include\asio\experimental\impl\co_spawn.hpp	/^class awaitee<void, Executor>$/;"	c	namespace:asio::experimental::detail
awaitee_	.\include\asio\experimental\co_spawn.hpp	/^  detail::awaitee<T, Executor>* awaitee_;$/;"	m	class:asio::experimental::awaitable
awaitee_	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitee<T, Executor>* awaitee_;$/;"	m	class:asio::experimental::detail::await_handler_base
awaitee_base	.\include\asio\experimental\impl\co_spawn.hpp	/^class awaitee_base$/;"	c	namespace:asio::experimental::detail
awaitee_tag	.\include\asio\detail\thread_info_base.hpp	/^  struct awaitee_tag$/;"	s	class:asio::detail::thread_info_base
awaiter	.\include\asio\experimental\impl\co_spawn.hpp	/^class awaiter$/;"	c	namespace:asio::experimental::detail
awaiter_	.\include\asio\experimental\co_spawn.hpp	/^    : awaiter_(other.awaiter_)$/;"	f	class:asio::experimental::await_token
awaiter_	.\include\asio\experimental\co_spawn.hpp	/^  detail::awaiter<Executor>* awaiter_;$/;"	m	class:asio::experimental::await_token
awaiter_	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaiter<Executor>* awaiter_ = nullptr;$/;"	m	class:asio::experimental::detail::awaitee_base
awaiter_	.\include\asio\experimental\impl\co_spawn.hpp	/^  typename awaiter<Executor>::ptr awaiter_;$/;"	m	class:asio::experimental::detail::awaiter_task
awaiter_task	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaiter_task(awaiter<Executor>* a)$/;"	f	class:asio::experimental::detail::awaiter_task
awaiter_task	.\include\asio\experimental\impl\co_spawn.hpp	/^class awaiter_task$/;"	c	namespace:asio::experimental::detail
axis_delimiter	.\include\udp_parser.hpp	/^    static std::string axis_delimiter;$/;"	m	class:udp_parser
axis_delimiter	.\source\udp_parser.cpp	/^std::string udp_parser::axis_delimiter = AXIS_DELIMITER;$/;"	m	class:udp_parser	file:
back	.\include\asio\detail\op_queue.hpp	/^  static Operation*& back(op_queue<Operation>& q)$/;"	f	class:asio::detail::op_queue_access
back_	.\include\asio\detail\op_queue.hpp	/^  Operation* back_;$/;"	m	class:asio::detail::op_queue
bad_address_cast	.\include\asio\ip\bad_address_cast.hpp	/^  bad_address_cast() {}$/;"	f	class:asio::ip::bad_address_cast
bad_address_cast	.\include\asio\ip\bad_address_cast.hpp	/^class bad_address_cast : public std::bad_cast$/;"	c	namespace:asio::ip
bad_descriptor	.\include\asio\error.hpp	/^  bad_descriptor = ASIO_SOCKET_ERROR(EBADF),$/;"	e	enum:asio::error::basic_errors
bad_executor	.\include\asio\executor.hpp	/^class bad_executor$/;"	c	namespace:asio
barrier	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  static void barrier()$/;"	f	class:asio::detail::gcc_arm_fenced_block
barrier	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  static void barrier()$/;"	f	class:asio::detail::gcc_hppa_fenced_block
barrier	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  static int barrier()$/;"	f	class:asio::detail::gcc_x86_fenced_block
base	.\include\asio\generic\detail\endpoint.hpp	/^    asio::detail::socket_addr_type base;$/;"	m	union:asio::generic::detail::endpoint::data_union
base	.\include\asio\ip\detail\endpoint.hpp	/^    asio::detail::socket_addr_type base;$/;"	m	union:asio::ip::detail::endpoint::data_union
base	.\include\asio\local\detail\endpoint.hpp	/^    asio::detail::socket_addr_type base;$/;"	m	union:asio::local::detail::endpoint::data_union
base_from_completion_cond	.\include\asio\detail\base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(CompletionCondition completion_condition)$/;"	f	class:asio::detail::base_from_completion_cond
base_from_completion_cond	.\include\asio\detail\base_from_completion_cond.hpp	/^  explicit base_from_completion_cond(transfer_all_t)$/;"	f	class:asio::detail::base_from_completion_cond
base_from_completion_cond	.\include\asio\detail\base_from_completion_cond.hpp	/^class base_from_completion_cond$/;"	c	namespace:asio::detail
base_from_completion_cond	.\include\asio\detail\base_from_completion_cond.hpp	/^class base_from_completion_cond<transfer_all_t>$/;"	c	namespace:asio::detail
base_from_connect_condition	.\include\asio\impl\connect.hpp	/^    explicit base_from_connect_condition($/;"	f	class:asio::detail::base_from_connect_condition
base_from_connect_condition	.\include\asio\impl\connect.hpp	/^    explicit base_from_connect_condition(const default_connect_condition&)$/;"	f	class:asio::detail::base_from_connect_condition
base_from_connect_condition	.\include\asio\impl\connect.hpp	/^  class base_from_connect_condition$/;"	c	namespace:asio::detail
base_from_connect_condition	.\include\asio\impl\connect.hpp	/^  class base_from_connect_condition<default_connect_condition>$/;"	c	namespace:asio::detail
base_implementation_type	.\include\asio\detail\reactive_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:asio::detail::reactive_socket_service_base
base_implementation_type	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:asio::detail::win_iocp_socket_service_base
base_implementation_type	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^    base_implementation_type()$/;"	f	struct:asio::detail::winrt_ssocket_service_base::base_implementation_type
base_implementation_type	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  struct base_implementation_type$/;"	s	class:asio::detail::winrt_ssocket_service_base
base_type	.\include\asio\bind_executor.hpp	/^    uses_executor<T, Executor>::value> base_type;$/;"	t	class:asio::executor_binder
basic_address_iterator	.\include\asio\ip\address_v4_iterator.hpp	/^template <> class basic_address_iterator<address_v4>$/;"	c	namespace:asio::ip
basic_address_iterator	.\include\asio\ip\address_v6_iterator.hpp	/^template <> class basic_address_iterator<address_v6>$/;"	c	namespace:asio::ip
basic_address_range	.\include\asio\ip\address_v4_range.hpp	/^template <> class basic_address_range<address_v4>$/;"	c	namespace:asio::ip
basic_address_range	.\include\asio\ip\address_v6_range.hpp	/^template <> class basic_address_range<address_v6>$/;"	c	namespace:asio::ip
basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^  basic_datagram_socket($/;"	f	class:asio::basic_datagram_socket
basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^  basic_datagram_socket(asio::io_context& io_context,$/;"	f	class:asio::basic_datagram_socket
basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^  basic_datagram_socket(basic_datagram_socket&& other)$/;"	f	class:asio::basic_datagram_socket
basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^  explicit basic_datagram_socket(asio::io_context& io_context)$/;"	f	class:asio::basic_datagram_socket
basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^class basic_datagram_socket$/;"	c	namespace:asio
basic_deadline_timer	.\include\asio\basic_deadline_timer.hpp	/^  basic_deadline_timer(asio::io_context& io_context,$/;"	f	class:asio::basic_deadline_timer
basic_deadline_timer	.\include\asio\basic_deadline_timer.hpp	/^  basic_deadline_timer(basic_deadline_timer&& other)$/;"	f	class:asio::basic_deadline_timer
basic_deadline_timer	.\include\asio\basic_deadline_timer.hpp	/^  explicit basic_deadline_timer(asio::io_context& io_context)$/;"	f	class:asio::basic_deadline_timer
basic_deadline_timer	.\include\asio\basic_deadline_timer.hpp	/^class basic_deadline_timer$/;"	c	namespace:asio
basic_descriptor	.\include\asio\posix\basic_descriptor.hpp	/^  basic_descriptor(asio::io_context& io_context,$/;"	f	class:asio::posix::basic_descriptor
basic_descriptor	.\include\asio\posix\basic_descriptor.hpp	/^  basic_descriptor(basic_descriptor&& other)$/;"	f	class:asio::posix::basic_descriptor
basic_descriptor	.\include\asio\posix\basic_descriptor.hpp	/^  explicit basic_descriptor(asio::io_context& io_context)$/;"	f	class:asio::posix::basic_descriptor
basic_descriptor	.\include\asio\posix\basic_descriptor.hpp	/^class basic_descriptor$/;"	c	namespace:asio::posix
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:asio::generic::basic_endpoint
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:asio::generic::basic_endpoint
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint(const Endpoint& endpoint)$/;"	f	class:asio::generic::basic_endpoint
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:asio::generic::basic_endpoint
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint(const void* socket_address,$/;"	f	class:asio::generic::basic_endpoint
basic_endpoint	.\include\asio\generic\basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:asio::generic
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:asio::ip::basic_endpoint
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:asio::ip::basic_endpoint
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint(const InternetProtocol& internet_protocol,$/;"	f	class:asio::ip::basic_endpoint
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint(const asio::ip::address& addr, unsigned short port_num)$/;"	f	class:asio::ip::basic_endpoint
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:asio::ip::basic_endpoint
basic_endpoint	.\include\asio\ip\basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:asio::ip
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:asio::local::basic_endpoint
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint(basic_endpoint&& other)$/;"	f	class:asio::local::basic_endpoint
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:asio::local::basic_endpoint
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint(const char* path_name)$/;"	f	class:asio::local::basic_endpoint
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint(const std::string& path_name)$/;"	f	class:asio::local::basic_endpoint
basic_endpoint	.\include\asio\local\basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:asio::local
basic_errors	.\include\asio\error.hpp	/^enum basic_errors$/;"	g	namespace:asio::error
basic_handle	.\include\asio\windows\basic_handle.hpp	/^  basic_handle(asio::io_context& io_context,$/;"	f	class:asio::windows::basic_handle
basic_handle	.\include\asio\windows\basic_handle.hpp	/^  basic_handle(basic_handle&& other)$/;"	f	class:asio::windows::basic_handle
basic_handle	.\include\asio\windows\basic_handle.hpp	/^  explicit basic_handle(asio::io_context& io_context)$/;"	f	class:asio::windows::basic_handle
basic_handle	.\include\asio\windows\basic_handle.hpp	/^class basic_handle$/;"	c	namespace:asio::windows
basic_io_object	.\include\asio\basic_io_object.hpp	/^  basic_io_object(IoObjectService1& other_service,$/;"	f	class:asio::basic_io_object
basic_io_object	.\include\asio\basic_io_object.hpp	/^  basic_io_object(basic_io_object&& other)$/;"	f	class:asio::basic_io_object
basic_io_object	.\include\asio\basic_io_object.hpp	/^  explicit basic_io_object(asio::io_context& io_context)$/;"	f	class:asio::basic_io_object
basic_io_object	.\include\asio\basic_io_object.hpp	/^class basic_io_object$/;"	c	namespace:asio
basic_io_object	.\include\asio\basic_io_object.hpp	/^class basic_io_object<IoObjectService, true>$/;"	c	namespace:asio
basic_object_handle	.\include\asio\windows\basic_object_handle.hpp	/^  basic_object_handle(asio::io_context& io_context,$/;"	f	class:asio::windows::basic_object_handle
basic_object_handle	.\include\asio\windows\basic_object_handle.hpp	/^  basic_object_handle(basic_object_handle&& other)$/;"	f	class:asio::windows::basic_object_handle
basic_object_handle	.\include\asio\windows\basic_object_handle.hpp	/^  explicit basic_object_handle(asio::io_context& io_context)$/;"	f	class:asio::windows::basic_object_handle
basic_object_handle	.\include\asio\windows\basic_object_handle.hpp	/^class basic_object_handle$/;"	c	namespace:asio::windows
basic_random_access_handle	.\include\asio\windows\basic_random_access_handle.hpp	/^  basic_random_access_handle(asio::io_context& io_context,$/;"	f	class:asio::windows::basic_random_access_handle
basic_random_access_handle	.\include\asio\windows\basic_random_access_handle.hpp	/^  basic_random_access_handle(basic_random_access_handle&& other)$/;"	f	class:asio::windows::basic_random_access_handle
basic_random_access_handle	.\include\asio\windows\basic_random_access_handle.hpp	/^  explicit basic_random_access_handle(asio::io_context& io_context)$/;"	f	class:asio::windows::basic_random_access_handle
basic_random_access_handle	.\include\asio\windows\basic_random_access_handle.hpp	/^class basic_random_access_handle$/;"	c	namespace:asio::windows
basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^  basic_raw_socket(asio::io_context& io_context,$/;"	f	class:asio::basic_raw_socket
basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^  basic_raw_socket(basic_raw_socket&& other)$/;"	f	class:asio::basic_raw_socket
basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^  basic_raw_socket(basic_raw_socket<Protocol1 ASIO_SVC_TARG1>&& other,$/;"	f	class:asio::basic_raw_socket
basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^  explicit basic_raw_socket(asio::io_context& io_context)$/;"	f	class:asio::basic_raw_socket
basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^class basic_raw_socket$/;"	c	namespace:asio
basic_resolver	.\include\asio\ip\basic_resolver.hpp	/^  basic_resolver(basic_resolver&& other)$/;"	f	class:asio::ip::basic_resolver
basic_resolver	.\include\asio\ip\basic_resolver.hpp	/^  explicit basic_resolver(asio::io_context& io_context)$/;"	f	class:asio::ip::basic_resolver
basic_resolver	.\include\asio\ip\basic_resolver.hpp	/^class basic_resolver$/;"	c	namespace:asio::ip
basic_resolver_entry	.\include\asio\ip\basic_resolver_entry.hpp	/^  basic_resolver_entry()$/;"	f	class:asio::ip::basic_resolver_entry
basic_resolver_entry	.\include\asio\ip\basic_resolver_entry.hpp	/^  basic_resolver_entry(const endpoint_type& ep,$/;"	f	class:asio::ip::basic_resolver_entry
basic_resolver_entry	.\include\asio\ip\basic_resolver_entry.hpp	/^class basic_resolver_entry$/;"	c	namespace:asio::ip
basic_resolver_iterator	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator()$/;"	f	class:asio::ip::basic_resolver_iterator
basic_resolver_iterator	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator(basic_resolver_iterator&& other)$/;"	f	class:asio::ip::basic_resolver_iterator
basic_resolver_iterator	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator(const basic_resolver_iterator& other)$/;"	f	class:asio::ip::basic_resolver_iterator
basic_resolver_iterator	.\include\asio\ip\basic_resolver_iterator.hpp	/^class basic_resolver_iterator$/;"	c	namespace:asio::ip
basic_resolver_query	.\include\asio\ip\basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:asio::ip::basic_resolver_query
basic_resolver_query	.\include\asio\ip\basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& host, const std::string& service,$/;"	f	class:asio::ip::basic_resolver_query
basic_resolver_query	.\include\asio\ip\basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& service,$/;"	f	class:asio::ip::basic_resolver_query
basic_resolver_query	.\include\asio\ip\basic_resolver_query.hpp	/^class basic_resolver_query$/;"	c	namespace:asio::ip
basic_resolver_results	.\include\asio\ip\basic_resolver_results.hpp	/^  basic_resolver_results()$/;"	f	class:asio::ip::basic_resolver_results
basic_resolver_results	.\include\asio\ip\basic_resolver_results.hpp	/^  basic_resolver_results(basic_resolver_results&& other)$/;"	f	class:asio::ip::basic_resolver_results
basic_resolver_results	.\include\asio\ip\basic_resolver_results.hpp	/^  basic_resolver_results(const basic_resolver_results& other)$/;"	f	class:asio::ip::basic_resolver_results
basic_resolver_results	.\include\asio\ip\basic_resolver_results.hpp	/^class basic_resolver_results$/;"	c	namespace:asio::ip
basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket($/;"	f	class:asio::basic_seq_packet_socket
basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(asio::io_context& io_context,$/;"	f	class:asio::basic_seq_packet_socket
basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket(basic_seq_packet_socket&& other)$/;"	f	class:asio::basic_seq_packet_socket
basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^  explicit basic_seq_packet_socket(asio::io_context& io_context)$/;"	f	class:asio::basic_seq_packet_socket
basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^class basic_seq_packet_socket$/;"	c	namespace:asio
basic_serial_port	.\include\asio\basic_serial_port.hpp	/^  basic_serial_port(asio::io_context& io_context,$/;"	f	class:asio::basic_serial_port
basic_serial_port	.\include\asio\basic_serial_port.hpp	/^  basic_serial_port(basic_serial_port&& other)$/;"	f	class:asio::basic_serial_port
basic_serial_port	.\include\asio\basic_serial_port.hpp	/^  explicit basic_serial_port(asio::io_context& io_context)$/;"	f	class:asio::basic_serial_port
basic_serial_port	.\include\asio\basic_serial_port.hpp	/^  explicit basic_serial_port(asio::io_context& io_context,$/;"	f	class:asio::basic_serial_port
basic_serial_port	.\include\asio\basic_serial_port.hpp	/^class basic_serial_port$/;"	c	namespace:asio
basic_signal_set	.\include\asio\basic_signal_set.hpp	/^  basic_signal_set(asio::io_context& io_context, int signal_number_1)$/;"	f	class:asio::basic_signal_set
basic_signal_set	.\include\asio\basic_signal_set.hpp	/^  basic_signal_set(asio::io_context& io_context, int signal_number_1,$/;"	f	class:asio::basic_signal_set
basic_signal_set	.\include\asio\basic_signal_set.hpp	/^  explicit basic_signal_set(asio::io_context& io_context)$/;"	f	class:asio::basic_signal_set
basic_signal_set	.\include\asio\basic_signal_set.hpp	/^class basic_signal_set$/;"	c	namespace:asio
basic_socket	.\include\asio\basic_socket.hpp	/^  basic_socket(asio::io_context& io_context,$/;"	f	class:asio::basic_socket
basic_socket	.\include\asio\basic_socket.hpp	/^  basic_socket(basic_socket&& other)$/;"	f	class:asio::basic_socket
basic_socket	.\include\asio\basic_socket.hpp	/^  basic_socket(basic_socket<Protocol1 ASIO_SVC_TARG1>&& other,$/;"	f	class:asio::basic_socket
basic_socket	.\include\asio\basic_socket.hpp	/^  explicit basic_socket(asio::io_context& io_context)$/;"	f	class:asio::basic_socket
basic_socket	.\include\asio\basic_socket.hpp	/^class basic_socket$/;"	c	namespace:asio
basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^  basic_socket_acceptor($/;"	f	class:asio::basic_socket_acceptor
basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^  basic_socket_acceptor(asio::io_context& io_context,$/;"	f	class:asio::basic_socket_acceptor
basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^  basic_socket_acceptor(basic_socket_acceptor&& other)$/;"	f	class:asio::basic_socket_acceptor
basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^  explicit basic_socket_acceptor(asio::io_context& io_context)$/;"	f	class:asio::basic_socket_acceptor
basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^class basic_socket_acceptor$/;"	c	namespace:asio
basic_socket_iostream	.\include\asio\basic_socket_iostream.hpp	/^  basic_socket_iostream()$/;"	f	class:asio::basic_socket_iostream
basic_socket_iostream	.\include\asio\basic_socket_iostream.hpp	/^  basic_socket_iostream(basic_socket_iostream&& other)$/;"	f	class:asio::basic_socket_iostream
basic_socket_iostream	.\include\asio\basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T... x)$/;"	f	class:asio::basic_socket_iostream
basic_socket_iostream	.\include\asio\basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(basic_stream_socket<protocol_type> s)$/;"	f	class:asio::basic_socket_iostream
basic_socket_iostream	.\include\asio\basic_socket_iostream.hpp	/^class basic_socket_iostream$/;"	c	namespace:asio
basic_socket_streambuf	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf()$/;"	f	class:asio::basic_socket_streambuf
basic_socket_streambuf	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf(basic_socket_streambuf&& other)$/;"	f	class:asio::basic_socket_streambuf
basic_socket_streambuf	.\include\asio\basic_socket_streambuf.hpp	/^  explicit basic_socket_streambuf(basic_stream_socket<protocol_type> s)$/;"	f	class:asio::basic_socket_streambuf
basic_socket_streambuf	.\include\asio\basic_socket_streambuf.hpp	/^class basic_socket_streambuf$/;"	c	namespace:asio
basic_stream_descriptor	.\include\asio\posix\basic_stream_descriptor.hpp	/^  basic_stream_descriptor(asio::io_context& io_context,$/;"	f	class:asio::posix::basic_stream_descriptor
basic_stream_descriptor	.\include\asio\posix\basic_stream_descriptor.hpp	/^  basic_stream_descriptor(basic_stream_descriptor&& other)$/;"	f	class:asio::posix::basic_stream_descriptor
basic_stream_descriptor	.\include\asio\posix\basic_stream_descriptor.hpp	/^  explicit basic_stream_descriptor(asio::io_context& io_context)$/;"	f	class:asio::posix::basic_stream_descriptor
basic_stream_descriptor	.\include\asio\posix\basic_stream_descriptor.hpp	/^class basic_stream_descriptor$/;"	c	namespace:asio::posix
basic_stream_handle	.\include\asio\windows\basic_stream_handle.hpp	/^  basic_stream_handle(asio::io_context& io_context,$/;"	f	class:asio::windows::basic_stream_handle
basic_stream_handle	.\include\asio\windows\basic_stream_handle.hpp	/^  basic_stream_handle(basic_stream_handle&& other)$/;"	f	class:asio::windows::basic_stream_handle
basic_stream_handle	.\include\asio\windows\basic_stream_handle.hpp	/^  explicit basic_stream_handle(asio::io_context& io_context)$/;"	f	class:asio::windows::basic_stream_handle
basic_stream_handle	.\include\asio\windows\basic_stream_handle.hpp	/^class basic_stream_handle$/;"	c	namespace:asio::windows
basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^  basic_stream_socket($/;"	f	class:asio::basic_stream_socket
basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^  basic_stream_socket(asio::io_context& io_context,$/;"	f	class:asio::basic_stream_socket
basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^  basic_stream_socket(basic_stream_socket&& other)$/;"	f	class:asio::basic_stream_socket
basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^  explicit basic_stream_socket(asio::io_context& io_context)$/;"	f	class:asio::basic_stream_socket
basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^class basic_stream_socket$/;"	c	namespace:asio
basic_streambuf	.\include\asio\basic_streambuf.hpp	/^  explicit basic_streambuf($/;"	f	class:asio::basic_streambuf
basic_streambuf	.\include\asio\basic_streambuf.hpp	/^class basic_streambuf$/;"	c	namespace:asio
basic_streambuf_ref	.\include\asio\basic_streambuf.hpp	/^  explicit basic_streambuf_ref(basic_streambuf<Allocator>& sb)$/;"	f	class:asio::basic_streambuf_ref
basic_streambuf_ref	.\include\asio\basic_streambuf.hpp	/^class basic_streambuf_ref$/;"	c	namespace:asio
basic_waitable_timer	.\include\asio\basic_waitable_timer.hpp	/^  basic_waitable_timer(asio::io_context& io_context,$/;"	f	class:asio::basic_waitable_timer
basic_waitable_timer	.\include\asio\basic_waitable_timer.hpp	/^  basic_waitable_timer(basic_waitable_timer&& other)$/;"	f	class:asio::basic_waitable_timer
basic_waitable_timer	.\include\asio\basic_waitable_timer.hpp	/^  explicit basic_waitable_timer(asio::io_context& io_context)$/;"	f	class:asio::basic_waitable_timer
basic_waitable_timer	.\include\asio\basic_waitable_timer.hpp	/^class basic_waitable_timer$/;"	c	namespace:asio
basic_yield_context	.\include\asio\spawn.hpp	/^  basic_yield_context($/;"	f	class:asio::basic_yield_context
basic_yield_context	.\include\asio\spawn.hpp	/^  basic_yield_context(const basic_yield_context<OtherHandler>& other)$/;"	f	class:asio::basic_yield_context
basic_yield_context	.\include\asio\spawn.hpp	/^class basic_yield_context$/;"	c	namespace:asio
baud_rate	.\include\asio\impl\serial_port_base.hpp	/^inline serial_port_base::baud_rate::baud_rate(unsigned int rate)$/;"	f	class:asio::serial_port_base::baud_rate
baud_rate	.\include\asio\serial_port_base.hpp	/^  class baud_rate$/;"	c	class:asio::serial_port_base
begin	.\include\asio\buffers_iterator.hpp	/^  static buffers_iterator begin(const BufferSequence& buffers)$/;"	f	class:asio::buffers_iterator
begin	.\include\asio\detail\hash_map.hpp	/^  const_iterator begin() const$/;"	f	class:asio::detail::hash_map
begin	.\include\asio\detail\hash_map.hpp	/^  iterator begin()$/;"	f	class:asio::detail::hash_map
begin	.\include\asio\detail\reactor_op_queue.hpp	/^  iterator begin() { return operations_.begin(); }$/;"	f	class:asio::detail::reactor_op_queue
begin	.\include\asio\ip\basic_resolver_results.hpp	/^  const_iterator begin() const$/;"	f	class:asio::ip::basic_resolver_results
begin_	.\include\asio\buffers_iterator.hpp	/^  buffer_sequence_iterator_type begin_;$/;"	m	class:asio::buffers_iterator
begin_	.\include\asio\ip\address_v4_range.hpp	/^  iterator begin_;$/;"	m	class:asio::ip::basic_address_range
begin_	.\include\asio\ip\address_v6_range.hpp	/^  iterator begin_;$/;"	m	class:asio::ip::basic_address_range
begin_offset_	.\include\asio\detail\buffered_stream_storage.hpp	/^  size_type begin_offset_;$/;"	m	class:asio::detail::buffered_stream_storage
bind	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID bind(const endpoint_type& endpoint,$/;"	f	class:asio::basic_socket
bind	.\include\asio\basic_socket.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:asio::basic_socket
bind	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID bind(const endpoint_type& endpoint,$/;"	f	class:asio::basic_socket_acceptor
bind	.\include\asio\basic_socket_acceptor.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:asio::basic_socket_acceptor
bind	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID bind(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
bind	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code bind(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
bind	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code bind(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
bind	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code bind(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
bind	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code bind(implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service
bind	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID bind(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
bind	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID bind(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
bind	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID bind(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
bind	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID bind(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
bind_executor	.\include\asio\bind_executor.hpp	/^bind_executor(ExecutionContext& ctx, ASIO_MOVE_ARG(T) t,$/;"	f	namespace:asio
bind_executor	.\include\asio\bind_executor.hpp	/^bind_executor(const Executor& ex, ASIO_MOVE_ARG(T) t,$/;"	f	namespace:asio
binder1	.\include\asio\detail\bind_handler.hpp	/^  binder1(Handler& handler, const Arg1& arg1)$/;"	f	class:asio::detail::binder1
binder1	.\include\asio\detail\bind_handler.hpp	/^  binder1(binder1&& other)$/;"	f	class:asio::detail::binder1
binder1	.\include\asio\detail\bind_handler.hpp	/^  binder1(const binder1& other)$/;"	f	class:asio::detail::binder1
binder1	.\include\asio\detail\bind_handler.hpp	/^  binder1(int, ASIO_MOVE_ARG(T) handler, const Arg1& arg1)$/;"	f	class:asio::detail::binder1
binder1	.\include\asio\detail\bind_handler.hpp	/^class binder1$/;"	c	namespace:asio::detail
binder2	.\include\asio\detail\bind_handler.hpp	/^  binder2(Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:asio::detail::binder2
binder2	.\include\asio\detail\bind_handler.hpp	/^  binder2(binder2&& other)$/;"	f	class:asio::detail::binder2
binder2	.\include\asio\detail\bind_handler.hpp	/^  binder2(const binder2& other)$/;"	f	class:asio::detail::binder2
binder2	.\include\asio\detail\bind_handler.hpp	/^  binder2(int, ASIO_MOVE_ARG(T) handler,$/;"	f	class:asio::detail::binder2
binder2	.\include\asio\detail\bind_handler.hpp	/^class binder2$/;"	c	namespace:asio::detail
binder3	.\include\asio\detail\bind_handler.hpp	/^  binder3(Handler& handler, const Arg1& arg1,$/;"	f	class:asio::detail::binder3
binder3	.\include\asio\detail\bind_handler.hpp	/^  binder3(binder3&& other)$/;"	f	class:asio::detail::binder3
binder3	.\include\asio\detail\bind_handler.hpp	/^  binder3(const binder3& other)$/;"	f	class:asio::detail::binder3
binder3	.\include\asio\detail\bind_handler.hpp	/^  binder3(int, ASIO_MOVE_ARG(T) handler, const Arg1& arg1,$/;"	f	class:asio::detail::binder3
binder3	.\include\asio\detail\bind_handler.hpp	/^class binder3$/;"	c	namespace:asio::detail
binder4	.\include\asio\detail\bind_handler.hpp	/^  binder4(Handler& handler, const Arg1& arg1,$/;"	f	class:asio::detail::binder4
binder4	.\include\asio\detail\bind_handler.hpp	/^  binder4(binder4&& other)$/;"	f	class:asio::detail::binder4
binder4	.\include\asio\detail\bind_handler.hpp	/^  binder4(const binder4& other)$/;"	f	class:asio::detail::binder4
binder4	.\include\asio\detail\bind_handler.hpp	/^  binder4(int, ASIO_MOVE_ARG(T) handler, const Arg1& arg1,$/;"	f	class:asio::detail::binder4
binder4	.\include\asio\detail\bind_handler.hpp	/^class binder4$/;"	c	namespace:asio::detail
binder5	.\include\asio\detail\bind_handler.hpp	/^  binder5(Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:asio::detail::binder5
binder5	.\include\asio\detail\bind_handler.hpp	/^  binder5(binder5&& other)$/;"	f	class:asio::detail::binder5
binder5	.\include\asio\detail\bind_handler.hpp	/^  binder5(const binder5& other)$/;"	f	class:asio::detail::binder5
binder5	.\include\asio\detail\bind_handler.hpp	/^  binder5(int, ASIO_MOVE_ARG(T) handler, const Arg1& arg1,$/;"	f	class:asio::detail::binder5
binder5	.\include\asio\detail\bind_handler.hpp	/^class binder5$/;"	c	namespace:asio::detail
block	.\include\asio\detail\null_signal_blocker.hpp	/^  void block()$/;"	f	class:asio::detail::null_signal_blocker
block	.\include\asio\detail\posix_signal_blocker.hpp	/^  void block()$/;"	f	class:asio::detail::posix_signal_blocker
blocked_	.\include\asio\detail\posix_signal_blocker.hpp	/^  bool blocked_;$/;"	m	class:asio::detail::posix_signal_blocker
bmi08x_accel_int_channel	.\include\bmi08x_defs.h	/^enum bmi08x_accel_int_channel {$/;"	g
bmi08x_accel_int_channel_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_accel_int_channel_cfg {$/;"	s
bmi08x_accel_int_types	.\include\bmi08x_defs.h	/^enum bmi08x_accel_int_types {$/;"	g
bmi08x_anymotion_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_anymotion_cfg {$/;"	s
bmi08x_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_cfg {$/;"	s
bmi08x_com_fptr_t	.\include\bmi08x_defs.h	/^typedef int8_t (*bmi08x_com_fptr_t)(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len);$/;"	t
bmi08x_data_sync_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_data_sync_cfg {$/;"	s
bmi08x_delay_fptr_t	.\include\bmi08x_defs.h	/^typedef void (*bmi08x_delay_fptr_t)(uint32_t period);$/;"	t
bmi08x_dev	.\include\bmi08x_defs.h	/^struct bmi08x_dev {$/;"	s
bmi08x_err_reg	.\include\bmi08x_defs.h	/^struct bmi08x_err_reg {$/;"	s
bmi08x_gyro_int_channel	.\include\bmi08x_defs.h	/^enum bmi08x_gyro_int_channel {$/;"	g
bmi08x_gyro_int_channel_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_gyro_int_channel_cfg {$/;"	s
bmi08x_gyro_int_types	.\include\bmi08x_defs.h	/^enum bmi08x_gyro_int_types {$/;"	g
bmi08x_int_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_int_cfg {$/;"	s
bmi08x_int_pin_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_int_pin_cfg {$/;"	s
bmi08x_intf	.\include\bmi08x_defs.h	/^enum bmi08x_intf {$/;"	g
bmi08x_sensor_data	.\include\bmi08x_defs.h	/^struct bmi08x_sensor_data {$/;"	s
bmi08x_sensor_data_f	.\include\bmi08x_defs.h	/^struct bmi08x_sensor_data_f {$/;"	s
board	.\include\udp_if.hpp	/^	board_if* board;$/;"	m	class:udp_if
board_command_list_t	.\include\global_types.hpp	/^struct board_command_list_t$/;"	s
board_command_t	.\include\global_types.hpp	/^struct board_command_t$/;"	s
board_if	.\include\board_if.hpp	/^class board_if$/;"	c
board_if	.\source\board_if.cpp	/^board_if::board_if(unsigned s_id)$/;"	f	class:board_if
board_info_state	.\include\global_types.hpp	/^	board_info_state,$/;"	e	enum:udp_states
board_msg_t	.\include\global_types.hpp	/^struct board_msg_t$/;"	s
board_msg_t	.\source\udp_server.h	/^struct board_msg_t$/;"	s
board_msg_t	.\test\udp_server.h	/^struct board_msg_t$/;"	s
boardinfo_cmd	.\include\global_types.hpp	/^    const std::string boardinfo_cmd;$/;"	m	class:messages
boardinfo_rsp	.\include\global_types.hpp	/^    const std::string boardinfo_rsp;$/;"	m	class:messages
boolean	.\include\asio\detail\socket_option.hpp	/^  boolean()$/;"	f	class:asio::detail::socket_option::boolean
boolean	.\include\asio\detail\socket_option.hpp	/^  explicit boolean(bool v)$/;"	f	class:asio::detail::socket_option::boolean
boolean	.\include\asio\detail\socket_option.hpp	/^class boolean$/;"	c	namespace:asio::detail::socket_option
boost	.\include\asio\detail\array_fwd.hpp	/^namespace boost {$/;"	n
boost	.\include\asio\detail\date_time_fwd.hpp	/^namespace boost {$/;"	n
boost	.\include\asio\detail\regex_fwd.hpp	/^namespace boost {$/;"	n
broadcast	.\include\asio\ip\address_v4.hpp	/^  static address_v4 broadcast()$/;"	f	class:asio::ip::address_v4
broadcast	.\include\asio\socket_base.hpp	/^      broadcast;$/;"	t	class:asio::socket_base
broadcast	.\include\asio\socket_base.hpp	/^  typedef implementation_defined broadcast;$/;"	t	class:asio::socket_base
broken_pipe	.\include\asio\error.hpp	/^  broken_pipe = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
bucket_type	.\include\asio\detail\hash_map.hpp	/^  struct bucket_type$/;"	s	class:asio::detail::hash_map
buckets_	.\include\asio\detail\hash_map.hpp	/^  bucket_type* buckets_;$/;"	m	class:asio::detail::hash_map
buf	.\include\asio\detail\descriptor_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:asio::detail::descriptor_ops
buf	.\include\asio\detail\socket_ops.hpp	/^typedef WSABUF buf;$/;"	t	namespace:asio::detail::socket_ops
buf	.\include\asio\detail\socket_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:asio::detail::socket_ops
buf_	.\include\asio\buffer.hpp	/^  mutable_buffer buf_;$/;"	m	class:asio::null_buffers
buffer_	.\include\asio\basic_streambuf.hpp	/^  std::vector<char_type, Allocator> buffer_;$/;"	m	class:asio::basic_streambuf
buffer_	.\include\asio\detail\buffer_resize_guard.hpp	/^  Buffer& buffer_;$/;"	m	class:asio::detail::buffer_resize_guard
buffer_	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  native_buffer_type buffer_;$/;"	m	class:asio::detail::buffer_sequence_adapter
buffer_	.\include\asio\detail\buffered_stream_storage.hpp	/^  std::vector<byte_type> buffer_;$/;"	m	class:asio::detail::buffered_stream_storage
buffer_	.\include\asio\detail\consuming_buffers.hpp	/^  Buffer buffer_;$/;"	m	class:asio::detail::consuming_single_buffer
buffer_copy_1	.\include\asio\buffer.hpp	/^inline std::size_t buffer_copy_1(const mutable_buffer& target,$/;"	f	namespace:asio::detail
buffer_debug_check	.\include\asio\buffer.hpp	/^  buffer_debug_check(Iterator iter)$/;"	f	class:asio::detail::buffer_debug_check
buffer_debug_check	.\include\asio\buffer.hpp	/^class buffer_debug_check$/;"	c	namespace:asio::detail
buffer_delta	.\include\asio\basic_streambuf.hpp	/^  enum { buffer_delta = 128 };$/;"	e	enum:asio::basic_streambuf::__anon3
buffer_dup	.\include\asio\detail\winrt_utils.hpp	/^inline Windows::Storage::Streams::IBuffer^ buffer_dup($/;"	f	namespace:asio::detail::winrt_utils
buffer_resize_guard	.\include\asio\detail\buffer_resize_guard.hpp	/^  buffer_resize_guard(Buffer& buffer)$/;"	f	class:asio::detail::buffer_resize_guard
buffer_resize_guard	.\include\asio\detail\buffer_resize_guard.hpp	/^class buffer_resize_guard$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  explicit buffer_sequence_adapter($/;"	f	class:asio::detail::buffer_sequence_adapter
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  explicit buffer_sequence_adapter(const Buffers& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, asio::const_buffer>$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, asio::const_buffers_1>$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, asio::mutable_buffer>$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, asio::mutable_buffers_1>$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, boost::array<Elem, 2> >$/;"	c	namespace:asio::detail
buffer_sequence_adapter	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter<Buffer, std::array<Elem, 2> >$/;"	c	namespace:asio::detail
buffer_sequence_adapter_base	.\include\asio\detail\buffer_sequence_adapter.hpp	/^class buffer_sequence_adapter_base$/;"	c	namespace:asio::detail
buffer_sequence_begin	.\include\asio\buffer.hpp	/^inline const const_buffer* buffer_sequence_begin(const const_buffer& b)$/;"	f	namespace:asio
buffer_sequence_begin	.\include\asio\buffer.hpp	/^inline const mutable_buffer* buffer_sequence_begin(const mutable_buffer& b)$/;"	f	namespace:asio
buffer_sequence_begin	.\include\asio\buffer.hpp	/^inline typename C::const_iterator buffer_sequence_begin(const C& c)$/;"	f	namespace:asio
buffer_sequence_begin	.\include\asio\buffer.hpp	/^inline typename C::iterator buffer_sequence_begin(C& c)$/;"	f	namespace:asio
buffer_sequence_cardinality	.\include\asio\buffer.hpp	/^struct buffer_sequence_cardinality :$/;"	s	namespace:asio::detail
buffer_sequence_end	.\include\asio\buffer.hpp	/^inline const const_buffer* buffer_sequence_end(const const_buffer& b)$/;"	f	namespace:asio
buffer_sequence_end	.\include\asio\buffer.hpp	/^inline const mutable_buffer* buffer_sequence_end(const mutable_buffer& b)$/;"	f	namespace:asio
buffer_sequence_end	.\include\asio\buffer.hpp	/^inline typename C::const_iterator buffer_sequence_end(const C& c)$/;"	f	namespace:asio
buffer_sequence_end	.\include\asio\buffer.hpp	/^inline typename C::iterator buffer_sequence_end(C& c)$/;"	f	namespace:asio
buffer_sequence_iterator_type	.\include\asio\buffers_iterator.hpp	/^          ByteType>::const_iterator buffer_sequence_iterator_type;$/;"	t	class:asio::buffers_iterator
buffer_sequence_memfns_base	.\include\asio\detail\is_buffer_sequence.hpp	/^struct buffer_sequence_memfns_base$/;"	s	namespace:asio::detail
buffer_sequence_memfns_check	.\include\asio\detail\is_buffer_sequence.hpp	/^struct buffer_sequence_memfns_check$/;"	s	namespace:asio::detail
buffer_sequence_memfns_derived	.\include\asio\detail\is_buffer_sequence.hpp	/^struct buffer_sequence_memfns_derived$/;"	s	namespace:asio::detail
buffer_size	.\include\asio\basic_socket_streambuf.hpp	/^  enum { buffer_size = 512 };$/;"	e	enum:asio::detail::socket_streambuf_buffers::__anon1
buffer_type	.\include\asio\buffer.hpp	/^  typedef const_buffer buffer_type;$/;"	t	struct:asio::detail::buffer_types_base
buffer_type	.\include\asio\buffer.hpp	/^  typedef mutable_buffer buffer_type;$/;"	t	struct:asio::detail::buffer_types_base
buffer_type	.\include\asio\buffers_iterator.hpp	/^      BufferSequence, ByteType>::buffer_type buffer_type;$/;"	t	class:asio::buffers_iterator
buffer_type	.\include\asio\buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:asio::detail::buffers_iterator_types
buffer_type	.\include\asio\buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:asio::detail::buffers_iterator_types_helper
buffer_type	.\include\asio\buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:asio::detail::buffers_iterator_types
buffer_type	.\include\asio\buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:asio::detail::buffers_iterator_types_helper
buffer_type	.\include\asio\buffers_iterator.hpp	/^    typedef typename helper::buffer_type buffer_type;$/;"	t	struct:asio::detail::buffers_iterator_types
buffer_types	.\include\asio\buffer.hpp	/^struct buffer_types$/;"	s	namespace:asio::detail
buffer_types_base	.\include\asio\buffer.hpp	/^struct buffer_types_base<false>$/;"	s	namespace:asio::detail
buffer_types_base	.\include\asio\buffer.hpp	/^struct buffer_types_base<true>$/;"	s	namespace:asio::detail
buffered_fill_handler	.\include\asio\impl\buffered_read_stream.hpp	/^    buffered_fill_handler(buffered_fill_handler&& other)$/;"	f	class:asio::detail::buffered_fill_handler
buffered_fill_handler	.\include\asio\impl\buffered_read_stream.hpp	/^    buffered_fill_handler(const buffered_fill_handler& other)$/;"	f	class:asio::detail::buffered_fill_handler
buffered_fill_handler	.\include\asio\impl\buffered_read_stream.hpp	/^    buffered_fill_handler(detail::buffered_stream_storage& storage,$/;"	f	class:asio::detail::buffered_fill_handler
buffered_fill_handler	.\include\asio\impl\buffered_read_stream.hpp	/^  class buffered_fill_handler$/;"	c	namespace:asio::detail
buffered_flush_handler	.\include\asio\impl\buffered_write_stream.hpp	/^    buffered_flush_handler(buffered_flush_handler&& other)$/;"	f	class:asio::detail::buffered_flush_handler
buffered_flush_handler	.\include\asio\impl\buffered_write_stream.hpp	/^    buffered_flush_handler(const buffered_flush_handler& other)$/;"	f	class:asio::detail::buffered_flush_handler
buffered_flush_handler	.\include\asio\impl\buffered_write_stream.hpp	/^    buffered_flush_handler(detail::buffered_stream_storage& storage,$/;"	f	class:asio::detail::buffered_flush_handler
buffered_flush_handler	.\include\asio\impl\buffered_write_stream.hpp	/^  class buffered_flush_handler$/;"	c	namespace:asio::detail
buffered_handshake_op	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  buffered_handshake_op(stream_base::handshake_type type,$/;"	f	class:asio::ssl::detail::buffered_handshake_op
buffered_handshake_op	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^class buffered_handshake_op$/;"	c	namespace:asio::ssl::detail
buffered_read_some_handler	.\include\asio\impl\buffered_read_stream.hpp	/^      buffered_read_some_handler(buffered_read_some_handler&& other)$/;"	f	class:asio::detail::buffered_read_some_handler
buffered_read_some_handler	.\include\asio\impl\buffered_read_stream.hpp	/^      buffered_read_some_handler(const buffered_read_some_handler& other)$/;"	f	class:asio::detail::buffered_read_some_handler
buffered_read_some_handler	.\include\asio\impl\buffered_read_stream.hpp	/^    buffered_read_some_handler(detail::buffered_stream_storage& storage,$/;"	f	class:asio::detail::buffered_read_some_handler
buffered_read_some_handler	.\include\asio\impl\buffered_read_stream.hpp	/^  class buffered_read_some_handler$/;"	c	namespace:asio::detail
buffered_read_stream	.\include\asio\buffered_read_stream.hpp	/^  buffered_read_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:asio::buffered_read_stream
buffered_read_stream	.\include\asio\buffered_read_stream.hpp	/^  explicit buffered_read_stream(Arg& a)$/;"	f	class:asio::buffered_read_stream
buffered_read_stream	.\include\asio\buffered_read_stream.hpp	/^class buffered_read_stream$/;"	c	namespace:asio
buffered_stream	.\include\asio\buffered_stream.hpp	/^  explicit buffered_stream(Arg& a)$/;"	f	class:asio::buffered_stream
buffered_stream	.\include\asio\buffered_stream.hpp	/^  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,$/;"	f	class:asio::buffered_stream
buffered_stream	.\include\asio\buffered_stream.hpp	/^class buffered_stream$/;"	c	namespace:asio
buffered_stream_storage	.\include\asio\detail\buffered_stream_storage.hpp	/^  explicit buffered_stream_storage(std::size_t buffer_capacity)$/;"	f	class:asio::detail::buffered_stream_storage
buffered_stream_storage	.\include\asio\detail\buffered_stream_storage.hpp	/^class buffered_stream_storage$/;"	c	namespace:asio::detail
buffered_write_some_handler	.\include\asio\impl\buffered_write_stream.hpp	/^      buffered_write_some_handler(buffered_write_some_handler&& other)$/;"	f	class:asio::detail::buffered_write_some_handler
buffered_write_some_handler	.\include\asio\impl\buffered_write_stream.hpp	/^      buffered_write_some_handler(const buffered_write_some_handler& other)$/;"	f	class:asio::detail::buffered_write_some_handler
buffered_write_some_handler	.\include\asio\impl\buffered_write_stream.hpp	/^    buffered_write_some_handler(detail::buffered_stream_storage& storage,$/;"	f	class:asio::detail::buffered_write_some_handler
buffered_write_some_handler	.\include\asio\impl\buffered_write_stream.hpp	/^  class buffered_write_some_handler$/;"	c	namespace:asio::detail
buffered_write_stream	.\include\asio\buffered_write_stream.hpp	/^  buffered_write_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:asio::buffered_write_stream
buffered_write_stream	.\include\asio\buffered_write_stream.hpp	/^  explicit buffered_write_stream(Arg& a)$/;"	f	class:asio::buffered_write_stream
buffered_write_stream	.\include\asio\buffered_write_stream.hpp	/^class buffered_write_stream$/;"	c	namespace:asio
buffers	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  native_buffer_type* buffers()$/;"	f	class:asio::detail::buffer_sequence_adapter
buffers_	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  native_buffer_type buffers_[2];$/;"	m	class:asio::detail::buffer_sequence_adapter
buffers_	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  native_buffer_type buffers_[max_buffers];$/;"	m	class:asio::detail::buffer_sequence_adapter
buffers_	.\include\asio\detail\consuming_buffers.hpp	/^  Buffers buffers_;$/;"	m	struct:asio::detail::prepared_buffers
buffers_	.\include\asio\detail\consuming_buffers.hpp	/^  boost::array<Elem, 2> buffers_;$/;"	m	class:asio::detail::consuming_buffers
buffers_	.\include\asio\detail\consuming_buffers.hpp	/^  std::array<Elem, 2> buffers_;$/;"	m	class:asio::detail::consuming_buffers
buffers_	.\include\asio\detail\descriptor_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::descriptor_read_op_base
buffers_	.\include\asio\detail\descriptor_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::descriptor_write_op_base
buffers_	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::reactive_socket_recv_op_base
buffers_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op_base
buffers_	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::reactive_socket_recvmsg_op_base
buffers_	.\include\asio\detail\reactive_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::reactive_socket_send_op_base
buffers_	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::reactive_socket_sendto_op_base
buffers_	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_handle_read_op
buffers_	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_handle_write_op
buffers_	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_socket_recv_op
buffers_	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_socket_recvfrom_op
buffers_	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_socket_recvmsg_op
buffers_	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::win_iocp_socket_send_op
buffers_	.\include\asio\detail\winrt_socket_recv_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::detail::winrt_socket_recv_op
buffers_	.\include\asio\detail\winrt_socket_send_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::detail::winrt_socket_send_op
buffers_	.\include\asio\impl\buffered_read_stream.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:asio::detail::buffered_read_some_handler
buffers_	.\include\asio\impl\buffered_write_stream.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:asio::detail::buffered_write_some_handler
buffers_	.\include\asio\impl\read.hpp	/^        MutableBufferSequence, MutableBufferIterator> buffers_;$/;"	m	class:asio::detail::read_op
buffers_	.\include\asio\impl\read.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::read_dynbuf_op
buffers_	.\include\asio\impl\read_at.hpp	/^        MutableBufferSequence, MutableBufferIterator> buffers_;$/;"	m	class:asio::detail::read_at_op
buffers_	.\include\asio\impl\read_until.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::read_until_delim_op
buffers_	.\include\asio\impl\read_until.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::read_until_delim_string_op
buffers_	.\include\asio\impl\read_until.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::read_until_expr_op
buffers_	.\include\asio\impl\read_until.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::read_until_match_op
buffers_	.\include\asio\impl\write.hpp	/^        ConstBufferSequence, ConstBufferIterator> buffers_;$/;"	m	class:asio::detail::write_op
buffers_	.\include\asio\impl\write.hpp	/^    DynamicBuffer buffers_;$/;"	m	class:asio::detail::write_dynbuf_op
buffers_	.\include\asio\impl\write_at.hpp	/^        ConstBufferSequence, ConstBufferIterator> buffers_;$/;"	m	class:asio::detail::write_at_op
buffers_	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::ssl::detail::buffered_handshake_op
buffers_	.\include\asio\ssl\detail\read_op.hpp	/^  MutableBufferSequence buffers_;$/;"	m	class:asio::ssl::detail::read_op
buffers_	.\include\asio\ssl\detail\write_op.hpp	/^  ConstBufferSequence buffers_;$/;"	m	class:asio::ssl::detail::write_op
buffers_begin	.\include\asio\buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_begin($/;"	f	namespace:asio
buffers_end	.\include\asio\buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_end($/;"	f	namespace:asio
buffers_iterator	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator()$/;"	f	class:asio::buffers_iterator
buffers_iterator	.\include\asio\buffers_iterator.hpp	/^class buffers_iterator$/;"	c	namespace:asio
buffers_iterator_types	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types$/;"	s	namespace:asio::detail
buffers_iterator_types	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types<const_buffer, ByteType>$/;"	s	namespace:asio::detail
buffers_iterator_types	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types<const_buffers_1, ByteType>$/;"	s	namespace:asio::detail
buffers_iterator_types	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types<mutable_buffer, ByteType>$/;"	s	namespace:asio::detail
buffers_iterator_types	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types<mutable_buffers_1, ByteType>$/;"	s	namespace:asio::detail
buffers_iterator_types_helper	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<false>$/;"	s	namespace:asio::detail
buffers_iterator_types_helper	.\include\asio\buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<true>$/;"	s	namespace:asio::detail
bw	.\include\bmi08x_defs.h	/^uint8_t bw;$/;"	m	struct:bmi08x_cfg
byte_type	.\include\asio\buffers_iterator.hpp	/^    struct byte_type$/;"	s	struct:asio::detail::buffers_iterator_types_helper
byte_type	.\include\asio\buffers_iterator.hpp	/^    typedef ByteType byte_type;$/;"	t	struct:asio::detail::buffers_iterator_types
byte_type	.\include\asio\buffers_iterator.hpp	/^    typedef typename add_const<ByteType>::type byte_type;$/;"	t	struct:asio::detail::buffers_iterator_types
byte_type	.\include\asio\buffers_iterator.hpp	/^    typedef typename helper::template byte_type<ByteType>::type byte_type;$/;"	t	struct:asio::detail::buffers_iterator_types
byte_type	.\include\asio\detail\buffered_stream_storage.hpp	/^  typedef unsigned char byte_type;$/;"	t	class:asio::detail::buffered_stream_storage
bytes_readable	.\include\asio\detail\io_control.hpp	/^  bytes_readable()$/;"	f	class:asio::detail::io_control::bytes_readable
bytes_readable	.\include\asio\detail\io_control.hpp	/^  bytes_readable(std::size_t value)$/;"	f	class:asio::detail::io_control::bytes_readable
bytes_readable	.\include\asio\detail\io_control.hpp	/^class bytes_readable$/;"	c	namespace:asio::detail::io_control
bytes_readable	.\include\asio\posix\descriptor_base.hpp	/^  typedef asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:asio::posix::descriptor_base
bytes_readable	.\include\asio\posix\descriptor_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:asio::posix::descriptor_base
bytes_readable	.\include\asio\socket_base.hpp	/^  typedef asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:asio::socket_base
bytes_readable	.\include\asio\socket_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:asio::socket_base
bytes_transferred	.\include\asio\placeholders.hpp	/^unspecified bytes_transferred;$/;"	m	namespace:asio::placeholders
bytes_transferred_	.\include\asio\detail\reactor_op.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:asio::detail::reactor_op
bytes_transferred_	.\include\asio\ssl\detail\io.hpp	/^  std::size_t bytes_transferred_;$/;"	m	class:asio::ssl::detail::io_op
bytes_type	.\include\asio\ip\address_v4.hpp	/^  typedef array<unsigned char, 4> bytes_type;$/;"	t	class:asio::ip::address_v4
bytes_type	.\include\asio\ip\address_v4.hpp	/^  typedef asio::detail::array<unsigned char, 4> bytes_type;$/;"	t	class:asio::ip::address_v4
bytes_type	.\include\asio\ip\address_v6.hpp	/^  typedef array<unsigned char, 16> bytes_type;$/;"	t	class:asio::ip::address_v6
ca_	.\include\asio\impl\spawn.hpp	/^    typename basic_yield_context<Handler>::caller_type& ca_;$/;"	m	class:asio::detail::coro_async_result
ca_	.\include\asio\impl\spawn.hpp	/^    typename basic_yield_context<Handler>::caller_type& ca_;$/;"	m	class:asio::detail::coro_handler
ca_	.\include\asio\spawn.hpp	/^  caller_type& ca_;$/;"	m	class:asio::basic_yield_context
calculate_hash_value	.\include\asio\detail\hash_map.hpp	/^inline std::size_t calculate_hash_value(SOCKET s)$/;"	f	namespace:asio::detail
calculate_hash_value	.\include\asio\detail\hash_map.hpp	/^inline std::size_t calculate_hash_value(int i)$/;"	f	namespace:asio::detail
calculate_hash_value	.\include\asio\detail\hash_map.hpp	/^inline std::size_t calculate_hash_value(void* p)$/;"	f	namespace:asio::detail
call	.\include\asio\ssl\detail\password_callback.hpp	/^  virtual std::string call(std::size_t size,$/;"	f	class:asio::ssl::detail::password_callback
call	.\include\asio\ssl\detail\verify_callback.hpp	/^  virtual bool call(bool preverified, verify_context& ctx)$/;"	f	class:asio::ssl::detail::verify_callback
call_connect_condition	.\include\asio\impl\connect.hpp	/^  inline Iterator call_connect_condition(ConnectCondition& connect_condition,$/;"	f	namespace:asio::detail
call_handler	.\include\asio\impl\spawn.hpp	/^        bool call_handler, ASIO_MOVE_ARG(Func) function)$/;"	m	struct:asio::detail::spawn_data
call_handler	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:asio::ssl::detail::buffered_handshake_op
call_handler	.\include\asio\ssl\detail\handshake_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:asio::ssl::detail::handshake_op
call_handler	.\include\asio\ssl\detail\read_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:asio::ssl::detail::read_op
call_handler	.\include\asio\ssl\detail\shutdown_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:asio::ssl::detail::shutdown_op
call_handler	.\include\asio\ssl\detail\write_op.hpp	/^  void call_handler(Handler& handler,$/;"	f	class:asio::ssl::detail::write_op
call_handler_	.\include\asio\impl\spawn.hpp	/^    bool call_handler_;$/;"	m	struct:asio::detail::spawn_data
call_stack	.\include\asio\detail\call_stack.hpp	/^class call_stack$/;"	c	namespace:asio::detail
callback_	.\include\asio\ssl\detail\password_callback.hpp	/^  PasswordCallback callback_;$/;"	m	class:asio::ssl::detail::password_callback
callback_	.\include\asio\ssl\detail\verify_callback.hpp	/^  VerifyCallback callback_;$/;"	m	class:asio::ssl::detail::verify_callback
callee_type	.\include\asio\spawn.hpp	/^  typedef implementation_defined callee_type;$/;"	t	class:asio::basic_yield_context
caller	.\include\asio\experimental\impl\co_spawn.hpp	/^  coroutine_handle<void> caller()$/;"	f	class:asio::experimental::detail::awaitee_base
caller_	.\include\asio\experimental\impl\co_spawn.hpp	/^  coroutine_handle<void> caller_ = nullptr;$/;"	m	class:asio::experimental::detail::awaitee_base
caller_type	.\include\asio\spawn.hpp	/^  typedef boost::coroutines::coroutine<void()>::caller_type caller_type;$/;"	t	class:asio::basic_yield_context
caller_type	.\include\asio\spawn.hpp	/^  typedef boost::coroutines::pull_coroutine<void> caller_type;$/;"	t	class:asio::basic_yield_context
caller_type	.\include\asio\spawn.hpp	/^  typedef implementation_defined caller_type;$/;"	t	class:asio::basic_yield_context
can_dispatch	.\include\asio\detail\scheduler.hpp	/^  bool can_dispatch()$/;"	f	class:asio::detail::scheduler
can_dispatch	.\include\asio\detail\win_iocp_io_context.hpp	/^  bool can_dispatch()$/;"	f	class:asio::detail::win_iocp_io_context
cancel	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t cancel()$/;"	f	class:asio::basic_deadline_timer
cancel	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t cancel(asio::error_code& ec)$/;"	f	class:asio::basic_deadline_timer
cancel	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::basic_serial_port
cancel	.\include\asio\basic_serial_port.hpp	/^  void cancel()$/;"	f	class:asio::basic_serial_port
cancel	.\include\asio\basic_signal_set.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::basic_signal_set
cancel	.\include\asio\basic_signal_set.hpp	/^  void cancel()$/;"	f	class:asio::basic_signal_set
cancel	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::basic_socket
cancel	.\include\asio\basic_socket.hpp	/^  void cancel()$/;"	f	class:asio::basic_socket
cancel	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
cancel	.\include\asio\basic_socket_acceptor.hpp	/^  void cancel()$/;"	f	class:asio::basic_socket_acceptor
cancel	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t cancel()$/;"	f	class:asio::basic_waitable_timer
cancel	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t cancel(asio::error_code& ec)$/;"	f	class:asio::basic_waitable_timer
cancel	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
cancel	.\include\asio\deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::deadline_timer_service
cancel	.\include\asio\detail\deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::detail::deadline_timer_service
cancel	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code cancel(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
cancel	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code cancel(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
cancel	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code cancel(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
cancel	.\include\asio\detail\winrt_resolver_service.hpp	/^  void cancel(implementation_type&)$/;"	f	class:asio::detail::winrt_resolver_service
cancel	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::error_code cancel(base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
cancel	.\include\asio\ip\basic_resolver.hpp	/^  void cancel()$/;"	f	class:asio::ip::basic_resolver
cancel	.\include\asio\ip\resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:asio::ip::resolver_service
cancel	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::posix::basic_descriptor
cancel	.\include\asio\posix\basic_descriptor.hpp	/^  void cancel()$/;"	f	class:asio::posix::basic_descriptor
cancel	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::posix::descriptor
cancel	.\include\asio\posix\descriptor.hpp	/^  void cancel()$/;"	f	class:asio::posix::descriptor
cancel	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
cancel	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
cancel	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
cancel	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::serial_port_service
cancel	.\include\asio\signal_set_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::signal_set_service
cancel	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
cancel	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
cancel	.\include\asio\waitable_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::waitable_timer_service
cancel	.\include\asio\windows\basic_handle.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::windows::basic_handle
cancel	.\include\asio\windows\basic_handle.hpp	/^  void cancel()$/;"	f	class:asio::windows::basic_handle
cancel	.\include\asio\windows\object_handle_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
cancel	.\include\asio\windows\overlapped_handle.hpp	/^  ASIO_SYNC_OP_VOID cancel(asio::error_code& ec)$/;"	f	class:asio::windows::overlapped_handle
cancel	.\include\asio\windows\overlapped_handle.hpp	/^  void cancel()$/;"	f	class:asio::windows::overlapped_handle
cancel	.\include\asio\windows\random_access_handle_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
cancel	.\include\asio\windows\stream_handle_service.hpp	/^  ASIO_SYNC_OP_VOID cancel(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
cancel_one	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:asio::basic_deadline_timer
cancel_one	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t cancel_one(asio::error_code& ec)$/;"	f	class:asio::basic_deadline_timer
cancel_one	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t cancel_one()$/;"	f	class:asio::basic_waitable_timer
cancel_one	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t cancel_one(asio::error_code& ec)$/;"	f	class:asio::basic_waitable_timer
cancel_one	.\include\asio\deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:asio::deadline_timer_service
cancel_one	.\include\asio\detail\deadline_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
cancel_one	.\include\asio\waitable_timer_service.hpp	/^  std::size_t cancel_one(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
cancel_operations	.\include\asio\detail\reactor_op_queue.hpp	/^  bool cancel_operations(Descriptor descriptor, op_queue<operation>& ops,$/;"	f	class:asio::detail::reactor_op_queue
cancel_operations	.\include\asio\detail\reactor_op_queue.hpp	/^  bool cancel_operations(iterator i, op_queue<operation>& ops,$/;"	f	class:asio::detail::reactor_op_queue
cancel_timer	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^std::size_t dev_poll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::dev_poll_reactor
cancel_timer	.\include\asio\detail\impl\epoll_reactor.hpp	/^std::size_t epoll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::epoll_reactor
cancel_timer	.\include\asio\detail\impl\kqueue_reactor.hpp	/^std::size_t kqueue_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::kqueue_reactor
cancel_timer	.\include\asio\detail\impl\select_reactor.hpp	/^std::size_t select_reactor::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::select_reactor
cancel_timer	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^std::size_t win_iocp_io_context::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::win_iocp_io_context
cancel_timer	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^std::size_t winrt_timer_scheduler::cancel_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::winrt_timer_scheduler
cancel_timer	.\include\asio\detail\timer_queue.hpp	/^  std::size_t cancel_timer(per_timer_data& timer, op_queue<operation>& ops,$/;"	f	class:asio::detail::timer_queue
cancel_token_	.\include\asio\detail\resolve_endpoint_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::resolve_endpoint_op
cancel_token_	.\include\asio\detail\resolve_query_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::resolve_query_op
cancel_token_	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_null_buffers_op
cancel_token_	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_socket_recv_op
cancel_token_	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_socket_recvfrom_op
cancel_token_	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_socket_recvmsg_op
cancel_token_	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_socket_send_op
cancel_token_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    socket_ops::shared_cancel_token_type cancel_token_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
cancel_token_	.\include\asio\detail\win_iocp_wait_op.hpp	/^  socket_ops::weak_cancel_token_type cancel_token_;$/;"	m	class:asio::detail::win_iocp_wait_op
canonical_name	.\include\asio\ip\resolver_base.hpp	/^  static const flags canonical_name = implementation_defined;$/;"	m	class:asio::ip::resolver_base
capacity	.\include\asio\detail\buffered_stream_storage.hpp	/^  size_type capacity() const$/;"	f	class:asio::detail::buffered_stream_storage
capacity	.\include\asio\generic\basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::generic::basic_endpoint
capacity	.\include\asio\generic\detail\endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::generic::detail::endpoint
capacity	.\include\asio\ip\basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::ip::basic_endpoint
capacity	.\include\asio\ip\detail\endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::ip::detail::endpoint
capacity	.\include\asio\local\basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::local::basic_endpoint
capacity	.\include\asio\local\detail\endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:asio::local::detail::endpoint
capacity_	.\include\asio\detail\win_fd_set_adapter.hpp	/^  u_int capacity_;$/;"	m	class:asio::detail::win_fd_set_adapter
category	.\include\asio\error_code.hpp	/^  const error_category& category() const$/;"	f	class:asio::error_code
category_	.\include\asio\error_code.hpp	/^  const error_category* category_;$/;"	m	class:asio::error_code
cbegin	.\include\asio\ip\basic_resolver_results.hpp	/^  const_iterator cbegin() const$/;"	f	class:asio::ip::basic_resolver_results
cend	.\include\asio\ip\basic_resolver_results.hpp	/^  const_iterator cend() const$/;"	f	class:asio::ip::basic_resolver_results
character_size	.\include\asio\serial_port_base.hpp	/^  class character_size$/;"	c	class:asio::serial_port_base
check_condition	.\include\asio\impl\connect.hpp	/^    void check_condition(const asio::error_code& ec,$/;"	f	class:asio::detail::base_from_connect_condition
check_condition	.\include\asio\impl\connect.hpp	/^    void check_condition(const asio::error_code&, Iterator&, Iterator&)$/;"	f	class:asio::detail::base_from_connect_condition
check_for_completion	.\include\asio\detail\base_from_completion_cond.hpp	/^  static std::size_t check_for_completion($/;"	f	class:asio::detail::base_from_completion_cond
check_for_completion	.\include\asio\detail\base_from_completion_cond.hpp	/^  std::size_t check_for_completion($/;"	f	class:asio::detail::base_from_completion_cond
chrono	.\include\asio\detail\chrono.hpp	/^namespace chrono {$/;"	n	namespace:asio
chrono_time_traits	.\include\asio\detail\chrono_time_traits.hpp	/^struct chrono_time_traits$/;"	s	namespace:asio::detail
chunk_size	.\include\asio\detail\thread_info_base.hpp	/^  enum { chunk_size = 4 };$/;"	e	enum:asio::detail::thread_info_base::__anon24
clear	.\include\asio\basic_signal_set.hpp	/^  ASIO_SYNC_OP_VOID clear(asio::error_code& ec)$/;"	f	class:asio::basic_signal_set
clear	.\include\asio\basic_signal_set.hpp	/^  void clear()$/;"	f	class:asio::basic_signal_set
clear	.\include\asio\detail\buffered_stream_storage.hpp	/^  void clear()$/;"	f	class:asio::detail::buffered_stream_storage
clear	.\include\asio\detail\conditionally_enabled_event.hpp	/^  void clear(conditionally_enabled_mutex::scoped_lock& lock)$/;"	f	class:asio::detail::conditionally_enabled_event
clear	.\include\asio\detail\hash_map.hpp	/^  void clear()$/;"	f	class:asio::detail::hash_map
clear	.\include\asio\detail\null_event.hpp	/^  void clear(Lock&)$/;"	f	class:asio::detail::null_event
clear	.\include\asio\detail\posix_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:asio::detail::posix_event
clear	.\include\asio\detail\std_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:asio::detail::std_event
clear	.\include\asio\detail\win_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:asio::detail::win_event
clear	.\include\asio\error_code.hpp	/^  void clear()$/;"	f	class:asio::error_code
clear	.\include\asio\signal_set_service.hpp	/^  ASIO_SYNC_OP_VOID clear(implementation_type& impl,$/;"	f	class:asio::signal_set_service
clear	.\source\udp_parser.cpp	/^void udp_parser::clear()$/;"	f	class:udp_parser
client	.\include\asio\ssl\stream_base.hpp	/^    client,$/;"	e	enum:asio::ssl::stream_base::handshake_type
clock_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef Clock clock_type;$/;"	t	class:asio::basic_socket_iostream
clock_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef Clock clock_type;$/;"	t	class:asio::basic_socket_streambuf
clock_type	.\include\asio\basic_waitable_timer.hpp	/^  typedef Clock clock_type;$/;"	t	class:asio::basic_waitable_timer
clock_type	.\include\asio\detail\chrono_time_traits.hpp	/^  typedef Clock clock_type;$/;"	t	struct:asio::detail::chrono_time_traits
clock_type	.\include\asio\waitable_timer_service.hpp	/^  typedef Clock clock_type;$/;"	t	class:asio::waitable_timer_service
close	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::basic_serial_port
close	.\include\asio\basic_serial_port.hpp	/^  void close()$/;"	f	class:asio::basic_serial_port
close	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::basic_socket
close	.\include\asio\basic_socket.hpp	/^  void close()$/;"	f	class:asio::basic_socket
close	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
close	.\include\asio\basic_socket_acceptor.hpp	/^  void close()$/;"	f	class:asio::basic_socket_acceptor
close	.\include\asio\basic_socket_iostream.hpp	/^  void close()$/;"	f	class:asio::basic_socket_iostream
close	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf* close()$/;"	f	class:asio::basic_socket_streambuf
close	.\include\asio\buffered_read_stream.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::buffered_read_stream
close	.\include\asio\buffered_read_stream.hpp	/^  void close()$/;"	f	class:asio::buffered_read_stream
close	.\include\asio\buffered_stream.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::buffered_stream
close	.\include\asio\buffered_stream.hpp	/^  void close()$/;"	f	class:asio::buffered_stream
close	.\include\asio\buffered_write_stream.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::buffered_write_stream
close	.\include\asio\buffered_write_stream.hpp	/^  void close()$/;"	f	class:asio::buffered_write_stream
close	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
close	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code close(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
close	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code close(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
close	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code close(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
close	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::posix::basic_descriptor
close	.\include\asio\posix\basic_descriptor.hpp	/^  void close()$/;"	f	class:asio::posix::basic_descriptor
close	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::posix::descriptor
close	.\include\asio\posix\descriptor.hpp	/^  void close()$/;"	f	class:asio::posix::descriptor
close	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
close	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
close	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
close	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::serial_port_service
close	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
close	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
close	.\include\asio\windows\basic_handle.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::windows::basic_handle
close	.\include\asio\windows\basic_handle.hpp	/^  void close()$/;"	f	class:asio::windows::basic_handle
close	.\include\asio\windows\object_handle_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
close	.\include\asio\windows\overlapped_handle.hpp	/^  ASIO_SYNC_OP_VOID close(asio::error_code& ec)$/;"	f	class:asio::windows::overlapped_handle
close	.\include\asio\windows\overlapped_handle.hpp	/^  void close()$/;"	f	class:asio::windows::overlapped_handle
close	.\include\asio\windows\random_access_handle_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
close	.\include\asio\windows\stream_handle_service.hpp	/^  ASIO_SYNC_OP_VOID close(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
cmd_channel	.\include\udp_if.hpp	/^	udp_channel cmd_channel;$/;"	m	class:udp_if
cmd_id	.\include\global_types.hpp	/^	char* cmd_id;$/;"	m	struct:board_msg_t
cmd_id	.\include\global_types.hpp	/^    std::string cmd_id;$/;"	m	struct:msg_t
cmd_id	.\source\udp_server.h	/^	char* cmd_id;$/;"	m	struct:board_msg_t
cmd_id	.\test\udp_server.h	/^	char* cmd_id;$/;"	m	struct:board_msg_t
cmd_state_machine	.\source\udp_if.cpp	/^void udp_if::cmd_state_machine()$/;"	f	class:udp_if
co_spawn	.\include\asio\experimental\co_spawn.hpp	/^inline auto co_spawn(ExecutionContext& ctx, F&& f, CompletionToken&& token)$/;"	f	namespace:asio::experimental
co_spawn	.\include\asio\experimental\co_spawn.hpp	/^inline auto co_spawn(const Executor& ex, F&& f, CompletionToken&& token)$/;"	f	namespace:asio::experimental
co_spawn	.\include\asio\experimental\co_spawn.hpp	/^inline auto co_spawn(const await_token<Executor>& parent,$/;"	f	namespace:asio::experimental
co_spawn	.\include\asio\experimental\impl\co_spawn.hpp	/^auto co_spawn(const Executor& ex, F&& f, CompletionToken&& token)$/;"	f	namespace:asio::experimental::detail
co_spawn_entry_point	.\include\asio\experimental\impl\co_spawn.hpp	/^awaiter<Executor>* co_spawn_entry_point(awaitable<T, Executor>*,$/;"	f	namespace:asio::experimental::detail
co_spawn_entry_point	.\include\asio\experimental\impl\co_spawn.hpp	/^awaiter<Executor>* co_spawn_entry_point(awaitable<void, Executor>*,$/;"	f	namespace:asio::experimental::detail
co_spawn_handler	.\include\asio\experimental\impl\co_spawn.hpp	/^class co_spawn_handler : public awaiter_task<Executor>$/;"	c	namespace:asio::experimental::detail
command	.\include\global_types.hpp	/^	char* command;$/;"	m	struct:board_command_t
commit	.\include\asio\basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:asio::basic_streambuf
commit	.\include\asio\basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:asio::basic_streambuf_ref
commit	.\include\asio\buffer.hpp	/^  void commit(std::size_t n)$/;"	f	class:asio::dynamic_string_buffer
commit	.\include\asio\buffer.hpp	/^  void commit(std::size_t n)$/;"	f	class:asio::dynamic_vector_buffer
commit	.\include\asio\detail\buffer_resize_guard.hpp	/^  void commit()$/;"	f	class:asio::detail::buffer_resize_guard
complete	.\include\asio\detail\handler_work.hpp	/^  void complete(Function& function, Handler& handler)$/;"	f	class:asio::detail::handler_work
complete	.\include\asio\detail\scheduler_operation.hpp	/^  void complete(void* owner, const asio::error_code& ec,$/;"	f	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
complete	.\include\asio\detail\win_iocp_operation.hpp	/^  void complete(void* owner, const asio::error_code& ec,$/;"	f	class:asio::detail::win_iocp_operation
complete	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  void complete(const asio::error_code& ec,$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
complete	.\include\asio\windows\overlapped_ptr.hpp	/^  void complete(const asio::error_code& ec,$/;"	f	class:asio::windows::overlapped_ptr
completed_ops_	.\include\asio\detail\win_iocp_io_context.hpp	/^  op_queue<win_iocp_operation> completed_ops_;$/;"	m	class:asio::detail::win_iocp_io_context
completion_condition_	.\include\asio\detail\base_from_completion_cond.hpp	/^  CompletionCondition completion_condition_;$/;"	m	class:asio::detail::base_from_completion_cond
completion_condition_	.\include\asio\impl\write.hpp	/^    CompletionCondition completion_condition_;$/;"	m	class:asio::detail::write_dynbuf_op
completion_handler	.\include\asio\async_result.hpp	/^    completion_handler_type&, completion_handler_type>::type completion_handler;$/;"	m	struct:asio::async_completion
completion_handler	.\include\asio\async_result.hpp	/^  completion_handler_type completion_handler;$/;"	m	struct:asio::async_completion
completion_handler	.\include\asio\detail\completion_handler.hpp	/^  completion_handler(Handler& h)$/;"	f	class:asio::detail::completion_handler
completion_handler	.\include\asio\detail\completion_handler.hpp	/^class completion_handler : public operation$/;"	c	namespace:asio::detail
completion_handler_type	.\include\asio\async_result.hpp	/^      Signature>::completion_handler_type completion_handler_type;$/;"	t	struct:asio::async_completion
completion_handler_type	.\include\asio\async_result.hpp	/^  typedef CompletionToken completion_handler_type;$/;"	t	class:asio::async_result
completion_handler_type	.\include\asio\bind_executor.hpp	/^      completion_handler_type;$/;"	t	class:asio::async_result
completion_handler_type	.\include\asio\experimental\impl\co_spawn.hpp	/^    Executor, typename decay<Args>::type...> completion_handler_type;$/;"	t	class:asio::async_result
completion_handler_type	.\include\asio\experimental\impl\detached.hpp	/^    completion_handler_type;$/;"	t	struct:asio::async_result
completion_handler_type	.\include\asio\experimental\impl\redirect_error.hpp	/^        ::completion_handler_type> completion_handler_type;$/;"	t	struct:asio::async_result
completion_handler_type	.\include\asio\impl\spawn.hpp	/^    typedef coro_handler<Handler, T> completion_handler_type;$/;"	t	class:asio::detail::coro_async_result
completion_handler_type	.\include\asio\impl\spawn.hpp	/^    typedef coro_handler<Handler, void> completion_handler_type;$/;"	t	class:asio::detail::coro_async_result
completion_handler_type	.\include\asio\impl\use_future.hpp	/^  typedef packaged_handler<Function, Allocator, Result> completion_handler_type;$/;"	t	class:asio::detail::packaged_async_result
completion_handler_type	.\include\asio\impl\use_future.hpp	/^  typedef promise_handler<Signature, Allocator> completion_handler_type;$/;"	t	class:asio::detail::promise_async_result
completion_handler_type	.\include\asio\packaged_task.hpp	/^  typedef std::packaged_task<Result(Args...)> completion_handler_type;$/;"	t	class:asio::async_result
completion_token	.\include\asio\experimental\redirect_error.hpp	/^  redirect_error_t(ASIO_MOVE_ARG(T) completion_token,$/;"	m	class:asio::experimental::redirect_error_t
concurrency_hint	.\include\asio\detail\scheduler.hpp	/^  int concurrency_hint() const$/;"	f	class:asio::detail::scheduler
concurrency_hint	.\include\asio\detail\win_iocp_io_context.hpp	/^  int concurrency_hint() const$/;"	f	class:asio::detail::win_iocp_io_context
concurrency_hint_	.\include\asio\detail\scheduler.hpp	/^  const int concurrency_hint_;$/;"	m	class:asio::detail::scheduler
concurrency_hint_	.\include\asio\detail\win_iocp_io_context.hpp	/^  const int concurrency_hint_;$/;"	m	class:asio::detail::win_iocp_io_context
cond_	.\include\asio\detail\posix_event.hpp	/^  ::pthread_cond_t cond_;$/;"	m	class:asio::detail::posix_event
cond_	.\include\asio\detail\std_event.hpp	/^  std::condition_variable cond_;$/;"	m	class:asio::detail::std_event
conditionally_enabled_event	.\include\asio\detail\conditionally_enabled_event.hpp	/^  conditionally_enabled_event()$/;"	f	class:asio::detail::conditionally_enabled_event
conditionally_enabled_event	.\include\asio\detail\conditionally_enabled_event.hpp	/^class conditionally_enabled_event$/;"	c	namespace:asio::detail
conditionally_enabled_mutex	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  explicit conditionally_enabled_mutex(bool enabled)$/;"	f	class:asio::detail::conditionally_enabled_mutex
conditionally_enabled_mutex	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^class conditionally_enabled_mutex$/;"	c	namespace:asio::detail
config_file_ptr	.\include\bmi08x_defs.h	/^const uint8_t *config_file_ptr;$/;"	m	struct:bmi08x_dev
connect	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID connect(const endpoint_type& peer_endpoint,$/;"	f	class:asio::basic_socket
connect	.\include\asio\basic_socket.hpp	/^  void connect(const endpoint_type& peer_endpoint)$/;"	f	class:asio::basic_socket
connect	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf* connect(T... x)$/;"	f	class:asio::basic_socket_streambuf
connect	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf* connect(const endpoint_type& endpoint)$/;"	f	class:asio::basic_socket_streambuf
connect	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID connect(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
connect	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code connect(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
connect	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code connect(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
connect	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code connect(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
connect	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code connect(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
connect	.\include\asio\impl\connect.hpp	/^Iterator connect(basic_socket<Protocol ASIO_SVC_TARG>& s, Iterator begin,$/;"	f	namespace:asio
connect	.\include\asio\impl\connect.hpp	/^Iterator connect(basic_socket<Protocol ASIO_SVC_TARG>& s,$/;"	f	namespace:asio
connect	.\include\asio\impl\connect.hpp	/^inline Iterator connect(basic_socket<Protocol ASIO_SVC_TARG>& s,$/;"	f	namespace:asio
connect	.\include\asio\impl\connect.hpp	/^typename Protocol::endpoint connect($/;"	f	namespace:asio
connect	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID connect(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
connect	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID connect(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
connect	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID connect(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
connect_condition_	.\include\asio\impl\connect.hpp	/^    ConnectCondition connect_condition_;$/;"	m	class:asio::detail::base_from_connect_condition
connect_ex_	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  bool connect_ex_;$/;"	m	class:asio::detail::win_iocp_socket_connect_op_base
connect_ex_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void* connect_ex_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
connect_ex_fn	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  typedef BOOL (PASCAL *connect_ex_fn)(SOCKET,$/;"	t	class:asio::detail::win_iocp_socket_service_base
connect_op	.\include\asio\detail\dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::dev_poll_reactor::op_types
connect_op	.\include\asio\detail\epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::epoll_reactor::op_types
connect_op	.\include\asio\detail\kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::kqueue_reactor::op_types
connect_op	.\include\asio\detail\select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:asio::detail::select_reactor::op_types
connect_pair	.\include\asio\local\connect_pair.hpp	/^inline ASIO_SYNC_OP_VOID connect_pair($/;"	f	namespace:asio::local
connect_pair	.\include\asio\local\connect_pair.hpp	/^inline void connect_pair($/;"	f	namespace:asio::local
connect_to_endpoints	.\include\asio\basic_socket_streambuf.hpp	/^  void connect_to_endpoints(EndpointIterator begin, EndpointIterator end)$/;"	f	class:asio::basic_socket_streambuf
connect_to_endpoints	.\include\asio\basic_socket_streambuf.hpp	/^  void connect_to_endpoints(const EndpointSequence& endpoints)$/;"	f	class:asio::basic_socket_streambuf
connection_aborted	.\include\asio\error.hpp	/^  connection_aborted = ASIO_SOCKET_ERROR(ECONNABORTED),$/;"	e	enum:asio::error::basic_errors
connection_cmd	.\include\global_types.hpp	/^	const std::string connection_cmd;$/;"	m	class:messages
connection_refused	.\include\asio\error.hpp	/^  connection_refused = ASIO_SOCKET_ERROR(ECONNREFUSED),$/;"	e	enum:asio::error::basic_errors
connection_reset	.\include\asio\error.hpp	/^  connection_reset = ASIO_SOCKET_ERROR(ECONNRESET),$/;"	e	enum:asio::error::basic_errors
connection_rsp	.\include\global_types.hpp	/^    const std::string connection_rsp;$/;"	m	class:messages
const_buffer	.\include\asio\buffer.hpp	/^    : const_buffer(b)$/;"	f	class:asio::const_buffers_1
const_buffer	.\include\asio\buffer.hpp	/^    : const_buffer(data, size)$/;"	f	class:asio::const_buffers_1
const_buffer	.\include\asio\buffer.hpp	/^  const_buffer(const void* data, std::size_t size,$/;"	f	class:asio::const_buffer
const_buffer	.\include\asio\buffer.hpp	/^class const_buffer$/;"	c	namespace:asio
const_buffers_1	.\include\asio\buffer.hpp	/^  const_buffers_1(const void* data, std::size_t size,$/;"	f	class:asio::const_buffers_1
const_buffers_1	.\include\asio\buffer.hpp	/^class const_buffers_1$/;"	c	namespace:asio
const_buffers_type	.\include\asio\basic_streambuf.hpp	/^    const_buffers_type;$/;"	t	class:asio::basic_streambuf_ref
const_buffers_type	.\include\asio\basic_streambuf.hpp	/^  typedef implementation_defined const_buffers_type;$/;"	t	class:asio::basic_streambuf
const_buffers_type	.\include\asio\buffer.hpp	/^  typedef ASIO_CONST_BUFFER const_buffers_type;$/;"	t	class:asio::dynamic_string_buffer
const_buffers_type	.\include\asio\buffer.hpp	/^  typedef ASIO_CONST_BUFFER const_buffers_type;$/;"	t	class:asio::dynamic_vector_buffer
const_iterator	.\include\asio\buffer.hpp	/^  typedef const const_buffer* const_iterator;$/;"	t	class:asio::const_buffers_1
const_iterator	.\include\asio\buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:asio::mutable_buffers_1
const_iterator	.\include\asio\buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:asio::null_buffers
const_iterator	.\include\asio\buffers_iterator.hpp	/^    typedef const const_buffer* const_iterator;$/;"	t	struct:asio::detail::buffers_iterator_types
const_iterator	.\include\asio\buffers_iterator.hpp	/^    typedef const mutable_buffer* const_iterator;$/;"	t	struct:asio::detail::buffers_iterator_types
const_iterator	.\include\asio\buffers_iterator.hpp	/^    typedef typename BufferSequence::const_iterator const_iterator;$/;"	t	struct:asio::detail::buffers_iterator_types
const_iterator	.\include\asio\detail\consuming_buffers.hpp	/^  typedef const Buffer* const_iterator;$/;"	t	struct:asio::detail::prepared_buffers
const_iterator	.\include\asio\detail\hash_map.hpp	/^  typedef typename std::list<value_type>::const_iterator const_iterator;$/;"	t	class:asio::detail::hash_map
const_iterator	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef basic_resolver_iterator<protocol_type> const_iterator;$/;"	t	class:asio::ip::basic_resolver_results
const_reference	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef const value_type& const_reference;$/;"	t	class:asio::ip::basic_resolver_results
construct	.\include\asio\datagram_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::datagram_socket_service
construct	.\include\asio\deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::deadline_timer_service
construct	.\include\asio\detail\deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::detail::deadline_timer_service
construct	.\include\asio\detail\null_socket_service.hpp	/^  void construct(implementation_type&)$/;"	f	class:asio::detail::null_socket_service
construct	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::detail::reactive_serial_port_service
construct	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::detail::win_iocp_serial_port_service
construct	.\include\asio\detail\winrt_resolver_service.hpp	/^  void construct(implementation_type&)$/;"	f	class:asio::detail::winrt_resolver_service
construct	.\include\asio\ip\resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::ip::resolver_service
construct	.\include\asio\posix\stream_descriptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::posix::stream_descriptor_service
construct	.\include\asio\raw_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::raw_socket_service
construct	.\include\asio\seq_packet_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::seq_packet_socket_service
construct	.\include\asio\serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::serial_port_service
construct	.\include\asio\signal_set_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::signal_set_service
construct	.\include\asio\socket_acceptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::socket_acceptor_service
construct	.\include\asio\stream_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::stream_socket_service
construct	.\include\asio\waitable_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::waitable_timer_service
construct	.\include\asio\windows\object_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::windows::object_handle_service
construct	.\include\asio\windows\random_access_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::windows::random_access_handle_service
construct	.\include\asio\windows\stream_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:asio::windows::stream_handle_service
consume	.\include\asio\basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:asio::basic_streambuf
consume	.\include\asio\basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:asio::basic_streambuf_ref
consume	.\include\asio\buffer.hpp	/^  void consume(std::size_t n)$/;"	f	class:asio::dynamic_string_buffer
consume	.\include\asio\buffer.hpp	/^  void consume(std::size_t n)$/;"	f	class:asio::dynamic_vector_buffer
consume	.\include\asio\detail\buffered_stream_storage.hpp	/^  void consume(size_type count)$/;"	f	class:asio::detail::buffered_stream_storage
consume	.\include\asio\detail\consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:asio::detail::consuming_buffers
consume	.\include\asio\detail\consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:asio::detail::consuming_single_buffer
consume	.\include\asio\detail\consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	struct:asio::detail::prepared_buffers
consume	.\include\asio\detail\consuming_buffers.hpp	/^  void consume(std::size_t)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  consuming_buffers(const null_buffers&)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const boost::array<Elem, 2>& buffers)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const const_buffer& buffer)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const const_buffers_1& buffer)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const mutable_buffer& buffer)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const mutable_buffers_1& buffer)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_buffers(const std::array<Elem, 2>& buffers)$/;"	f	class:asio::detail::consuming_buffers
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<Buffer, boost::array<Elem, 2>,$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<Buffer, null_buffers, const mutable_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<Buffer, std::array<Elem, 2>,$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<const_buffer, const_buffer, const const_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<const_buffer, const_buffers_1, const const_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<const_buffer, mutable_buffer, const mutable_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<const_buffer, mutable_buffers_1, const mutable_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<mutable_buffer, mutable_buffer, const mutable_buffer*>$/;"	c	namespace:asio::detail
consuming_buffers	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_buffers<mutable_buffer,$/;"	c	namespace:asio::detail
consuming_single_buffer	.\include\asio\detail\consuming_buffers.hpp	/^  explicit consuming_single_buffer(const Buffer1& buffer)$/;"	f	class:asio::detail::consuming_single_buffer
consuming_single_buffer	.\include\asio\detail\consuming_buffers.hpp	/^class consuming_single_buffer$/;"	c	namespace:asio::detail
container_type	.\include\asio\buffer.hpp	/^  typedef ASIO_CONST_BUFFER container_type;$/;"	t	struct:asio::detail::buffer_types_base
container_type	.\include\asio\buffer.hpp	/^  typedef ASIO_MUTABLE_BUFFER container_type;$/;"	t	struct:asio::detail::buffer_types_base
contains	.\include\asio\detail\call_stack.hpp	/^  static Value* contains(Key* k)$/;"	f	class:asio::detail::call_stack
content	.\include\global_types.hpp	/^	char* content;$/;"	m	struct:board_msg_t
content	.\include\global_types.hpp	/^    std::string content;$/;"	m	struct:msg_t
content	.\source\udp_server.h	/^	char* content;$/;"	m	struct:board_msg_t
content	.\test\udp_server.h	/^	char* content;$/;"	m	struct:board_msg_t
content_map	.\include\board_if.hpp	/^	std::map<std::string, unsigned> content_map;$/;"	m	class:board_if
context	.\include\asio\detail\call_stack.hpp	/^    context(Key* k, Value& v)$/;"	f	class:asio::detail::call_stack::context
context	.\include\asio\detail\call_stack.hpp	/^    explicit context(Key* k)$/;"	f	class:asio::detail::call_stack::context
context	.\include\asio\detail\call_stack.hpp	/^  class context$/;"	c	class:asio::detail::call_stack
context	.\include\asio\impl\execution_context.hpp	/^inline execution_context& execution_context::service::context()$/;"	f	class:asio::execution_context::service
context	.\include\asio\ssl\context.hpp	/^class context$/;"	c	namespace:asio::ssl
context	.\include\udp_channel.hpp	/^	asio::io_context context;$/;"	m	class:udp_channel
context_	.\include\asio\detail\wrapped_handler.hpp	/^  Context context_;$/;"	m	class:asio::detail::rewrapped_handler
context_base	.\include\asio\ssl\context_base.hpp	/^class context_base$/;"	c	namespace:asio::ssl
converting_move_construct	.\include\asio\datagram_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
converting_move_construct	.\include\asio\detail\null_socket_service.hpp	/^  void converting_move_construct(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
converting_move_construct	.\include\asio\detail\reactive_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
converting_move_construct	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
converting_move_construct	.\include\asio\detail\winrt_ssocket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
converting_move_construct	.\include\asio\raw_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
converting_move_construct	.\include\asio\seq_packet_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
converting_move_construct	.\include\asio\socket_acceptor_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
converting_move_construct	.\include\asio\stream_socket_service.hpp	/^  void converting_move_construct(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
copy	.\include\asio\buffered_read_stream.hpp	/^  std::size_t copy(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_read_stream
copy	.\include\asio\impl\buffered_write_stream.hpp	/^std::size_t buffered_write_stream<Stream>::copy($/;"	f	class:asio::buffered_write_stream
core_	.\include\asio\ssl\detail\io.hpp	/^  stream_core& core_;$/;"	m	class:asio::ssl::detail::io_op
core_	.\include\asio\ssl\stream.hpp	/^  detail::stream_core core_;$/;"	m	class:asio::ssl::stream
coro_	.\include\asio\impl\spawn.hpp	/^    shared_ptr<typename basic_yield_context<Handler>::callee_type> coro_;$/;"	m	class:asio::detail::coro_handler
coro_	.\include\asio\impl\spawn.hpp	/^    weak_ptr<typename basic_yield_context<Handler>::callee_type> coro_;$/;"	m	struct:asio::detail::spawn_data
coro_	.\include\asio\spawn.hpp	/^  detail::weak_ptr<callee_type> coro_;$/;"	m	class:asio::basic_yield_context
coro_async_result	.\include\asio\impl\spawn.hpp	/^    explicit coro_async_result(completion_handler_type& h)$/;"	f	class:asio::detail::coro_async_result
coro_async_result	.\include\asio\impl\spawn.hpp	/^  class coro_async_result$/;"	c	namespace:asio::detail
coro_async_result	.\include\asio\impl\spawn.hpp	/^  class coro_async_result<Handler, void>$/;"	c	namespace:asio::detail
coro_entry_point	.\include\asio\impl\spawn.hpp	/^  struct coro_entry_point$/;"	s	namespace:asio::detail
coro_handler	.\include\asio\impl\spawn.hpp	/^    coro_handler(basic_yield_context<Handler> ctx)$/;"	f	class:asio::detail::coro_handler
coro_handler	.\include\asio\impl\spawn.hpp	/^  class coro_handler$/;"	c	namespace:asio::detail
coro_handler	.\include\asio\impl\spawn.hpp	/^  class coro_handler<Handler, void>$/;"	c	namespace:asio::detail
coroutine	.\include\asio\coroutine.hpp	/^  coroutine() : value_(0) {}$/;"	f	class:asio::coroutine
coroutine	.\include\asio\coroutine.hpp	/^class coroutine$/;"	c	namespace:asio
coroutine_ref	.\include\asio\coroutine.hpp	/^  coroutine_ref(coroutine& c) : value_(c.value_), modified_(false) {}$/;"	f	class:asio::detail::coroutine_ref
coroutine_ref	.\include\asio\coroutine.hpp	/^  coroutine_ref(coroutine* c) : value_(c->value_), modified_(false) {}$/;"	f	class:asio::detail::coroutine_ref
coroutine_ref	.\include\asio\coroutine.hpp	/^class coroutine_ref$/;"	c	namespace:asio::detail
coroutine_traits	.\include\asio\experimental\impl\co_spawn.hpp	/^struct coroutine_traits<$/;"	s	namespace:std::experimental
count	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  std::size_t count() const$/;"	f	class:asio::detail::buffer_sequence_adapter
count_	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  std::size_t count_;$/;"	m	class:asio::detail::buffer_sequence_adapter
count_type	.\include\asio\io_context.hpp	/^  typedef std::size_t count_type;$/;"	t	class:asio::io_context
create	.\include\asio\detail\impl\service_registry.hpp	/^execution_context::service* service_registry::create(void* owner)$/;"	f	class:asio::detail::service_registry
create	.\include\asio\detail\object_pool.hpp	/^  static Object* create()$/;"	f	class:asio::detail::object_pool_access
create	.\include\asio\detail\object_pool.hpp	/^  static Object* create(Arg arg)$/;"	f	class:asio::detail::object_pool_access
create	.\include\asio\impl\executor.hpp	/^  static impl_base* create(const Executor& e, Allocator a = Allocator())$/;"	f	class:asio::executor::impl
create	.\include\asio\impl\executor.hpp	/^  static impl_base* create(const system_executor&,$/;"	f	class:asio::executor::impl
create	.\include\asio\ip\basic_resolver_results.hpp	/^  static basic_resolver_results create($/;"	f	class:asio::ip::basic_resolver_results
create	.\include\asio\ip\basic_resolver_results.hpp	/^  static basic_resolver_results create(const endpoint_type& endpoint,$/;"	f	class:asio::ip::basic_resolver_results
create_promise	.\include\asio\impl\use_future.hpp	/^  void create_promise(const Allocator& a)$/;"	f	class:asio::detail::promise_creator
create_thread	.\include\asio\detail\thread_group.hpp	/^  void create_thread(Function f)$/;"	f	class:asio::detail::thread_group
create_threads	.\include\asio\detail\thread_group.hpp	/^  void create_threads(Function f, std::size_t num_threads)$/;"	f	class:asio::detail::thread_group
crit_section_	.\include\asio\detail\win_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	class:asio::detail::win_mutex
crit_section_	.\include\asio\detail\win_static_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	struct:asio::detail::win_static_mutex
current	.\include\global_types.hpp	/^	board_command_t* current;$/;"	m	struct:board_command_list_t
current_	.\include\asio\buffers_iterator.hpp	/^  buffer_sequence_iterator_type current_;$/;"	m	class:asio::buffers_iterator
current_buffer_	.\include\asio\buffers_iterator.hpp	/^  buffer_type current_buffer_;$/;"	m	class:asio::buffers_iterator
current_buffer_position_	.\include\asio\buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:asio::buffers_iterator
custom_socket_option_level	.\include\asio\detail\socket_types.hpp	/^const int custom_socket_option_level = 0xA5100000;$/;"	m	namespace:asio::detail
cv	.\include\global_types.hpp	/^	std::condition_variable cv;$/;"	m	class:atomic_bool
cv	.\include\global_types.hpp	/^	std::condition_variable cv;$/;"	m	class:wait_semaphore
cv	.\include\strm_queue.hpp	/^    std::condition_variable cv;$/;"	m	class:strm_queue
d_	.\include\asio\detail\chrono_time_traits.hpp	/^    duration_type d_;$/;"	m	class:asio::detail::chrono_time_traits::posix_time_duration
data	.\include\asio\detail\buffered_stream_storage.hpp	/^  const_buffer data() const$/;"	f	class:asio::detail::buffered_stream_storage
data	.\include\asio\detail\buffered_stream_storage.hpp	/^  mutable_buffer data()$/;"	f	class:asio::detail::buffered_stream_storage
data	.\include\asio\detail\io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:asio::detail::io_control::bytes_readable
data	.\include\asio\detail\io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:asio::detail::io_control::bytes_readable
data	.\include\asio\detail\socket_option.hpp	/^  const detail::linger_type* data(const Protocol&) const$/;"	f	class:asio::detail::socket_option::linger
data	.\include\asio\detail\socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:asio::detail::socket_option::boolean
data	.\include\asio\detail\socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:asio::detail::socket_option::integer
data	.\include\asio\detail\socket_option.hpp	/^  detail::linger_type* data(const Protocol&)$/;"	f	class:asio::detail::socket_option::linger
data	.\include\asio\detail\socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:asio::detail::socket_option::boolean
data	.\include\asio\detail\socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:asio::detail::socket_option::integer
data	.\include\asio\detail\winsock_init.hpp	/^  struct data$/;"	s	class:asio::detail::winsock_init_base
data	.\include\asio\generic\basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:asio::generic::basic_endpoint
data	.\include\asio\generic\basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:asio::generic::basic_endpoint
data	.\include\asio\generic\detail\endpoint.hpp	/^  asio::detail::socket_addr_type* data()$/;"	f	class:asio::generic::detail::endpoint
data	.\include\asio\generic\detail\endpoint.hpp	/^  const asio::detail::socket_addr_type* data() const$/;"	f	class:asio::generic::detail::endpoint
data	.\include\asio\ip\basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:asio::ip::basic_endpoint
data	.\include\asio\ip\basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:asio::ip::basic_endpoint
data	.\include\asio\ip\detail\endpoint.hpp	/^  asio::detail::socket_addr_type* data()$/;"	f	class:asio::ip::detail::endpoint
data	.\include\asio\ip\detail\endpoint.hpp	/^  const asio::detail::socket_addr_type* data() const$/;"	f	class:asio::ip::detail::endpoint
data	.\include\asio\ip\detail\socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
data	.\include\asio\ip\detail\socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
data	.\include\asio\ip\detail\socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
data	.\include\asio\ip\detail\socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_request
data	.\include\asio\ip\detail\socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::network_interface
data	.\include\asio\ip\detail\socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
data	.\include\asio\ip\detail\socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
data	.\include\asio\ip\detail\socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
data	.\include\asio\is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	m	struct:asio::detail::is_read_buffered_big_type
data	.\include\asio\is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	m	struct:asio::detail::is_write_buffered_big_type
data	.\include\asio\local\basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:asio::local::basic_endpoint
data	.\include\asio\local\basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:asio::local::basic_endpoint
data	.\include\asio\local\detail\endpoint.hpp	/^  asio::detail::socket_addr_type* data()$/;"	f	class:asio::local::detail::endpoint
data	.\include\asio\local\detail\endpoint.hpp	/^  const asio::detail::socket_addr_type* data() const$/;"	f	class:asio::local::detail::endpoint
data	.\include\udp_channel.hpp	/^	data_t data;$/;"	m	class:udp_channel
data_	.\include\asio\buffer.hpp	/^  const void* data_;$/;"	m	class:asio::const_buffer
data_	.\include\asio\buffer.hpp	/^  void* data_;$/;"	m	class:asio::mutable_buffer
data_	.\include\asio\detail\winsock_init.hpp	/^  static data data_;$/;"	m	class:asio::detail::winsock_init
data_	.\include\asio\detail\winsock_init.hpp	/^winsock_init_base::data winsock_init<Major, Minor>::data_;$/;"	m	class:asio::detail::winsock_init
data_	.\include\asio\generic\detail\endpoint.hpp	/^  } data_;$/;"	m	class:asio::generic::detail::endpoint	typeref:union:asio::generic::detail::endpoint::data_union
data_	.\include\asio\impl\spawn.hpp	/^    shared_ptr<spawn_data<Handler, Function> > data_;$/;"	m	struct:asio::detail::coro_entry_point
data_	.\include\asio\impl\spawn.hpp	/^    shared_ptr<spawn_data<Handler, Function> > data_;$/;"	m	struct:asio::detail::spawn_helper
data_	.\include\asio\ip\detail\endpoint.hpp	/^  } data_;$/;"	m	class:asio::ip::detail::endpoint	typeref:union:asio::ip::detail::endpoint::data_union
data_	.\include\asio\local\detail\endpoint.hpp	/^  } data_;$/;"	m	class:asio::local::detail::endpoint	typeref:union:asio::local::detail::endpoint::data_union
data_t	.\include\global_types.hpp	/^struct data_t$/;"	s
data_type	.\include\asio\generic\basic_endpoint.hpp	/^  typedef asio::detail::socket_addr_type data_type;$/;"	t	class:asio::generic::basic_endpoint
data_type	.\include\asio\generic\basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:asio::generic::basic_endpoint
data_type	.\include\asio\ip\basic_endpoint.hpp	/^  typedef asio::detail::socket_addr_type data_type;$/;"	t	class:asio::ip::basic_endpoint
data_type	.\include\asio\ip\basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:asio::ip::basic_endpoint
data_type	.\include\asio\local\basic_endpoint.hpp	/^  typedef asio::detail::socket_addr_type data_type;$/;"	t	class:asio::local::basic_endpoint
data_type	.\include\asio\local\basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:asio::local::basic_endpoint
data_union	.\include\asio\generic\detail\endpoint.hpp	/^  union data_union$/;"	u	class:asio::generic::detail::endpoint
data_union	.\include\asio\ip\detail\endpoint.hpp	/^  union data_union$/;"	u	class:asio::ip::detail::endpoint
data_union	.\include\asio\local\detail\endpoint.hpp	/^  union data_union$/;"	u	class:asio::local::detail::endpoint
datagram_oriented	.\include\asio\detail\socket_ops.hpp	/^  datagram_oriented = 32,$/;"	e	enum:asio::detail::socket_ops::__anon18
datagram_protocol	.\include\asio\generic\datagram_protocol.hpp	/^  datagram_protocol(const Protocol& source_protocol)$/;"	f	class:asio::generic::datagram_protocol
datagram_protocol	.\include\asio\generic\datagram_protocol.hpp	/^  datagram_protocol(int address_family, int socket_protocol)$/;"	f	class:asio::generic::datagram_protocol
datagram_protocol	.\include\asio\generic\datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:asio::generic
datagram_protocol	.\include\asio\local\datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:asio::local
datagram_socket_service	.\include\asio\datagram_socket_service.hpp	/^  explicit datagram_socket_service(asio::io_context& io_context)$/;"	f	class:asio::datagram_socket_service
datagram_socket_service	.\include\asio\datagram_socket_service.hpp	/^class datagram_socket_service$/;"	c	namespace:asio
date_time	.\include\asio\detail\date_time_fwd.hpp	/^namespace date_time {$/;"	n	namespace:boost
deadline_timer	.\include\asio\deadline_timer.hpp	/^typedef basic_deadline_timer<boost::posix_time::ptime> deadline_timer;$/;"	t	namespace:asio
deadline_timer_service	.\include\asio\deadline_timer_service.hpp	/^  explicit deadline_timer_service(asio::io_context& io_context)$/;"	f	class:asio::deadline_timer_service
deadline_timer_service	.\include\asio\deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:asio
deadline_timer_service	.\include\asio\detail\deadline_timer_service.hpp	/^  deadline_timer_service(asio::io_context& io_context)$/;"	f	class:asio::detail::deadline_timer_service
deadline_timer_service	.\include\asio\detail\deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:asio::detail
deallocate	.\include\asio\detail\handler_alloc_helpers.hpp	/^  void deallocate(T* p, std::size_t n)$/;"	f	class:asio::detail::hook_allocator
deallocate	.\include\asio\detail\handler_alloc_helpers.hpp	/^inline void deallocate(void* p, std::size_t s, Handler& h)$/;"	f	namespace:asio_handler_alloc_helpers
deallocate	.\include\asio\detail\recycling_allocator.hpp	/^  void deallocate(T* p, std::size_t n)$/;"	f	class:asio::detail::recycling_allocator
deallocate	.\include\asio\detail\thread_info_base.hpp	/^  static void deallocate(Purpose, thread_info_base* this_thread,$/;"	f	class:asio::detail::thread_info_base
deallocate	.\include\asio\detail\thread_info_base.hpp	/^  static void deallocate(thread_info_base* this_thread,$/;"	f	class:asio::detail::thread_info_base
debug	.\include\asio\socket_base.hpp	/^    ASIO_OS_DEF(SOL_SOCKET), ASIO_OS_DEF(SO_DEBUG)> debug;$/;"	t	class:asio::socket_base
debug	.\include\asio\socket_base.hpp	/^  typedef implementation_defined debug;$/;"	t	class:asio::socket_base
debug_check_	.\include\asio\buffer.hpp	/^      , debug_check_(b.get_debug_check())$/;"	f	class:asio::const_buffer
debug_check_	.\include\asio\buffer.hpp	/^  asio::detail::function<void()> debug_check_;$/;"	m	class:asio::const_buffer
debug_check_	.\include\asio\buffer.hpp	/^  asio::detail::function<void()> debug_check_;$/;"	m	class:asio::mutable_buffer
decltype	.\include\asio\buffer.hpp	/^inline auto buffer_sequence_begin(C& c) -> decltype(c.begin())$/;"	f	namespace:asio
decltype	.\include\asio\buffer.hpp	/^inline auto buffer_sequence_begin(const C& c) -> decltype(c.begin())$/;"	f	namespace:asio
decltype	.\include\asio\buffer.hpp	/^inline auto buffer_sequence_end(C& c) -> decltype(c.end())$/;"	f	namespace:asio
decltype	.\include\asio\buffer.hpp	/^inline auto buffer_sequence_end(const C& c) -> decltype(c.end())$/;"	f	namespace:asio
decrement	.\include\asio\buffers_iterator.hpp	/^  void decrement()$/;"	f	class:asio::buffers_iterator
default_buffer_size	.\include\asio\buffered_read_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:asio::buffered_read_stream
default_buffer_size	.\include\asio\buffered_write_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:asio::buffered_write_stream
default_connect_condition	.\include\asio\impl\connect.hpp	/^  struct default_connect_condition$/;"	s	namespace:asio::detail
default_fd_set_size	.\include\asio\detail\win_fd_set_adapter.hpp	/^  enum { default_fd_set_size = 1024 };$/;"	e	enum:asio::detail::win_fd_set_adapter::__anon26
default_gqcs_timeout	.\include\asio\detail\win_iocp_io_context.hpp	/^    default_gqcs_timeout = 500,$/;"	e	enum:asio::detail::win_iocp_io_context::__anon27
default_io_context_	.\include\asio\basic_socket_streambuf.hpp	/^  shared_ptr<io_context> default_io_context_;$/;"	m	class:asio::detail::socket_streambuf_io_context
default_max_transfer_size	.\include\asio\completion_condition.hpp	/^enum default_max_transfer_size_t { default_max_transfer_size = 65536 };$/;"	e	enum:asio::detail::default_max_transfer_size_t
default_max_transfer_size_t	.\include\asio\completion_condition.hpp	/^enum default_max_transfer_size_t { default_max_transfer_size = 65536 };$/;"	g	namespace:asio::detail
default_spawn_handler	.\include\asio\impl\spawn.hpp	/^  inline void default_spawn_handler() {}$/;"	f	namespace:asio::detail
default_tag	.\include\asio\detail\thread_info_base.hpp	/^  struct default_tag$/;"	s	class:asio::detail::thread_info_base
default_workarounds	.\include\asio\ssl\context_base.hpp	/^  static const long default_workarounds = implementation_defined;$/;"	m	class:asio::ssl::context_base
defer	.\include\asio\detail\impl\strand_executor_service.hpp	/^void strand_executor_service::defer(const implementation_type& impl,$/;"	f	class:asio::detail::strand_executor_service
defer	.\include\asio\impl\defer.hpp	/^ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) defer($/;"	f	namespace:asio
defer	.\include\asio\impl\defer.hpp	/^inline ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) defer($/;"	f	namespace:asio
delay_ms	.\include\bmi08x_defs.h	/^bmi08x_delay_fptr_t delay_ms;$/;"	m	struct:bmi08x_dev
deleter	.\include\asio\experimental\impl\co_spawn.hpp	/^  struct deleter$/;"	s	class:asio::experimental::detail::awaiter
delim_	.\include\asio\impl\read_until.hpp	/^    char delim_;$/;"	m	class:asio::detail::read_until_delim_op
delim_	.\include\asio\impl\read_until.hpp	/^    std::string delim_;$/;"	m	class:asio::detail::read_until_delim_string_op
delimiter	.\include\udp_parser.hpp	/^    static std::string delimiter;$/;"	m	class:udp_parser
delimiter	.\source\udp_parser.cpp	/^std::string udp_parser::delimiter = DELIMITER;$/;"	m	class:udp_parser	file:
dependent_type	.\include\asio\detail\dependent_type.hpp	/^struct dependent_type$/;"	s	namespace:asio::detail
deref_connect_result	.\include\asio\impl\connect.hpp	/^  inline typename Protocol::endpoint deref_connect_result($/;"	f	namespace:asio::detail
dereference	.\include\asio\buffers_iterator.hpp	/^  reference dereference() const$/;"	f	class:asio::buffers_iterator
dereference	.\include\asio\ip\basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& dereference() const$/;"	f	class:asio::ip::basic_resolver_iterator
descriptor	.\include\asio\posix\descriptor.hpp	/^  descriptor(asio::io_context& io_context,$/;"	f	class:asio::posix::descriptor
descriptor	.\include\asio\posix\descriptor.hpp	/^  descriptor(descriptor&& other)$/;"	f	class:asio::posix::descriptor
descriptor	.\include\asio\posix\descriptor.hpp	/^  explicit descriptor(asio::io_context& io_context)$/;"	f	class:asio::posix::descriptor
descriptor	.\include\asio\posix\descriptor.hpp	/^class descriptor$/;"	c	namespace:asio::posix
descriptor_	.\include\asio\detail\descriptor_read_op.hpp	/^  int descriptor_;$/;"	m	class:asio::detail::descriptor_read_op_base
descriptor_	.\include\asio\detail\descriptor_write_op.hpp	/^  int descriptor_;$/;"	m	class:asio::detail::descriptor_write_op_base
descriptor_	.\include\asio\detail\epoll_reactor.hpp	/^    int descriptor_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
descriptor_	.\include\asio\detail\kqueue_reactor.hpp	/^    int descriptor_;$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
descriptor_	.\include\asio\detail\reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:asio::detail::reactive_descriptor_service::implementation_type
descriptor_base	.\include\asio\posix\descriptor_base.hpp	/^class descriptor_base$/;"	c	namespace:asio::posix
descriptor_ops	.\include\asio\detail\descriptor_ops.hpp	/^namespace descriptor_ops {$/;"	n	namespace:asio::detail
descriptor_read_op	.\include\asio\detail\descriptor_read_op.hpp	/^  descriptor_read_op(int descriptor,$/;"	f	class:asio::detail::descriptor_read_op
descriptor_read_op	.\include\asio\detail\descriptor_read_op.hpp	/^class descriptor_read_op$/;"	c	namespace:asio::detail
descriptor_read_op_base	.\include\asio\detail\descriptor_read_op.hpp	/^  descriptor_read_op_base(int descriptor,$/;"	f	class:asio::detail::descriptor_read_op_base
descriptor_read_op_base	.\include\asio\detail\descriptor_read_op.hpp	/^class descriptor_read_op_base : public reactor_op$/;"	c	namespace:asio::detail
descriptor_service_	.\include\asio\detail\reactive_serial_port_service.hpp	/^  reactive_descriptor_service descriptor_service_;$/;"	m	class:asio::detail::reactive_serial_port_service
descriptor_state	.\include\asio\detail\epoll_reactor.hpp	/^  class descriptor_state : operation$/;"	c	class:asio::detail::epoll_reactor
descriptor_state	.\include\asio\detail\kqueue_reactor.hpp	/^    descriptor_state(bool locking) : mutex_(locking) {}$/;"	f	struct:asio::detail::kqueue_reactor::descriptor_state
descriptor_state	.\include\asio\detail\kqueue_reactor.hpp	/^  struct descriptor_state$/;"	s	class:asio::detail::kqueue_reactor
descriptor_write_op	.\include\asio\detail\descriptor_write_op.hpp	/^  descriptor_write_op(int descriptor,$/;"	f	class:asio::detail::descriptor_write_op
descriptor_write_op	.\include\asio\detail\descriptor_write_op.hpp	/^class descriptor_write_op$/;"	c	namespace:asio::detail
descriptor_write_op_base	.\include\asio\detail\descriptor_write_op.hpp	/^  descriptor_write_op_base(int descriptor,$/;"	f	class:asio::detail::descriptor_write_op_base
descriptor_write_op_base	.\include\asio\detail\descriptor_write_op.hpp	/^class descriptor_write_op_base : public reactor_op$/;"	c	namespace:asio::detail
destination_	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  Endpoint destination_;$/;"	m	class:asio::detail::reactive_socket_sendto_op_base
destroy	.\include\asio\datagram_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::datagram_socket_service
destroy	.\include\asio\deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::deadline_timer_service
destroy	.\include\asio\detail\deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::detail::deadline_timer_service
destroy	.\include\asio\detail\null_socket_service.hpp	/^  void destroy(implementation_type&)$/;"	f	class:asio::detail::null_socket_service
destroy	.\include\asio\detail\object_pool.hpp	/^  static void destroy(Object* o)$/;"	f	class:asio::detail::object_pool_access
destroy	.\include\asio\detail\op_queue.hpp	/^  static void destroy(Operation* o)$/;"	f	class:asio::detail::op_queue_access
destroy	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::detail::reactive_serial_port_service
destroy	.\include\asio\detail\scheduler_operation.hpp	/^  void destroy()$/;"	f	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
destroy	.\include\asio\detail\win_iocp_operation.hpp	/^  void destroy()$/;"	f	class:asio::detail::win_iocp_operation
destroy	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::detail::win_iocp_serial_port_service
destroy	.\include\asio\detail\winrt_resolver_service.hpp	/^  void destroy(implementation_type&)$/;"	f	class:asio::detail::winrt_resolver_service
destroy	.\include\asio\ip\resolver_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::ip::resolver_service
destroy	.\include\asio\posix\stream_descriptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::posix::stream_descriptor_service
destroy	.\include\asio\raw_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::raw_socket_service
destroy	.\include\asio\seq_packet_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::seq_packet_socket_service
destroy	.\include\asio\serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::serial_port_service
destroy	.\include\asio\signal_set_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::signal_set_service
destroy	.\include\asio\socket_acceptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::socket_acceptor_service
destroy	.\include\asio\stream_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::stream_socket_service
destroy	.\include\asio\waitable_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::waitable_timer_service
destroy	.\include\asio\windows\object_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::windows::object_handle_service
destroy	.\include\asio\windows\random_access_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::windows::random_access_handle_service
destroy	.\include\asio\windows\stream_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:asio::windows::stream_handle_service
destroy_list	.\include\asio\detail\object_pool.hpp	/^  void destroy_list(Object* list)$/;"	f	class:asio::detail::object_pool
detached	.\include\asio\experimental\detached.hpp	/^__declspec(selectany) detached_t detached;$/;"	m	namespace:asio::experimental
detached	.\include\asio\experimental\detached.hpp	/^constexpr detached_t detached;$/;"	m	namespace:asio::experimental
detached_handler	.\include\asio\experimental\impl\detached.hpp	/^    detached_handler(detached_t)$/;"	f	class:asio::experimental::detail::detached_handler
detached_handler	.\include\asio\experimental\impl\detached.hpp	/^  class detached_handler$/;"	c	namespace:asio::experimental::detail
detached_t	.\include\asio\experimental\detached.hpp	/^  ASIO_CONSTEXPR detached_t()$/;"	f	class:asio::experimental::detached_t
detached_t	.\include\asio\experimental\detached.hpp	/^class detached_t$/;"	c	namespace:asio::experimental
detail	.\include\asio\associated_allocator.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\associated_executor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\async_result.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\basic_io_object.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\basic_socket_iostream.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\basic_socket_streambuf.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\bind_executor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\buffer.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\buffers_iterator.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\completion_condition.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\connect.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\coroutine.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\array.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\atomic_count.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\base_from_completion_cond.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\bind_handler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\buffer_resize_guard.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\buffer_sequence_adapter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\buffered_stream_storage.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\call_stack.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\chrono_time_traits.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\completion_handler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\conditionally_enabled_event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\consuming_buffers.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\deadline_timer_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\dependent_type.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\descriptor_ops.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\descriptor_read_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\descriptor_write_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\eventfd_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\executor_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\functional.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\global.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\handler_alloc_helpers.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\handler_tracking.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\handler_type_requirements.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\handler_work.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\hash_map.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\select_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\service_registry.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\strand_executor_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\strand_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\io_control.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\is_buffer_sequence.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\is_executor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\keyword_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\local_free_on_block_exit.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\macos_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\memory.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\noncopyable.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_global.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_socket_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\null_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\object_pool.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\old_win_sdk_compat.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\op_queue.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\operation.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\pipe_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_global.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\posix_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_descriptor_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_connect_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactive_wait_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactor_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\reactor_op_queue.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\recycling_allocator.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\resolve_endpoint_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\resolve_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\resolve_query_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\resolver_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\resolver_service_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\scheduler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\scheduler_operation.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\scheduler_thread_info.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\scoped_lock.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\scoped_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\select_reactor.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\service_registry.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\signal_handler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\signal_init.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\signal_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\signal_set_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\socket_holder.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\socket_ops.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\socket_option.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\socket_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\socket_types.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\solaris_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\static_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_global.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\std_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\strand_executor_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\strand_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\thread_context.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\thread_group.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\thread_info_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\throw_error.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\throw_exception.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\timer_queue.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\timer_queue_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\timer_queue_ptime.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\timer_queue_set.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\timer_scheduler_fwd.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\wait_handler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\wait_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_event.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_fenced_block.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_global.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_handle_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_io_context.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_operation.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_thread_info.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_iocp_wait_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_object_handle_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_static_mutex.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\win_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winapp_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\wince_thread.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_async_manager.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_async_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_resolve_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_resolver_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_socket_connect_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_socket_recv_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_socket_send_op.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_ssocket_service.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_timer_scheduler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winrt_utils.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\winsock_init.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\work_dispatcher.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\detail\wrapped_handler.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\execution_context.hpp	/^namespace detail { class service_registry; }$/;"	n	namespace:asio
detail	.\include\asio\execution_context.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\experimental\co_spawn.hpp	/^namespace detail {$/;"	n	namespace:asio::experimental
detail	.\include\asio\experimental\impl\co_spawn.hpp	/^namespace detail {$/;"	n	namespace:asio::experimental
detail	.\include\asio\experimental\impl\detached.hpp	/^namespace detail {$/;"	n	namespace:asio::experimental
detail	.\include\asio\experimental\impl\redirect_error.hpp	/^namespace detail {$/;"	n	namespace:asio::experimental
detail	.\include\asio\generic\detail\endpoint.hpp	/^namespace detail {$/;"	n	namespace:asio::generic
detail	.\include\asio\impl\buffered_read_stream.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\buffered_write_stream.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\connect.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\read.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\read_at.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\read_until.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\spawn.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\impl\use_future.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\impl\write.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\impl\write_at.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\io_context.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\ip\detail\endpoint.hpp	/^namespace detail {$/;"	n	namespace:asio::ip
detail	.\include\asio\ip\detail\socket_option.hpp	/^namespace detail {$/;"	n	namespace:asio::ip
detail	.\include\asio\is_read_buffered.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\is_write_buffered.hpp	/^namespace detail {$/;"	n	namespace:asio
detail	.\include\asio\local\detail\endpoint.hpp	/^namespace detail {$/;"	n	namespace:asio::local
detail	.\include\asio\read_until.hpp	/^namespace detail$/;"	n	namespace:asio
detail	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\engine.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\handshake_op.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\io.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\openssl_init.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\password_callback.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\read_op.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\shutdown_op.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\stream_core.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\verify_callback.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\ssl\detail\write_op.hpp	/^namespace detail {$/;"	n	namespace:asio::ssl
detail	.\include\asio\use_future.hpp	/^namespace detail {$/;"	n	namespace:asio
dev_poll_fd_	.\include\asio\detail\dev_poll_reactor.hpp	/^  int dev_poll_fd_;$/;"	m	class:asio::detail::dev_poll_reactor
dev_poll_reactor	.\include\asio\detail\dev_poll_reactor.hpp	/^class dev_poll_reactor$/;"	c	namespace:asio::detail
device_	.\include\asio\impl\read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:asio::detail::read_at_op
device_	.\include\asio\impl\read_at.hpp	/^    AsyncRandomAccessReadDevice& device_;$/;"	m	class:asio::detail::read_at_streambuf_op
device_	.\include\asio\impl\write_at.hpp	/^    AsyncRandomAccessWriteDevice& device_;$/;"	m	class:asio::detail::write_at_op
difference_type	.\include\asio\buffers_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:asio::buffers_iterator
difference_type	.\include\asio\ip\address_v4_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:asio::ip::basic_address_iterator
difference_type	.\include\asio\ip\address_v6_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:asio::ip::basic_address_iterator
difference_type	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:asio::ip::basic_resolver_iterator
difference_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:asio::ip::basic_resolver_results
disconnection_cmd	.\include\global_types.hpp	/^	const std::string disconnection_cmd;$/;"	m	class:messages
dispatch	.\include\asio\detail\impl\strand_executor_service.hpp	/^void strand_executor_service::dispatch(const implementation_type& impl,$/;"	f	class:asio::detail::strand_executor_service
dispatch	.\include\asio\detail\impl\strand_service.hpp	/^void strand_service::dispatch(strand_service::implementation_type& impl,$/;"	f	class:asio::detail::strand_service
dispatch	.\include\asio\impl\dispatch.hpp	/^ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) dispatch($/;"	f	namespace:asio
dispatch	.\include\asio\impl\dispatch.hpp	/^inline ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) dispatch($/;"	f	namespace:asio
dispatch_mutex_	.\include\asio\detail\win_iocp_io_context.hpp	/^  mutex dispatch_mutex_;$/;"	m	class:asio::detail::win_iocp_io_context
dispatch_required_	.\include\asio\detail\win_iocp_io_context.hpp	/^  long dispatch_required_;$/;"	m	class:asio::detail::win_iocp_io_context
dispatcher_	.\include\asio\detail\wrapped_handler.hpp	/^  Dispatcher dispatcher_;$/;"	m	class:asio::detail::wrapped_handler
distance_to	.\include\asio\buffers_iterator.hpp	/^  std::ptrdiff_t distance_to(const buffers_iterator& other) const$/;"	f	class:asio::buffers_iterator
do_assign	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  void do_assign()$/;"	f	class:asio::detail::reactive_socket_accept_op_base
do_complete	.\include\asio\detail\completion_handler.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::completion_handler
do_complete	.\include\asio\detail\descriptor_read_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::descriptor_read_op
do_complete	.\include\asio\detail\descriptor_write_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::descriptor_write_op
do_complete	.\include\asio\detail\executor_op.hpp	/^    : Operation(&executor_op::do_complete),$/;"	m	class:asio::detail::executor_op
do_complete	.\include\asio\detail\executor_op.hpp	/^  static void do_complete(void* owner, Operation* base,$/;"	f	class:asio::detail::executor_op
do_complete	.\include\asio\detail\reactive_null_buffers_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_null_buffers_op
do_complete	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_accept_op
do_complete	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_move_accept_op
do_complete	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_connect_op
do_complete	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_recv_op
do_complete	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_recvfrom_op
do_complete	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_recvmsg_op
do_complete	.\include\asio\detail\reactive_socket_send_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_send_op
do_complete	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_socket_sendto_op
do_complete	.\include\asio\detail\reactive_wait_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::reactive_wait_op
do_complete	.\include\asio\detail\resolve_endpoint_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::resolve_endpoint_op
do_complete	.\include\asio\detail\resolve_query_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::resolve_query_op
do_complete	.\include\asio\detail\signal_handler.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::signal_handler
do_complete	.\include\asio\detail\wait_handler.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::wait_handler
do_complete	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_handle_read_op
do_complete	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_handle_write_op
do_complete	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_null_buffers_op
do_complete	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_overlapped_op
do_complete	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_accept_op
do_complete	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_move_accept_op
do_complete	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_connect_op
do_complete	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_recv_op
do_complete	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_recvfrom_op
do_complete	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_recvmsg_op
do_complete	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_socket_send_op
do_complete	.\include\asio\detail\win_iocp_wait_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::win_iocp_wait_op
do_complete	.\include\asio\detail\winrt_resolve_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::winrt_resolve_op
do_complete	.\include\asio\detail\winrt_socket_connect_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::winrt_socket_connect_op
do_complete	.\include\asio\detail\winrt_socket_recv_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::winrt_socket_recv_op
do_complete	.\include\asio\detail\winrt_socket_send_op.hpp	/^  static void do_complete(void* owner, operation* base,$/;"	f	class:asio::detail::winrt_socket_send_op
do_dispatch	.\include\asio\detail\win_iocp_io_context.hpp	/^  void do_dispatch(operation* op)$/;"	f	class:asio::detail::win_iocp_io_context
do_init	.\include\asio\detail\posix_global.hpp	/^  static void do_init()$/;"	f	struct:asio::detail::posix_global_impl
do_init	.\include\asio\detail\std_global.hpp	/^  static void do_init()$/;"	f	struct:asio::detail::std_global_impl
do_not_route	.\include\asio\socket_base.hpp	/^      do_not_route;$/;"	t	class:asio::socket_base
do_not_route	.\include\asio\socket_base.hpp	/^  typedef implementation_defined do_not_route;$/;"	t	class:asio::socket_base
do_perform	.\include\asio\detail\descriptor_read_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::descriptor_read_op_base
do_perform	.\include\asio\detail\descriptor_write_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::descriptor_write_op_base
do_perform	.\include\asio\detail\reactive_null_buffers_op.hpp	/^  static status do_perform(reactor_op*)$/;"	f	class:asio::detail::reactive_null_buffers_op
do_perform	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_accept_op_base
do_perform	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_connect_op_base
do_perform	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_recv_op_base
do_perform	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_recvfrom_op_base
do_perform	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_recvmsg_op_base
do_perform	.\include\asio\detail\reactive_socket_send_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_send_op_base
do_perform	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::reactive_socket_sendto_op_base
do_perform	.\include\asio\detail\reactive_wait_op.hpp	/^  static status do_perform(reactor_op*)$/;"	f	class:asio::detail::reactive_wait_op
do_perform	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^  static status do_perform(reactor_op*)$/;"	f	class:asio::detail::win_iocp_null_buffers_op
do_perform	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  static status do_perform(reactor_op* base)$/;"	f	class:asio::detail::win_iocp_socket_connect_op_base
do_perform	.\include\asio\detail\win_iocp_wait_op.hpp	/^  static status do_perform(reactor_op*)$/;"	f	class:asio::detail::win_iocp_wait_op
do_wait	.\include\asio\detail\deadline_timer_service.hpp	/^  void do_wait(const Duration& timeout, asio::error_code& ec)$/;"	f	class:asio::detail::deadline_timer_service
done	.\include\asio\detail\reactor_op.hpp	/^  enum status { not_done, done, done_and_exhausted };$/;"	e	enum:asio::detail::reactor_op::status
done_and_exhausted	.\include\asio\detail\reactor_op.hpp	/^  enum status { not_done, done, done_and_exhausted };$/;"	e	enum:asio::detail::reactor_op::status
down_heap	.\include\asio\detail\timer_queue.hpp	/^  void down_heap(std::size_t index)$/;"	f	class:asio::detail::timer_queue
dummy_byte	.\include\bmi08x_defs.h	/^uint8_t dummy_byte;$/;"	m	struct:bmi08x_dev
dummy_return	.\include\asio\experimental\impl\co_spawn.hpp	/^inline void dummy_return()$/;"	f	namespace:asio::experimental::detail
dummy_return	.\include\asio\experimental\impl\co_spawn.hpp	/^template <typename T> T dummy_return()$/;"	f	namespace:asio::experimental::detail
duration	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename WaitTraits::duration duration;$/;"	t	class:asio::basic_socket_iostream
duration	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename traits_helper::duration_type duration;$/;"	t	class:asio::basic_socket_iostream
duration	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename WaitTraits::duration duration;$/;"	t	class:asio::basic_socket_streambuf
duration	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename traits_helper::duration_type duration;$/;"	t	class:asio::basic_socket_streambuf
duration	.\include\asio\basic_waitable_timer.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:asio::basic_waitable_timer
duration	.\include\asio\waitable_timer_service.hpp	/^  typedef typename clock_type::duration duration;$/;"	t	class:asio::waitable_timer_service
duration	.\include\bmi08x_defs.h	/^uint16_t duration;$/;"	m	struct:bmi08x_anymotion_cfg
duration_cast	.\include\asio\detail\chrono_time_traits.hpp	/^    int64_t duration_cast() const$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
duration_type	.\include\asio\basic_deadline_timer.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:asio::basic_deadline_timer
duration_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename WaitTraits::duration_type duration_type;$/;"	t	class:asio::basic_socket_iostream
duration_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename traits_helper::duration_type duration_type;$/;"	t	class:asio::basic_socket_iostream
duration_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename WaitTraits::duration_type duration_type;$/;"	t	class:asio::basic_socket_streambuf
duration_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename traits_helper::duration_type duration_type;$/;"	t	class:asio::basic_socket_streambuf
duration_type	.\include\asio\deadline_timer_service.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:asio::deadline_timer_service
duration_type	.\include\asio\detail\chrono_time_traits.hpp	/^  typedef typename clock_type::duration duration_type;$/;"	t	struct:asio::detail::chrono_time_traits
duration_type	.\include\asio\detail\deadline_timer_service.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:asio::detail::deadline_timer_service
duration_type	.\include\asio\detail\timer_queue.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:asio::detail::timer_queue
duration_type	.\include\asio\detail\timer_queue_ptime.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	class:asio::detail::timer_queue
duration_type	.\include\asio\time_traits.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	struct:asio::time_traits
dword_ptr_t	.\include\asio\detail\win_iocp_io_context.hpp	/^  typedef DWORD dword_ptr_t;$/;"	t	class:asio::detail::win_iocp_io_context
dword_ptr_t	.\include\asio\detail\win_iocp_io_context.hpp	/^  typedef DWORD_PTR dword_ptr_t;$/;"	t	class:asio::detail::win_iocp_io_context
dynamic_string_buffer	.\include\asio\buffer.hpp	/^class dynamic_string_buffer$/;"	c	namespace:asio
dynamic_vector_buffer	.\include\asio\buffer.hpp	/^class dynamic_vector_buffer$/;"	c	namespace:asio
e	.\include\asio\bind_executor.hpp	/^  executor_binder_base(ASIO_MOVE_ARG(E) e, ASIO_MOVE_ARG(U) u)$/;"	m	class:asio::detail::executor_binder_base
ec_	.\include\asio\basic_socket_streambuf.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::basic_socket_streambuf
ec_	.\include\asio\detail\reactor_op.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::detail::reactor_op
ec_	.\include\asio\detail\resolve_op.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::detail::resolve_op
ec_	.\include\asio\detail\signal_op.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::detail::signal_op
ec_	.\include\asio\detail\wait_op.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::detail::wait_op
ec_	.\include\asio\detail\winrt_async_op.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::detail::winrt_async_op
ec_	.\include\asio\experimental\impl\redirect_error.hpp	/^  asio::error_code& ec_;$/;"	m	class:asio::experimental::detail::redirect_error_handler
ec_	.\include\asio\experimental\redirect_error.hpp	/^      ec_(ec)$/;"	f	class:asio::experimental::redirect_error_t
ec_	.\include\asio\experimental\redirect_error.hpp	/^  asio::error_code& ec_;$/;"	m	class:asio::experimental::redirect_error_t
ec_	.\include\asio\impl\spawn.hpp	/^    asio::error_code ec_;$/;"	m	class:asio::detail::coro_async_result
ec_	.\include\asio\impl\spawn.hpp	/^    asio::error_code* ec_;$/;"	m	class:asio::detail::coro_handler
ec_	.\include\asio\spawn.hpp	/^  asio::error_code* ec_;$/;"	m	class:asio::basic_yield_context
ec_	.\include\asio\ssl\detail\io.hpp	/^  asio::error_code ec_;$/;"	m	class:asio::ssl::detail::io_op
empty	.\include\asio\detail\buffered_stream_storage.hpp	/^  bool empty() const$/;"	f	class:asio::detail::buffered_stream_storage
empty	.\include\asio\detail\consuming_buffers.hpp	/^  bool empty() const$/;"	f	class:asio::detail::consuming_buffers
empty	.\include\asio\detail\consuming_buffers.hpp	/^  bool empty() const$/;"	f	class:asio::detail::consuming_single_buffer
empty	.\include\asio\detail\consuming_buffers.hpp	/^  bool empty()$/;"	f	class:asio::detail::consuming_buffers
empty	.\include\asio\detail\hash_map.hpp	/^  bool empty() const$/;"	f	class:asio::detail::hash_map
empty	.\include\asio\detail\op_queue.hpp	/^  bool empty() const$/;"	f	class:asio::detail::op_queue
empty	.\include\asio\detail\reactor_op_queue.hpp	/^  bool empty() const$/;"	f	class:asio::detail::reactor_op_queue
empty	.\include\asio\detail\timer_queue.hpp	/^  virtual bool empty() const$/;"	f	class:asio::detail::timer_queue
enable_connection_aborted	.\include\asio\detail\socket_ops.hpp	/^  enable_connection_aborted = 4,$/;"	e	enum:asio::detail::socket_ops::__anon18
enable_connection_aborted	.\include\asio\socket_base.hpp	/^    enable_connection_aborted;$/;"	t	class:asio::socket_base
enable_connection_aborted	.\include\asio\socket_base.hpp	/^  typedef implementation_defined enable_connection_aborted;$/;"	t	class:asio::socket_base
enable_connection_aborted_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  bool enable_connection_aborted_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
enable_connection_aborted_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  bool enable_connection_aborted_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
enable_connection_aborted_option	.\include\asio\detail\socket_types.hpp	/^const int enable_connection_aborted_option = 1;$/;"	m	namespace:asio::detail
enable_int_pin	.\include\bmi08x_defs.h	/^uint8_t enable_int_pin :1;$/;"	m	struct:bmi08x_int_pin_cfg
enable_loopback	.\include\asio\ip\multicast.hpp	/^  ASIO_OS_DEF(IPV6_MULTICAST_LOOP)> enable_loopback;$/;"	t	namespace:asio::ip::multicast
enable_loopback	.\include\asio\ip\multicast.hpp	/^typedef implementation_defined enable_loopback;$/;"	t	namespace:asio::ip::multicast
enabled	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  bool enabled() const$/;"	f	class:asio::detail::conditionally_enabled_mutex
enabled	.\include\asio\detail\socket_option.hpp	/^  bool enabled() const$/;"	f	class:asio::detail::socket_option::linger
enabled	.\include\asio\detail\socket_option.hpp	/^  void enabled(bool value)$/;"	f	class:asio::detail::socket_option::linger
enabled_	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  const bool enabled_;$/;"	m	class:asio::detail::conditionally_enabled_mutex
end	.\include\asio\buffers_iterator.hpp	/^  static buffers_iterator end(const BufferSequence& buffers)$/;"	f	class:asio::buffers_iterator
end	.\include\asio\detail\hash_map.hpp	/^  const_iterator end() const$/;"	f	class:asio::detail::hash_map
end	.\include\asio\detail\hash_map.hpp	/^  iterator end()$/;"	f	class:asio::detail::hash_map
end	.\include\asio\detail\reactor_op_queue.hpp	/^  iterator end() { return operations_.end(); }$/;"	f	class:asio::detail::reactor_op_queue
end	.\include\asio\ip\basic_resolver_results.hpp	/^  const_iterator end() const$/;"	f	class:asio::ip::basic_resolver_results
end_	.\include\asio\buffers_iterator.hpp	/^  buffer_sequence_iterator_type end_;$/;"	m	class:asio::buffers_iterator
end_	.\include\asio\impl\connect.hpp	/^    Iterator end_;$/;"	m	class:asio::detail::iterator_connect_op
end_	.\include\asio\ip\address_v4_range.hpp	/^      end_(last)$/;"	f	class:asio::ip::basic_address_range
end_	.\include\asio\ip\address_v4_range.hpp	/^      end_(other.end_)$/;"	f	class:asio::ip::basic_address_range
end_	.\include\asio\ip\address_v4_range.hpp	/^  iterator end_;$/;"	m	class:asio::ip::basic_address_range
end_	.\include\asio\ip\address_v6_range.hpp	/^      end_(last)$/;"	f	class:asio::ip::basic_address_range
end_	.\include\asio\ip\address_v6_range.hpp	/^      end_(other.end_)$/;"	f	class:asio::ip::basic_address_range
end_	.\include\asio\ip\address_v6_range.hpp	/^  iterator end_;$/;"	m	class:asio::ip::basic_address_range
end_offset_	.\include\asio\detail\buffered_stream_storage.hpp	/^  size_type end_offset_;$/;"	m	class:asio::detail::buffered_stream_storage
endpoint	.\include\asio\generic\datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:asio::generic::datagram_protocol
endpoint	.\include\asio\generic\detail\endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:asio::generic::detail::endpoint
endpoint	.\include\asio\generic\detail\endpoint.hpp	/^class endpoint$/;"	c	namespace:asio::generic::detail
endpoint	.\include\asio\generic\raw_protocol.hpp	/^  typedef basic_endpoint<raw_protocol> endpoint;$/;"	t	class:asio::generic::raw_protocol
endpoint	.\include\asio\generic\seq_packet_protocol.hpp	/^  typedef basic_endpoint<seq_packet_protocol> endpoint;$/;"	t	class:asio::generic::seq_packet_protocol
endpoint	.\include\asio\generic\stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:asio::generic::stream_protocol
endpoint	.\include\asio\ip\basic_resolver_entry.hpp	/^  endpoint_type endpoint() const$/;"	f	class:asio::ip::basic_resolver_entry
endpoint	.\include\asio\ip\detail\endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:asio::ip::detail::endpoint
endpoint	.\include\asio\ip\detail\endpoint.hpp	/^class endpoint$/;"	c	namespace:asio::ip::detail
endpoint	.\include\asio\ip\icmp.hpp	/^  typedef basic_endpoint<icmp> endpoint;$/;"	t	class:asio::ip::icmp
endpoint	.\include\asio\ip\tcp.hpp	/^  typedef basic_endpoint<tcp> endpoint;$/;"	t	class:asio::ip::tcp
endpoint	.\include\asio\ip\udp.hpp	/^  typedef basic_endpoint<udp> endpoint;$/;"	t	class:asio::ip::udp
endpoint	.\include\asio\local\datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:asio::local::datagram_protocol
endpoint	.\include\asio\local\detail\endpoint.hpp	/^  endpoint(const endpoint& other)$/;"	f	class:asio::local::detail::endpoint
endpoint	.\include\asio\local\detail\endpoint.hpp	/^class endpoint$/;"	c	namespace:asio::local::detail
endpoint	.\include\asio\local\stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:asio::local::stream_protocol
endpoint	.\include\asio\placeholders.hpp	/^unspecified endpoint;$/;"	m	namespace:asio::placeholders
endpoint	.\include\udp_channel.hpp	/^	udp::endpoint endpoint;$/;"	m	class:udp_channel
endpoint_	.\include\asio\detail\resolve_endpoint_op.hpp	/^  endpoint_type endpoint_;$/;"	m	class:asio::detail::resolve_endpoint_op
endpoint_	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  Endpoint& endpoint_;$/;"	m	class:asio::detail::win_iocp_socket_recvfrom_op
endpoint_	.\include\asio\ip\basic_resolver_entry.hpp	/^  endpoint_type endpoint_;$/;"	m	class:asio::ip::basic_resolver_entry
endpoint_size	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  int& endpoint_size()$/;"	f	class:asio::detail::win_iocp_socket_recvfrom_op
endpoint_size_	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  int endpoint_size_;$/;"	m	class:asio::detail::win_iocp_socket_recvfrom_op
endpoint_type	.\include\asio\basic_datagram_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_datagram_socket
endpoint_type	.\include\asio\basic_raw_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_raw_socket
endpoint_type	.\include\asio\basic_seq_packet_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_seq_packet_socket
endpoint_type	.\include\asio\basic_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_socket
endpoint_type	.\include\asio\basic_socket_acceptor.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_socket_acceptor
endpoint_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_socket_iostream
endpoint_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_socket_streambuf
endpoint_type	.\include\asio\basic_stream_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::basic_stream_socket
endpoint_type	.\include\asio\datagram_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::datagram_socket_service
endpoint_type	.\include\asio\detail\null_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::null_socket_service
endpoint_type	.\include\asio\detail\reactive_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::reactive_socket_service
endpoint_type	.\include\asio\detail\resolve_endpoint_op.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::resolve_endpoint_op
endpoint_type	.\include\asio\detail\resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::resolver_service
endpoint_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::win_iocp_socket_service
endpoint_type	.\include\asio\detail\winrt_resolve_op.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::winrt_resolve_op
endpoint_type	.\include\asio\detail\winrt_resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::winrt_resolver_service
endpoint_type	.\include\asio\detail\winrt_ssocket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::detail::winrt_ssocket_service
endpoint_type	.\include\asio\ip\basic_resolver.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:asio::ip::basic_resolver
endpoint_type	.\include\asio\ip\basic_resolver_entry.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:asio::ip::basic_resolver_entry
endpoint_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:asio::ip::basic_resolver_results
endpoint_type	.\include\asio\ip\resolver_service.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:asio::ip::resolver_service
endpoint_type	.\include\asio\raw_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::raw_socket_service
endpoint_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::seq_packet_socket_service
endpoint_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:asio::socket_acceptor_service
endpoint_type	.\include\asio\stream_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:asio::stream_socket_service
endpoints_	.\include\asio\impl\connect.hpp	/^    EndpointSequence endpoints_;$/;"	m	class:asio::detail::range_connect_op
engine	.\include\asio\ssl\detail\engine.hpp	/^class engine$/;"	c	namespace:asio::ssl::detail
engine_	.\include\asio\ssl\detail\stream_core.hpp	/^  engine engine_;$/;"	m	struct:asio::ssl::detail::stream_core
enqueue_operation	.\include\asio\detail\reactor_op_queue.hpp	/^  bool enqueue_operation(Descriptor descriptor, reactor_op* op)$/;"	f	class:asio::detail::reactor_op_queue
enqueue_timer	.\include\asio\detail\timer_queue.hpp	/^  bool enqueue_timer(const time_type& time, per_timer_data& timer, wait_op* op)$/;"	f	class:asio::detail::timer_queue
entry_event_	.\include\asio\detail\win_thread.hpp	/^    ::HANDLE entry_event_;$/;"	m	class:asio::detail::win_thread::func_base
eof	.\include\asio\error.hpp	/^  eof,$/;"	e	enum:asio::error::misc_errors
epoll_fd_	.\include\asio\detail\epoll_reactor.hpp	/^  int epoll_fd_;$/;"	m	class:asio::detail::epoll_reactor
epoll_reactor	.\include\asio\detail\epoll_reactor.hpp	/^class epoll_reactor$/;"	c	namespace:asio::detail
epoll_size	.\include\asio\detail\epoll_reactor.hpp	/^  enum { epoll_size = 20000 };$/;"	e	enum:asio::detail::epoll_reactor::__anon14
equal	.\include\asio\buffers_iterator.hpp	/^  bool equal(const buffers_iterator& other) const$/;"	f	class:asio::buffers_iterator
equal	.\include\asio\ip\basic_resolver_iterator.hpp	/^  bool equal(const basic_resolver_iterator& other) const$/;"	f	class:asio::ip::basic_resolver_iterator
erase	.\include\asio\detail\hash_map.hpp	/^  void erase(const K& k)$/;"	f	class:asio::detail::hash_map
erase	.\include\asio\detail\hash_map.hpp	/^  void erase(iterator it)$/;"	f	class:asio::detail::hash_map
err_code	.\include\bmi08x_defs.h	/^uint8_t err_code;$/;"	m	struct:bmi08x_err_reg
error	.\include\asio\basic_socket_iostream.hpp	/^  const asio::error_code& error() const$/;"	f	class:asio::basic_socket_iostream
error	.\include\asio\basic_socket_streambuf.hpp	/^  const asio::error_code& error() const$/;"	f	class:asio::basic_socket_streambuf
error	.\include\asio\error.hpp	/^namespace error {$/;"	n	namespace:asio
error	.\include\asio\placeholders.hpp	/^unspecified error;$/;"	m	namespace:asio::placeholders
error	.\include\asio\ssl\error.hpp	/^namespace error {$/;"	n	namespace:asio
error	.\include\asio\ssl\error.hpp	/^namespace error {$/;"	n	namespace:asio::ssl
error_category	.\include\asio\error_code.hpp	/^typedef std::error_category error_category;$/;"	t	namespace:asio
error_code	.\include\asio\error_code.hpp	/^  error_code()$/;"	f	class:asio::error_code
error_code	.\include\asio\error_code.hpp	/^  error_code(ErrorEnum e)$/;"	f	class:asio::error_code
error_code	.\include\asio\error_code.hpp	/^  error_code(int v, const error_category& c)$/;"	f	class:asio::error_code
error_code	.\include\asio\error_code.hpp	/^class error_code$/;"	c	namespace:asio
error_code	.\include\asio\error_code.hpp	/^typedef std::error_code error_code;$/;"	t	namespace:asio
error_wrapper	.\include\asio\detail\descriptor_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:asio::detail::descriptor_ops
even	.\include\asio\serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:asio::serial_port_base::parity::type
event	.\include\asio\detail\event.hpp	/^typedef null_event event;$/;"	t	namespace:asio::detail
event	.\include\asio\detail\scheduler.hpp	/^  typedef conditionally_enabled_event event;$/;"	t	class:asio::detail::scheduler
event_	.\include\asio\detail\conditionally_enabled_event.hpp	/^  asio::detail::event event_;$/;"	m	class:asio::detail::conditionally_enabled_event
event_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  asio::detail::event event_;$/;"	m	class:asio::detail::winrt_timer_scheduler
eventfd_select_interrupter	.\include\asio\detail\eventfd_select_interrupter.hpp	/^class eventfd_select_interrupter$/;"	c	namespace:asio::detail
events_	.\include\asio\detail\win_event.hpp	/^  HANDLE events_[2];$/;"	m	class:asio::detail::win_event
except_op	.\include\asio\detail\dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::dev_poll_reactor::op_types
except_op	.\include\asio\detail\epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::epoll_reactor::op_types
except_op	.\include\asio\detail\kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::kqueue_reactor::op_types
except_op	.\include\asio\detail\select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:asio::detail::select_reactor::op_types
exchange	.\include\asio\experimental\co_spawn.hpp	/^    : awaitee_(std::exchange(other.awaitee_, nullptr))$/;"	f	class:asio::experimental::awaitable
exchange	.\include\asio\experimental\co_spawn.hpp	/^    : awaiter_(std::exchange(other.awaiter_, nullptr))$/;"	f	class:asio::experimental::await_token
exchange	.\include\asio\experimental\impl\co_spawn.hpp	/^      awaitee_(std::exchange(other.awaitee_, nullptr))$/;"	f	class:asio::experimental::detail::await_handler_base
exchange	.\include\asio\experimental\impl\co_spawn.hpp	/^    : awaiter_(std::exchange(other.awaiter_, nullptr))$/;"	f	class:asio::experimental::detail::awaiter_task
execute	.\source\board_if.cpp	/^void board_if::execute(msg_t* msg)$/;"	f	class:board_if
execute	.\source\udp_if.cpp	/^void udp_if::execute()$/;"	f	class:udp_if
execution_context	.\include\asio\execution_context.hpp	/^class execution_context$/;"	c	namespace:asio
execution_context_service_base	.\include\asio\execution_context.hpp	/^  execution_context_service_base(execution_context& e)$/;"	f	class:asio::detail::execution_context_service_base
execution_context_service_base	.\include\asio\execution_context.hpp	/^class execution_context_service_base$/;"	c	namespace:asio::detail
executor	.\include\asio\executor.hpp	/^class executor$/;"	c	namespace:asio
executor	.\include\asio\experimental\co_spawn.hpp	/^constexpr inline executor_t executor() { return {}; }$/;"	f	namespace:asio::experimental::this_coro
executor	.\include\asio\impl\executor.hpp	/^executor::executor(Executor e)$/;"	f	class:asio::executor
executor	.\include\asio\impl\executor.hpp	/^executor::executor(allocator_arg_t, const Allocator& a, Executor e)$/;"	f	class:asio::executor
executor_	.\include\asio\bind_executor.hpp	/^      target_(executor_arg_t(), executor_, ASIO_MOVE_CAST(U)(u))$/;"	m	class:asio::detail::executor_binder_base
executor_	.\include\asio\bind_executor.hpp	/^  Executor executor_;$/;"	m	class:asio::detail::executor_binder_base
executor_	.\include\asio\detail\handler_work.hpp	/^  typename associated_executor<Handler>::type executor_;$/;"	m	class:asio::detail::handler_work
executor_	.\include\asio\executor_work_guard.hpp	/^  executor_type executor_;$/;"	m	class:asio::executor_work_guard
executor_	.\include\asio\experimental\impl\co_spawn.hpp	/^  alignas(Executor) unsigned char executor_[sizeof(Executor)];$/;"	m	class:asio::experimental::detail::awaiter
executor_	.\include\asio\impl\executor.hpp	/^  Executor executor_;$/;"	m	class:asio::executor::impl
executor_	.\include\asio\impl\executor.hpp	/^  system_executor executor_;$/;"	m	class:asio::executor::impl
executor_	.\include\asio\strand.hpp	/^  Executor executor_;$/;"	m	class:asio::strand
executor_arg	.\include\asio\uses_executor.hpp	/^__declspec(selectany) executor_arg_t executor_arg;$/;"	m	namespace:asio
executor_arg	.\include\asio\uses_executor.hpp	/^constexpr executor_arg_t executor_arg;$/;"	m	namespace:asio
executor_arg_t	.\include\asio\uses_executor.hpp	/^struct executor_arg_t$/;"	s	namespace:asio
executor_binder	.\include\asio\bind_executor.hpp	/^  executor_binder(const executor_binder& other)$/;"	f	class:asio::executor_binder
executor_binder	.\include\asio\bind_executor.hpp	/^  executor_binder(const executor_binder<U, OtherExecutor>& other)$/;"	f	class:asio::executor_binder
executor_binder	.\include\asio\bind_executor.hpp	/^  executor_binder(executor_arg_t, const executor_type& e,$/;"	f	class:asio::executor_binder
executor_binder	.\include\asio\bind_executor.hpp	/^  executor_binder(executor_binder&& other)$/;"	f	class:asio::executor_binder
executor_binder	.\include\asio\bind_executor.hpp	/^  executor_binder(executor_binder<U, OtherExecutor>&& other)$/;"	f	class:asio::executor_binder
executor_binder	.\include\asio\bind_executor.hpp	/^class executor_binder$/;"	c	namespace:asio
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type {};$/;"	s	namespace:asio::detail
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type<R(&)(A1)>$/;"	s	namespace:asio::detail
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type<R(&)(A1, A2)>$/;"	s	namespace:asio::detail
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type<R(*)(A1)>$/;"	s	namespace:asio::detail
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type<R(*)(A1, A2)>$/;"	s	namespace:asio::detail
executor_binder_argument_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_type<T,$/;"	s	namespace:asio::detail
executor_binder_argument_types	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_types {};$/;"	s	namespace:asio::detail
executor_binder_argument_types	.\include\asio\bind_executor.hpp	/^struct executor_binder_argument_types<T,$/;"	s	namespace:asio::detail
executor_binder_base	.\include\asio\bind_executor.hpp	/^class executor_binder_base<T, Executor, false>$/;"	c	namespace:asio::detail
executor_binder_base	.\include\asio\bind_executor.hpp	/^class executor_binder_base<T, Executor, true>$/;"	c	namespace:asio::detail
executor_binder_check	.\include\asio\bind_executor.hpp	/^struct executor_binder_check$/;"	s	namespace:asio::detail
executor_binder_result_of0	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_of0$/;"	s	namespace:asio::detail
executor_binder_result_of0	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_of0<T,$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(&)()>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(&)(A1)>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(&)(A1, A2)>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(*)()>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(*)(A1)>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<R(*)(A1, A2)>$/;"	s	namespace:asio::detail
executor_binder_result_type	.\include\asio\bind_executor.hpp	/^struct executor_binder_result_type<T,$/;"	s	namespace:asio::detail
executor_memfns_base	.\include\asio\detail\is_executor.hpp	/^struct executor_memfns_base$/;"	s	namespace:asio::detail
executor_memfns_check	.\include\asio\detail\is_executor.hpp	/^struct executor_memfns_check$/;"	s	namespace:asio::detail
executor_memfns_derived	.\include\asio\detail\is_executor.hpp	/^struct executor_memfns_derived$/;"	s	namespace:asio::detail
executor_op	.\include\asio\detail\executor_op.hpp	/^class executor_op : public Operation$/;"	c	namespace:asio::detail
executor_t	.\include\asio\experimental\co_spawn.hpp	/^struct executor_t {};$/;"	s	namespace:asio::experimental::this_coro
executor_type	.\include\asio\basic_deadline_timer.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::basic_deadline_timer
executor_type	.\include\asio\basic_io_object.hpp	/^  typedef asio::io_context::executor_type executor_type;$/;"	t	class:asio::basic_io_object
executor_type	.\include\asio\basic_socket.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::basic_socket
executor_type	.\include\asio\basic_socket_acceptor.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::basic_socket_acceptor
executor_type	.\include\asio\basic_waitable_timer.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::basic_waitable_timer
executor_type	.\include\asio\bind_executor.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::executor_binder
executor_type	.\include\asio\buffered_read_stream.hpp	/^  typedef typename lowest_layer_type::executor_type executor_type;$/;"	t	class:asio::buffered_read_stream
executor_type	.\include\asio\buffered_stream.hpp	/^  typedef typename lowest_layer_type::executor_type executor_type;$/;"	t	class:asio::buffered_stream
executor_type	.\include\asio\buffered_write_stream.hpp	/^  typedef typename lowest_layer_type::executor_type executor_type;$/;"	t	class:asio::buffered_write_stream
executor_type	.\include\asio\executor_work_guard.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::executor_work_guard
executor_type	.\include\asio\experimental\co_spawn.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::experimental::await_token
executor_type	.\include\asio\experimental\co_spawn.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::experimental::awaitable
executor_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::experimental::detail::awaiter
executor_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef Executor executor_type;$/;"	t	class:asio::experimental::detail::awaiter_task
executor_type	.\include\asio\impl\use_future.hpp	/^  typedef promise_executor<T> executor_type;$/;"	t	class:asio::detail::promise_creator
executor_type	.\include\asio\io_context.hpp	/^  explicit executor_type(io_context& i) : io_context_(i) {}$/;"	f	class:asio::io_context::executor_type
executor_type	.\include\asio\io_context.hpp	/^class io_context::executor_type$/;"	c	class:asio::io_context
executor_type	.\include\asio\ip\basic_resolver.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::ip::basic_resolver
executor_type	.\include\asio\posix\descriptor.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::posix::descriptor
executor_type	.\include\asio\ssl\stream.hpp	/^  typedef typename lowest_layer_type::executor_type executor_type;$/;"	t	class:asio::ssl::stream
executor_type	.\include\asio\system_context.hpp	/^  typedef system_executor executor_type;$/;"	t	class:asio::system_context
executor_type	.\include\asio\thread_pool.hpp	/^  explicit executor_type(thread_pool& p) : pool_(p) {}$/;"	f	class:asio::thread_pool::executor_type
executor_type	.\include\asio\thread_pool.hpp	/^class thread_pool::executor_type$/;"	c	class:asio::thread_pool
executor_type	.\include\asio\windows\overlapped_handle.hpp	/^  typedef io_context::executor_type executor_type;$/;"	t	class:asio::windows::overlapped_handle
executor_work_guard	.\include\asio\executor_work_guard.hpp	/^  executor_work_guard(executor_work_guard&& other)$/;"	f	class:asio::executor_work_guard
executor_work_guard	.\include\asio\executor_work_guard.hpp	/^class executor_work_guard$/;"	c	namespace:asio
exit_event_	.\include\asio\detail\win_thread.hpp	/^    ::HANDLE exit_event_;$/;"	m	class:asio::detail::win_thread::func_base
exit_event_	.\include\asio\detail\win_thread.hpp	/^  ::HANDLE exit_event_;$/;"	m	class:asio::detail::win_thread
experimental	.\include\asio\experimental\co_spawn.hpp	/^namespace experimental {$/;"	n	namespace:asio
experimental	.\include\asio\experimental\detached.hpp	/^namespace experimental {$/;"	n	namespace:asio
experimental	.\include\asio\experimental\impl\co_spawn.hpp	/^namespace experimental {$/;"	n	namespace:asio
experimental	.\include\asio\experimental\impl\co_spawn.hpp	/^namespace std { namespace experimental {$/;"	n	namespace:std
experimental	.\include\asio\experimental\impl\detached.hpp	/^namespace experimental {$/;"	n	namespace:asio
experimental	.\include\asio\experimental\impl\redirect_error.hpp	/^namespace experimental {$/;"	n	namespace:asio
experimental	.\include\asio\experimental\redirect_error.hpp	/^namespace experimental {$/;"	n	namespace:asio
expires_after	.\include\asio\basic_socket_iostream.hpp	/^  void expires_after(const duration& expiry_time)$/;"	f	class:asio::basic_socket_iostream
expires_after	.\include\asio\basic_socket_streambuf.hpp	/^  void expires_after(const duration& expiry_time)$/;"	f	class:asio::basic_socket_streambuf
expires_after	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t expires_after(const duration& expiry_time)$/;"	f	class:asio::basic_waitable_timer
expires_after	.\include\asio\detail\deadline_timer_service.hpp	/^  std::size_t expires_after(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
expires_after	.\include\asio\waitable_timer_service.hpp	/^  std::size_t expires_after(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
expires_at	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time)$/;"	f	class:asio::basic_deadline_timer
expires_at	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time,$/;"	f	class:asio::basic_deadline_timer
expires_at	.\include\asio\basic_deadline_timer.hpp	/^  time_type expires_at() const$/;"	f	class:asio::basic_deadline_timer
expires_at	.\include\asio\basic_socket_iostream.hpp	/^  time_point expires_at() const$/;"	f	class:asio::basic_socket_iostream
expires_at	.\include\asio\basic_socket_iostream.hpp	/^  void expires_at(const time_point& expiry_time)$/;"	f	class:asio::basic_socket_iostream
expires_at	.\include\asio\basic_socket_streambuf.hpp	/^  time_point expires_at() const$/;"	f	class:asio::basic_socket_streambuf
expires_at	.\include\asio\basic_socket_streambuf.hpp	/^  void expires_at(const time_point& expiry_time)$/;"	f	class:asio::basic_socket_streambuf
expires_at	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time)$/;"	f	class:asio::basic_waitable_timer
expires_at	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t expires_at(const time_point& expiry_time,$/;"	f	class:asio::basic_waitable_timer
expires_at	.\include\asio\basic_waitable_timer.hpp	/^  time_point expires_at() const$/;"	f	class:asio::basic_waitable_timer
expires_at	.\include\asio\deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:asio::deadline_timer_service
expires_at	.\include\asio\deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:asio::deadline_timer_service
expires_at	.\include\asio\detail\deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
expires_at	.\include\asio\detail\deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:asio::detail::deadline_timer_service
expires_at	.\include\asio\waitable_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
expires_at	.\include\asio\waitable_timer_service.hpp	/^  time_point expires_at(const implementation_type& impl) const$/;"	f	class:asio::waitable_timer_service
expires_from_now	.\include\asio\basic_deadline_timer.hpp	/^  duration_type expires_from_now() const$/;"	f	class:asio::basic_deadline_timer
expires_from_now	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time)$/;"	f	class:asio::basic_deadline_timer
expires_from_now	.\include\asio\basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time,$/;"	f	class:asio::basic_deadline_timer
expires_from_now	.\include\asio\basic_socket_iostream.hpp	/^  duration expires_from_now() const$/;"	f	class:asio::basic_socket_iostream
expires_from_now	.\include\asio\basic_socket_iostream.hpp	/^  void expires_from_now(const duration& expiry_time)$/;"	f	class:asio::basic_socket_iostream
expires_from_now	.\include\asio\basic_socket_streambuf.hpp	/^  duration expires_from_now() const$/;"	f	class:asio::basic_socket_streambuf
expires_from_now	.\include\asio\basic_socket_streambuf.hpp	/^  void expires_from_now(const duration& expiry_time)$/;"	f	class:asio::basic_socket_streambuf
expires_from_now	.\include\asio\basic_waitable_timer.hpp	/^  duration expires_from_now() const$/;"	f	class:asio::basic_waitable_timer
expires_from_now	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time)$/;"	f	class:asio::basic_waitable_timer
expires_from_now	.\include\asio\basic_waitable_timer.hpp	/^  std::size_t expires_from_now(const duration& expiry_time,$/;"	f	class:asio::basic_waitable_timer
expires_from_now	.\include\asio\deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:asio::deadline_timer_service
expires_from_now	.\include\asio\deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:asio::deadline_timer_service
expires_from_now	.\include\asio\detail\deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:asio::detail::deadline_timer_service
expires_from_now	.\include\asio\detail\deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
expires_from_now	.\include\asio\waitable_timer_service.hpp	/^  duration expires_from_now(const implementation_type& impl) const$/;"	f	class:asio::waitable_timer_service
expires_from_now	.\include\asio\waitable_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
expiry	.\include\asio\basic_socket_iostream.hpp	/^  time_point expiry() const$/;"	f	class:asio::basic_socket_iostream
expiry	.\include\asio\basic_socket_streambuf.hpp	/^  time_point expiry() const$/;"	f	class:asio::basic_socket_streambuf
expiry	.\include\asio\basic_waitable_timer.hpp	/^  time_point expiry() const$/;"	f	class:asio::basic_waitable_timer
expiry	.\include\asio\detail\deadline_timer_service.hpp	/^    time_type expiry;$/;"	m	struct:asio::detail::deadline_timer_service::implementation_type
expiry	.\include\asio\detail\deadline_timer_service.hpp	/^  time_type expiry(const implementation_type& impl) const$/;"	f	class:asio::detail::deadline_timer_service
expiry	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::deadline_timer::time_type expiry($/;"	f	struct:asio::ssl::detail::stream_core
expiry	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::steady_timer::time_point expiry($/;"	f	struct:asio::ssl::detail::stream_core
expiry	.\include\asio\waitable_timer_service.hpp	/^  time_point expiry(const implementation_type& impl) const$/;"	f	class:asio::waitable_timer_service
expiry_time_	.\include\asio\basic_socket_streambuf.hpp	/^  time_point expiry_time_;$/;"	m	class:asio::basic_socket_streambuf
expr_	.\include\asio\impl\read_until.hpp	/^    RegEx expr_;$/;"	m	class:asio::detail::read_until_expr_op
ext_bio_	.\include\asio\ssl\detail\engine.hpp	/^  BIO* ext_bio_;$/;"	m	class:asio::ssl::detail::engine
f	.\include\asio\executor.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::executor
f	.\include\asio\executor.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::executor
f	.\include\asio\executor.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::executor
f	.\include\asio\impl\executor.hpp	/^void executor::defer(ASIO_MOVE_ARG(Function) f,$/;"	m	namespace:asio
f	.\include\asio\impl\executor.hpp	/^void executor::dispatch(ASIO_MOVE_ARG(Function) f,$/;"	m	namespace:asio
f	.\include\asio\impl\executor.hpp	/^void executor::post(ASIO_MOVE_ARG(Function) f,$/;"	m	namespace:asio
f	.\include\asio\impl\io_context.hpp	/^    ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	namespace:asio
f	.\include\asio\impl\system_executor.hpp	/^    ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	namespace:asio
f	.\include\asio\impl\system_executor.hpp	/^    ASIO_MOVE_ARG(Function) f, const Allocator&) const$/;"	m	namespace:asio
f	.\include\asio\impl\thread_pool.hpp	/^    ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	namespace:asio
f	.\include\asio\impl\use_future.hpp	/^  void defer(ASIO_MOVE_ARG(F) f, const A& a) const$/;"	m	class:asio::detail::promise_executor
f	.\include\asio\impl\use_future.hpp	/^  void dispatch(ASIO_MOVE_ARG(F) f, const A&) const$/;"	m	class:asio::detail::promise_executor
f	.\include\asio\impl\use_future.hpp	/^  void post(ASIO_MOVE_ARG(F) f, const A& a) const$/;"	m	class:asio::detail::promise_executor
f	.\include\asio\io_context.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::io_context::executor_type
f	.\include\asio\io_context.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::io_context::executor_type
f	.\include\asio\io_context.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::io_context::executor_type
f	.\include\asio\io_context_strand.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::io_context::strand
f	.\include\asio\io_context_strand.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::io_context::strand
f	.\include\asio\io_context_strand.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::io_context::strand
f	.\include\asio\strand.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::strand
f	.\include\asio\strand.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::strand
f	.\include\asio\strand.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const$/;"	m	class:asio::strand
f	.\include\asio\system_executor.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::system_executor
f	.\include\asio\system_executor.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::system_executor
f	.\include\asio\system_executor.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::system_executor
f	.\include\asio\thread_pool.hpp	/^  void defer(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::thread_pool::executor_type
f	.\include\asio\thread_pool.hpp	/^  void dispatch(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::thread_pool::executor_type
f	.\include\asio\thread_pool.hpp	/^  void post(ASIO_MOVE_ARG(Function) f, const Allocator& a) const;$/;"	m	class:asio::thread_pool::executor_type
f_	.\include\asio\detail\posix_thread.hpp	/^    Function f_;$/;"	m	class:asio::detail::posix_thread::func
f_	.\include\asio\detail\win_thread.hpp	/^    Function f_;$/;"	m	class:asio::detail::win_thread::func
f_	.\include\asio\detail\winapp_thread.hpp	/^    Function f_;$/;"	m	class:asio::detail::winapp_thread::func
f_	.\include\asio\detail\wince_thread.hpp	/^    Function f_;$/;"	m	class:asio::detail::wince_thread::func
f_	.\include\asio\impl\use_future.hpp	/^  typename decay<F>::type f_;$/;"	m	class:asio::detail::promise_invoker
factory_type	.\include\asio\detail\service_registry.hpp	/^  typedef execution_context::service*(*factory_type)(void*);$/;"	t	class:asio::detail::service_registry::execution_context
fakeHandler	.\source\main.cpp	/^void fakeHandler(board_msg_t* board_msg)$/;"	f
fallback_func_type	.\include\asio\impl\connect.hpp	/^    typedef char (*fallback_func_type)(...);$/;"	t	struct:asio::detail::legacy_connect_condition_helper
family	.\include\asio\generic\datagram_protocol.hpp	/^  int family() const$/;"	f	class:asio::generic::datagram_protocol
family	.\include\asio\generic\detail\endpoint.hpp	/^  int family() const$/;"	f	class:asio::generic::detail::endpoint
family	.\include\asio\generic\raw_protocol.hpp	/^  int family() const$/;"	f	class:asio::generic::raw_protocol
family	.\include\asio\generic\seq_packet_protocol.hpp	/^  int family() const$/;"	f	class:asio::generic::seq_packet_protocol
family	.\include\asio\generic\stream_protocol.hpp	/^  int family() const$/;"	f	class:asio::generic::stream_protocol
family	.\include\asio\ip\icmp.hpp	/^  int family() const$/;"	f	class:asio::ip::icmp
family	.\include\asio\ip\tcp.hpp	/^  int family() const$/;"	f	class:asio::ip::tcp
family	.\include\asio\ip\udp.hpp	/^  int family() const$/;"	f	class:asio::ip::udp
family	.\include\asio\local\datagram_protocol.hpp	/^  int family() const$/;"	f	class:asio::local::datagram_protocol
family	.\include\asio\local\stream_protocol.hpp	/^  int family() const$/;"	f	class:asio::local::stream_protocol
family_	.\include\asio\generic\datagram_protocol.hpp	/^  int family_;$/;"	m	class:asio::generic::datagram_protocol
family_	.\include\asio\generic\raw_protocol.hpp	/^  int family_;$/;"	m	class:asio::generic::raw_protocol
family_	.\include\asio\generic\seq_packet_protocol.hpp	/^  int family_;$/;"	m	class:asio::generic::seq_packet_protocol
family_	.\include\asio\generic\stream_protocol.hpp	/^  int family_;$/;"	m	class:asio::generic::stream_protocol
family_	.\include\asio\ip\icmp.hpp	/^  int family_;$/;"	m	class:asio::ip::icmp
family_	.\include\asio\ip\tcp.hpp	/^  int family_;$/;"	m	class:asio::ip::tcp
family_	.\include\asio\ip\udp.hpp	/^  int family_;$/;"	m	class:asio::ip::udp
fast_dispatch_	.\include\asio\executor.hpp	/^    const bool fast_dispatch_;$/;"	m	class:asio::executor::impl_base
fatal_err	.\include\bmi08x_defs.h	/^uint8_t fatal_err;$/;"	m	struct:bmi08x_err_reg
fault	.\include\asio\error.hpp	/^  fault = ASIO_SOCKET_ERROR(EFAULT),$/;"	e	enum:asio::error::basic_errors
fd_array	.\include\asio\detail\win_fd_set_adapter.hpp	/^    SOCKET fd_array[1];$/;"	m	struct:asio::detail::win_fd_set_adapter::win_fd_set
fd_count	.\include\asio\detail\win_fd_set_adapter.hpp	/^    u_int fd_count;$/;"	m	struct:asio::detail::win_fd_set_adapter::win_fd_set
fd_set_	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  mutable fd_set fd_set_;$/;"	m	class:asio::detail::posix_fd_set_adapter
fd_set_	.\include\asio\detail\win_fd_set_adapter.hpp	/^  win_fd_set* fd_set_;$/;"	m	class:asio::detail::win_fd_set_adapter
fd_set_adapter	.\include\asio\detail\fd_set_adapter.hpp	/^typedef win_fd_set_adapter fd_set_adapter;$/;"	t	namespace:asio::detail
fd_set_failure	.\include\asio\error.hpp	/^  fd_set_failure$/;"	e	enum:asio::error::misc_errors
fd_sets_	.\include\asio\detail\select_reactor.hpp	/^  fd_set_adapter fd_sets_[max_select_ops];$/;"	m	class:asio::detail::select_reactor
fenced_block	.\include\asio\detail\fenced_block.hpp	/^typedef null_fenced_block fenced_block;$/;"	t	namespace:asio::detail
file_format	.\include\asio\ssl\context_base.hpp	/^  enum file_format$/;"	g	class:asio::ssl::context_base
fill	.\include\asio\buffered_stream.hpp	/^  std::size_t fill()$/;"	f	class:asio::buffered_stream
fill	.\include\asio\buffered_stream.hpp	/^  std::size_t fill(asio::error_code& ec)$/;"	f	class:asio::buffered_stream
fill	.\include\asio\impl\buffered_read_stream.hpp	/^std::size_t buffered_read_stream<Stream>::fill()$/;"	f	class:asio::buffered_read_stream
fill	.\include\asio\impl\buffered_read_stream.hpp	/^std::size_t buffered_read_stream<Stream>::fill(asio::error_code& ec)$/;"	f	class:asio::buffered_read_stream
final_suspend	.\include\asio\experimental\impl\co_spawn.hpp	/^  auto final_suspend()$/;"	f	class:asio::experimental::detail::awaitee_base
final_suspend	.\include\asio\experimental\impl\co_spawn.hpp	/^  auto final_suspend()$/;"	f	class:asio::experimental::detail::awaiter
final_suspender	.\include\asio\experimental\impl\co_spawn.hpp	/^  struct final_suspender$/;"	s	class:asio::experimental::detail::awaitee_base
find	.\include\asio\detail\hash_map.hpp	/^  const_iterator find(const K& k) const$/;"	f	class:asio::detail::hash_map
find	.\include\asio\detail\hash_map.hpp	/^  iterator find(const K& k)$/;"	f	class:asio::detail::hash_map
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(Iterator begin, Iterator end)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const Buffers& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const asio::const_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const asio::const_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const asio::mutable_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const asio::mutable_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const boost::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static Buffer first(const std::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
first	.\include\asio\detail\hash_map.hpp	/^    iterator first;$/;"	m	struct:asio::detail::hash_map::bucket_type
first	.\include\asio\detail\object_pool.hpp	/^  Object* first()$/;"	f	class:asio::detail::object_pool
first_	.\include\asio\detail\thread_group.hpp	/^  item* first_;$/;"	m	class:asio::detail::thread_group
first_	.\include\asio\detail\timer_queue_set.hpp	/^  timer_queue_base* first_;$/;"	m	class:asio::detail::timer_queue_set
first_argument_type	.\include\asio\bind_executor.hpp	/^  typedef A1 first_argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_type
first_argument_type	.\include\asio\bind_executor.hpp	/^  typedef see_below first_argument_type;$/;"	t	class:asio::executor_binder
first_argument_type	.\include\asio\bind_executor.hpp	/^  typedef typename T::first_argument_type first_argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_types
first_service_	.\include\asio\detail\service_registry.hpp	/^  execution_context::service* first_service_;$/;"	m	class:asio::detail::service_registry
flags	.\include\asio\ip\resolver_base.hpp	/^  typedef unspecified flags;$/;"	t	class:asio::ip::resolver_base
flags_	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:asio::detail::reactive_socket_recv_op_base
flags_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op_base
flags_	.\include\asio\detail\reactive_socket_send_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:asio::detail::reactive_socket_send_op_base
flags_	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  socket_base::message_flags flags_;$/;"	m	class:asio::detail::reactive_socket_sendto_op_base
flow_control	.\include\asio\serial_port_base.hpp	/^  class flow_control$/;"	c	class:asio::serial_port_base
flush	.\include\asio\buffered_stream.hpp	/^  std::size_t flush()$/;"	f	class:asio::buffered_stream
flush	.\include\asio\buffered_stream.hpp	/^  std::size_t flush(asio::error_code& ec)$/;"	f	class:asio::buffered_stream
flush	.\include\asio\impl\buffered_write_stream.hpp	/^std::size_t buffered_write_stream<Stream>::flush()$/;"	f	class:asio::buffered_write_stream
flush	.\include\asio\impl\buffered_write_stream.hpp	/^std::size_t buffered_write_stream<Stream>::flush(asio::error_code& ec)$/;"	f	class:asio::buffered_write_stream
for_reading	.\include\asio\ssl\context_base.hpp	/^    for_reading,$/;"	e	enum:asio::ssl::context_base::password_purpose
for_writing	.\include\asio\ssl\context_base.hpp	/^    for_writing$/;"	e	enum:asio::ssl::context_base::password_purpose
fork	.\include\asio\unyield.hpp	20;"	d
fork	.\include\asio\yield.hpp	22;"	d
fork_child	.\include\asio\execution_context.hpp	/^    fork_child$/;"	e	enum:asio::execution_context::fork_event
fork_event	.\include\asio\execution_context.hpp	/^  enum fork_event$/;"	g	class:asio::execution_context
fork_parent	.\include\asio\execution_context.hpp	/^    fork_parent,$/;"	e	enum:asio::execution_context::fork_event
fork_prepare	.\include\asio\execution_context.hpp	/^    fork_prepare,$/;"	e	enum:asio::execution_context::fork_event
formatted	.\include\global_types.hpp	/^	std::string formatted;$/;"	m	struct:data_t
forwarding_posix_time_traits	.\include\asio\detail\timer_queue_ptime.hpp	/^struct forwarding_posix_time_traits : time_traits<boost::posix_time::ptime> {};$/;"	s	namespace:asio::detail
free	.\include\asio\detail\object_pool.hpp	/^  void free(Object* o)$/;"	f	class:asio::detail::object_pool
free_list_	.\include\asio\detail\object_pool.hpp	/^  Object* free_list_;$/;"	m	class:asio::detail::object_pool
from_string	.\include\asio\ip\impl\address.hpp	/^inline address address::from_string($/;"	f	class:asio::ip::address
from_string	.\include\asio\ip\impl\address.hpp	/^inline address address::from_string(const char* str)$/;"	f	class:asio::ip::address
from_string	.\include\asio\ip\impl\address.hpp	/^inline address address::from_string(const std::string& str)$/;"	f	class:asio::ip::address
from_string	.\include\asio\ip\impl\address_v4.hpp	/^inline address_v4 address_v4::from_string($/;"	f	class:asio::ip::address_v4
from_string	.\include\asio\ip\impl\address_v4.hpp	/^inline address_v4 address_v4::from_string(const char* str)$/;"	f	class:asio::ip::address_v4
from_string	.\include\asio\ip\impl\address_v4.hpp	/^inline address_v4 address_v4::from_string(const std::string& str)$/;"	f	class:asio::ip::address_v4
from_string	.\include\asio\ip\impl\address_v6.hpp	/^inline address_v6 address_v6::from_string($/;"	f	class:asio::ip::address_v6
from_string	.\include\asio\ip\impl\address_v6.hpp	/^inline address_v6 address_v6::from_string(const char* str)$/;"	f	class:asio::ip::address_v6
from_string	.\include\asio\ip\impl\address_v6.hpp	/^inline address_v6 address_v6::from_string(const std::string& str)$/;"	f	class:asio::ip::address_v6
front	.\include\asio\detail\op_queue.hpp	/^  Operation* front()$/;"	f	class:asio::detail::op_queue
front	.\include\asio\detail\op_queue.hpp	/^  static Operation*& front(op_queue<Operation>& q)$/;"	f	class:asio::detail::op_queue_access
front	.\source\strm_queue.cpp	/^std::string strm_queue::front()$/;"	f	class:strm_queue
front_	.\include\asio\detail\op_queue.hpp	/^  Operation* front_;$/;"	m	class:asio::detail::op_queue
full	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::gcc_arm_fenced_block::full_t
full	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::gcc_hppa_fenced_block::full_t
full	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:asio::detail::gcc_sync_fenced_block::half_or_full_t
full	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::gcc_x86_fenced_block::full_t
full	.\include\asio\detail\macos_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::macos_fenced_block::full_t
full	.\include\asio\detail\null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:asio::detail::null_fenced_block::half_or_full_t
full	.\include\asio\detail\solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::solaris_fenced_block::full_t
full	.\include\asio\detail\std_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::std_fenced_block::full_t
full	.\include\asio\detail\win_fenced_block.hpp	/^  enum full_t { full };$/;"	e	enum:asio::detail::win_fenced_block::full_t
full_t	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::gcc_arm_fenced_block
full_t	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::gcc_hppa_fenced_block
full_t	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::gcc_x86_fenced_block
full_t	.\include\asio\detail\macos_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::macos_fenced_block
full_t	.\include\asio\detail\solaris_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::solaris_fenced_block
full_t	.\include\asio\detail\std_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::std_fenced_block
full_t	.\include\asio\detail\win_fenced_block.hpp	/^  enum full_t { full };$/;"	g	class:asio::detail::win_fenced_block
func	.\include\asio\detail\posix_thread.hpp	/^    func(Function f)$/;"	f	class:asio::detail::posix_thread::func
func	.\include\asio\detail\posix_thread.hpp	/^  class func$/;"	c	class:asio::detail::posix_thread
func	.\include\asio\detail\win_thread.hpp	/^    func(Function f)$/;"	f	class:asio::detail::win_thread::func
func	.\include\asio\detail\win_thread.hpp	/^  class func$/;"	c	class:asio::detail::win_thread
func	.\include\asio\detail\winapp_thread.hpp	/^    func(Function f)$/;"	f	class:asio::detail::winapp_thread::func
func	.\include\asio\detail\winapp_thread.hpp	/^  class func$/;"	c	class:asio::detail::winapp_thread
func	.\include\asio\detail\wince_thread.hpp	/^    func(Function f)$/;"	f	class:asio::detail::wince_thread::func
func	.\include\asio\detail\wince_thread.hpp	/^  class func$/;"	c	class:asio::detail::wince_thread
func_	.\include\asio\detail\scheduler_operation.hpp	/^  func_type func_;$/;"	m	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
func_	.\include\asio\detail\win_iocp_operation.hpp	/^  func_type func_;$/;"	m	class:asio::detail::win_iocp_operation
func_base	.\include\asio\detail\posix_thread.hpp	/^  class func_base$/;"	c	class:asio::detail::posix_thread
func_base	.\include\asio\detail\win_thread.hpp	/^  class func_base$/;"	c	class:asio::detail::win_thread
func_base	.\include\asio\detail\winapp_thread.hpp	/^  class func_base$/;"	c	class:asio::detail::winapp_thread
func_base	.\include\asio\detail\wince_thread.hpp	/^  class func_base$/;"	c	class:asio::detail::wince_thread
func_type	.\include\asio\detail\scheduler_operation.hpp	/^  typedef void (*func_type)(void*,$/;"	t	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
func_type	.\include\asio\detail\win_iocp_operation.hpp	/^  typedef void (*func_type)($/;"	t	class:asio::detail::win_iocp_operation
function	.\include\asio\detail\bind_handler.hpp	/^inline void asio_handler_invoke(ASIO_MOVE_ARG(Function) function,$/;"	m	namespace:asio::detail
function	.\include\asio\impl\executor.hpp	/^  explicit function(F f, const Alloc& a)$/;"	f	class:asio::executor::function
function	.\include\asio\impl\executor.hpp	/^  function(function&& other)$/;"	f	class:asio::executor::function
function	.\include\asio\impl\executor.hpp	/^class executor::function$/;"	c	class:asio::executor
function	.\include\asio\impl\spawn.hpp	/^        bool call_handler, ASIO_MOVE_ARG(Func) function)$/;"	m	struct:asio::detail::spawn_data
function	.\include\asio\impl\spawn.hpp	/^    ASIO_MOVE_ARG(Function) function,$/;"	m	namespace:asio
function	.\include\asio\impl\spawn.hpp	/^inline void spawn(ASIO_MOVE_ARG(Function) function,$/;"	m	namespace:asio
function	.\include\asio\spawn.hpp	/^    ASIO_MOVE_ARG(Function) function,$/;"	m	namespace:asio
function	.\include\asio\spawn.hpp	/^void spawn(ASIO_MOVE_ARG(Function) function,$/;"	m	namespace:asio
function_	.\include\asio\impl\spawn.hpp	/^    Function function_;$/;"	m	struct:asio::detail::spawn_data
function_	.\include\asio\impl\use_future.hpp	/^  Function function_;$/;"	m	class:asio::detail::packaged_handler
function_	.\include\asio\impl\use_future.hpp	/^  Function function_;$/;"	m	class:asio::detail::packaged_token
future_	.\include\asio\impl\use_future.hpp	/^  return_type future_;$/;"	m	class:asio::detail::packaged_async_result
future_	.\include\asio\impl\use_future.hpp	/^  return_type future_;$/;"	m	class:asio::detail::promise_async_result
future_	.\include\asio\packaged_task.hpp	/^  return_type future_;$/;"	m	class:asio::async_result
future_type	.\include\asio\impl\use_future.hpp	/^  typedef std::future<T> future_type;$/;"	t	class:asio::detail::promise_creator
gcc_arm_fenced_block	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(full_t)$/;"	f	class:asio::detail::gcc_arm_fenced_block
gcc_arm_fenced_block	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  explicit gcc_arm_fenced_block(half_t)$/;"	f	class:asio::detail::gcc_arm_fenced_block
gcc_arm_fenced_block	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^class gcc_arm_fenced_block$/;"	c	namespace:asio::detail
gcc_hppa_fenced_block	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(full_t)$/;"	f	class:asio::detail::gcc_hppa_fenced_block
gcc_hppa_fenced_block	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  explicit gcc_hppa_fenced_block(half_t)$/;"	f	class:asio::detail::gcc_hppa_fenced_block
gcc_hppa_fenced_block	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^class gcc_hppa_fenced_block$/;"	c	namespace:asio::detail
gcc_sync_fenced_block	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  explicit gcc_sync_fenced_block(half_or_full_t)$/;"	f	class:asio::detail::gcc_sync_fenced_block
gcc_sync_fenced_block	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^class gcc_sync_fenced_block$/;"	c	namespace:asio::detail
gcc_x86_fenced_block	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(full_t)$/;"	f	class:asio::detail::gcc_x86_fenced_block
gcc_x86_fenced_block	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  explicit gcc_x86_fenced_block(half_t)$/;"	f	class:asio::detail::gcc_x86_fenced_block
gcc_x86_fenced_block	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^class gcc_x86_fenced_block$/;"	c	namespace:asio::detail
gcd	.\include\asio\detail\chrono_time_traits.hpp	/^struct gcd { enum { value = gcd<v2, v1 % v2>::value }; };$/;"	s	namespace:asio::detail
gcd	.\include\asio\detail\chrono_time_traits.hpp	/^struct gcd<v1, 0> { enum { value = v1 }; };$/;"	s	namespace:asio::detail
generate_response	.\source\udp_parser.cpp	/^std::string udp_parser::generate_response()$/;"	f	class:udp_parser
generic	.\include\asio\detail\pop_options.hpp	130;"	d
generic	.\include\asio\detail\push_options.hpp	169;"	d
generic	.\include\asio\generic\basic_endpoint.hpp	/^namespace generic {$/;"	n	namespace:asio
generic	.\include\asio\generic\datagram_protocol.hpp	/^namespace generic {$/;"	n	namespace:asio
generic	.\include\asio\generic\detail\endpoint.hpp	/^    asio::detail::sockaddr_storage_type generic;$/;"	m	union:asio::generic::detail::endpoint::data_union
generic	.\include\asio\generic\detail\endpoint.hpp	/^namespace generic {$/;"	n	namespace:asio
generic	.\include\asio\generic\raw_protocol.hpp	/^namespace generic {$/;"	n	namespace:asio
generic	.\include\asio\generic\seq_packet_protocol.hpp	/^namespace generic {$/;"	n	namespace:asio
generic	.\include\asio\generic\stream_protocol.hpp	/^namespace generic {$/;"	n	namespace:asio
get	.\include\asio\async_result.hpp	/^  return_type get()$/;"	f	class:asio::async_result
get	.\include\asio\async_result.hpp	/^  type get()$/;"	f	class:asio::async_result
get	.\include\asio\bind_executor.hpp	/^  return_type get()$/;"	f	class:asio::async_result
get	.\include\asio\bind_executor.hpp	/^  type get()$/;"	f	class:asio::async_result
get	.\include\asio\detail\handler_alloc_helpers.hpp	/^  static type get(Handler& handler, const std::allocator<T>&)$/;"	f	struct:asio::detail::get_hook_allocator
get	.\include\asio\detail\handler_alloc_helpers.hpp	/^  static type get(Handler&, const Allocator& a)$/;"	f	struct:asio::detail::get_hook_allocator
get	.\include\asio\detail\handler_work.hpp	/^    : executor_(associated_executor<Handler>::get(handler))$/;"	f	class:asio::detail::handler_work
get	.\include\asio\detail\io_control.hpp	/^  std::size_t get() const$/;"	f	class:asio::detail::io_control::bytes_readable
get	.\include\asio\detail\recycling_allocator.hpp	/^  static type get(const Allocator& a) { return a; }$/;"	f	struct:asio::detail::get_recycling_allocator
get	.\include\asio\detail\recycling_allocator.hpp	/^  static type get(const std::allocator<T>&) { return type(); }$/;"	f	struct:asio::detail::get_recycling_allocator
get	.\include\asio\detail\scoped_ptr.hpp	/^  T* get()$/;"	f	class:asio::detail::scoped_ptr
get	.\include\asio\detail\socket_holder.hpp	/^  socket_type get() const$/;"	f	class:asio::detail::socket_holder
get	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
get	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
get	.\include\asio\experimental\impl\co_spawn.hpp	/^  T get()$/;"	f	class:asio::experimental::detail::awaitee
get	.\include\asio\experimental\impl\co_spawn.hpp	/^  return_type get()$/;"	f	class:asio::async_result
get	.\include\asio\experimental\impl\co_spawn.hpp	/^  type get()$/;"	f	class:asio::async_result
get	.\include\asio\experimental\impl\co_spawn.hpp	/^  void get()$/;"	f	class:asio::experimental::detail::awaitee
get	.\include\asio\experimental\impl\detached.hpp	/^  void get()$/;"	f	struct:asio::async_result
get	.\include\asio\impl\spawn.hpp	/^    return_type get()$/;"	f	class:asio::detail::coro_async_result
get	.\include\asio\impl\spawn.hpp	/^    void get()$/;"	f	class:asio::detail::coro_async_result
get	.\include\asio\impl\use_future.hpp	/^  return_type get()$/;"	f	class:asio::detail::packaged_async_result
get	.\include\asio\impl\use_future.hpp	/^  return_type get()$/;"	f	class:asio::detail::promise_async_result
get	.\include\asio\packaged_task.hpp	/^  return_type get()$/;"	f	class:asio::async_result
get	.\include\asio\windows\overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:asio::windows::overlapped_ptr
get	.\include\asio\windows\overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:asio::windows::overlapped_ptr
get_addrinfo_category	.\include\asio\error.hpp	/^inline const asio::error_category& get_addrinfo_category()$/;"	f	namespace:asio::error
get_all_operations	.\include\asio\detail\reactor_op_queue.hpp	/^  void get_all_operations(op_queue<operation>& ops)$/;"	f	class:asio::detail::reactor_op_queue
get_all_timers	.\include\asio\detail\timer_queue.hpp	/^  virtual void get_all_timers(op_queue<operation>& ops)$/;"	f	class:asio::detail::timer_queue
get_allocator	.\include\asio\use_future.hpp	/^  allocator_type get_allocator() const$/;"	f	class:asio::use_future_t
get_buffer_	.\include\asio\basic_socket_streambuf.hpp	/^  std::vector<char> get_buffer_;$/;"	m	class:asio::detail::socket_streambuf_buffers
get_debug_check	.\include\asio\buffer.hpp	/^  const asio::detail::function<void()>& get_debug_check() const$/;"	f	class:asio::const_buffer
get_debug_check	.\include\asio\buffer.hpp	/^  const asio::detail::function<void()>& get_debug_check() const$/;"	f	class:asio::mutable_buffer
get_future	.\include\asio\impl\use_future.hpp	/^  future_type get_future()$/;"	f	class:asio::detail::promise_creator
get_hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^struct get_hook_allocator$/;"	s	namespace:asio::detail
get_hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^struct get_hook_allocator<Handler, std::allocator<T> >$/;"	s	namespace:asio::detail
get_impl	.\include\asio\executor.hpp	/^  impl_base* get_impl() const$/;"	f	class:asio::executor
get_implementation	.\include\asio\basic_io_object.hpp	/^  const implementation_type& get_implementation() const$/;"	f	class:asio::basic_io_object
get_implementation	.\include\asio\basic_io_object.hpp	/^  implementation_type& get_implementation()$/;"	f	class:asio::basic_io_object
get_io_context	.\include\asio\basic_deadline_timer.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::basic_deadline_timer
get_io_context	.\include\asio\basic_io_object.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::basic_io_object
get_io_context	.\include\asio\basic_socket.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::basic_socket
get_io_context	.\include\asio\basic_socket_acceptor.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::basic_socket_acceptor
get_io_context	.\include\asio\basic_waitable_timer.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::basic_waitable_timer
get_io_context	.\include\asio\buffered_read_stream.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::buffered_read_stream
get_io_context	.\include\asio\buffered_stream.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::buffered_stream
get_io_context	.\include\asio\buffered_write_stream.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::buffered_write_stream
get_io_context	.\include\asio\impl\io_context.hpp	/^inline asio::io_context& io_context::service::get_io_context()$/;"	f	class:asio::io_context::service
get_io_context	.\include\asio\impl\io_context.hpp	/^inline asio::io_context& io_context::work::get_io_context()$/;"	f	class:asio::io_context::work
get_io_context	.\include\asio\io_context_strand.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::io_context::strand
get_io_context	.\include\asio\ip\basic_resolver.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::ip::basic_resolver
get_io_context	.\include\asio\posix\descriptor.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::posix::descriptor
get_io_context	.\include\asio\ssl\stream.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::ssl::stream
get_io_context	.\include\asio\windows\overlapped_handle.hpp	/^  asio::io_context& get_io_context()$/;"	f	class:asio::windows::overlapped_handle
get_io_service	.\include\asio\basic_deadline_timer.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::basic_deadline_timer
get_io_service	.\include\asio\basic_io_object.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::basic_io_object
get_io_service	.\include\asio\basic_socket.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::basic_socket
get_io_service	.\include\asio\basic_socket_acceptor.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::basic_socket_acceptor
get_io_service	.\include\asio\basic_waitable_timer.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::basic_waitable_timer
get_io_service	.\include\asio\buffered_read_stream.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::buffered_read_stream
get_io_service	.\include\asio\buffered_stream.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::buffered_stream
get_io_service	.\include\asio\buffered_write_stream.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::buffered_write_stream
get_io_service	.\include\asio\impl\io_context.hpp	/^inline asio::io_context& io_context::service::get_io_service()$/;"	f	class:asio::io_context::service
get_io_service	.\include\asio\impl\io_context.hpp	/^inline asio::io_context& io_context::work::get_io_service()$/;"	f	class:asio::io_context::work
get_io_service	.\include\asio\io_context_strand.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::io_context::strand
get_io_service	.\include\asio\ip\basic_resolver.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::ip::basic_resolver
get_io_service	.\include\asio\posix\descriptor.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::posix::descriptor
get_io_service	.\include\asio\ssl\stream.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::ssl::stream
get_io_service	.\include\asio\windows\overlapped_handle.hpp	/^  asio::io_context& get_io_service()$/;"	f	class:asio::windows::overlapped_handle
get_locks	.\include\global_types.hpp	/^	bool get_locks()$/;"	f	class:wait_semaphore
get_netdb_category	.\include\asio\error.hpp	/^inline const asio::error_category& get_netdb_category()$/;"	f	namespace:asio::error
get_next_axis_point	.\source\udp_parser.cpp	/^std::string udp_parser::get_next_axis_point(std::string &str)$/;"	f	class:udp_parser
get_next_token	.\source\udp_parser.cpp	/^std::string udp_parser::get_next_token(std::string &str)$/;"	f	class:udp_parser
get_option	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID get_option(GettableSerialPortOption& option,$/;"	f	class:asio::basic_serial_port
get_option	.\include\asio\basic_serial_port.hpp	/^  void get_option(GettableSerialPortOption& option)$/;"	f	class:asio::basic_serial_port
get_option	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID get_option(GettableSocketOption& option,$/;"	f	class:asio::basic_socket
get_option	.\include\asio\basic_socket.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:asio::basic_socket
get_option	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID get_option(GettableSocketOption& option,$/;"	f	class:asio::basic_socket_acceptor
get_option	.\include\asio\basic_socket_acceptor.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:asio::basic_socket_acceptor
get_option	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
get_option	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code get_option(const implementation_type&,$/;"	f	class:asio::detail::null_socket_service
get_option	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code get_option(const implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
get_option	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code get_option(const implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
get_option	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code get_option(const implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
get_option	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code get_option(const implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
get_option	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code get_option(const implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
get_option	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::raw_socket_service
get_option	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
get_option	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::serial_port_service
get_option	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
get_option	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID get_option(const implementation_type& impl,$/;"	f	class:asio::stream_socket_service
get_ready_timers	.\include\asio\detail\timer_queue.hpp	/^  virtual void get_ready_timers(op_queue<operation>& ops)$/;"	f	class:asio::detail::timer_queue
get_recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^struct get_recycling_allocator$/;"	s	namespace:asio::detail
get_recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^struct get_recycling_allocator<std::allocator<T> >$/;"	s	namespace:asio::detail
get_return_object	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitable<T, Executor> get_return_object()$/;"	f	class:asio::experimental::detail::awaitee
get_return_object	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitable<void, Executor> get_return_object()$/;"	f	class:asio::experimental::detail::awaitee
get_return_object	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaiter* get_return_object()$/;"	f	class:asio::experimental::detail::awaiter
get_service	.\include\asio\basic_io_object.hpp	/^  const service_type& get_service() const$/;"	f	class:asio::basic_io_object
get_service	.\include\asio\basic_io_object.hpp	/^  service_type& get_service()$/;"	f	class:asio::basic_io_object
get_system_category	.\include\asio\error.hpp	/^inline const asio::error_category& get_system_category()$/;"	f	namespace:asio::error
get_val	.\include\global_types.hpp	/^	bool get_val()$/;"	f	class:atomic_bool
global	.\include\asio\detail\global.hpp	/^inline T& global()$/;"	f	namespace:asio::detail
gqcs_timeout_	.\include\asio\detail\win_iocp_io_context.hpp	/^  const DWORD gqcs_timeout_;$/;"	m	class:asio::detail::win_iocp_io_context
gyro_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_cfg gyro_cfg;$/;"	m	struct:bmi08x_dev	typeref:struct:bmi08x_dev::bmi08x_cfg
gyro_chip_id	.\include\bmi08x_defs.h	/^uint8_t gyro_chip_id;$/;"	m	struct:bmi08x_dev
gyro_id	.\include\bmi08x_defs.h	/^uint8_t gyro_id;$/;"	m	struct:bmi08x_dev
gyro_int_config_1	.\include\bmi08x_defs.h	/^struct bmi08x_gyro_int_channel_cfg gyro_int_config_1;$/;"	m	struct:bmi08x_int_cfg	typeref:struct:bmi08x_int_cfg::bmi08x_gyro_int_channel_cfg
gyro_int_config_2	.\include\bmi08x_defs.h	/^struct bmi08x_gyro_int_channel_cfg gyro_int_config_2;$/;"	m	struct:bmi08x_int_cfg	typeref:struct:bmi08x_int_cfg::bmi08x_gyro_int_channel_cfg
h	.\include\asio\detail\executor_op.hpp	/^  executor_op(ASIO_MOVE_ARG(H) h, const Alloc& allocator)$/;"	m	class:asio::detail::executor_op
half	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::gcc_arm_fenced_block::half_t
half	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::gcc_hppa_fenced_block::half_t
half	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:asio::detail::gcc_sync_fenced_block::half_or_full_t
half	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::gcc_x86_fenced_block::half_t
half	.\include\asio\detail\macos_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::macos_fenced_block::half_t
half	.\include\asio\detail\null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	e	enum:asio::detail::null_fenced_block::half_or_full_t
half	.\include\asio\detail\solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::solaris_fenced_block::half_t
half	.\include\asio\detail\std_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::std_fenced_block::half_t
half	.\include\asio\detail\win_fenced_block.hpp	/^  enum half_t { half };$/;"	e	enum:asio::detail::win_fenced_block::half_t
half_or_full_t	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:asio::detail::gcc_sync_fenced_block
half_or_full_t	.\include\asio\detail\null_fenced_block.hpp	/^  enum half_or_full_t { half, full };$/;"	g	class:asio::detail::null_fenced_block
half_t	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::gcc_arm_fenced_block
half_t	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::gcc_hppa_fenced_block
half_t	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::gcc_x86_fenced_block
half_t	.\include\asio\detail\macos_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::macos_fenced_block
half_t	.\include\asio\detail\solaris_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::solaris_fenced_block
half_t	.\include\asio\detail\std_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::std_fenced_block
half_t	.\include\asio\detail\win_fenced_block.hpp	/^  enum half_t { half };$/;"	g	class:asio::detail::win_fenced_block
handle	.\include\asio\detail\win_iocp_io_context.hpp	/^    HANDLE handle;$/;"	m	struct:asio::detail::win_iocp_io_context::auto_handle
handle_	.\include\asio\detail\win_iocp_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:asio::detail::win_iocp_handle_service::implementation_type
handle_	.\include\asio\detail\win_object_handle_service.hpp	/^    native_handle_type handle_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
handle_	.\include\asio\ssl\context.hpp	/^  native_handle_type handle_;$/;"	m	class:asio::ssl::context
handle_	.\include\asio\ssl\verify_context.hpp	/^  native_handle_type handle_;$/;"	m	class:asio::ssl::verify_context
handle_service_	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  win_iocp_handle_service handle_service_;$/;"	m	class:asio::detail::win_iocp_serial_port_service
handler	.\include\asio\buffered_read_stream.hpp	/^  async_fill(ASIO_MOVE_ARG(ReadHandler) handler);$/;"	m	class:asio::buffered_read_stream
handler	.\include\asio\buffered_write_stream.hpp	/^  async_flush(ASIO_MOVE_ARG(WriteHandler) handler);$/;"	m	class:asio::buffered_write_stream
handler	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1)$/;"	m	namespace:asio::detail
handler	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1, const Arg2& arg2)$/;"	m	namespace:asio::detail
handler	.\include\asio\detail\bind_handler.hpp	/^    ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1, const Arg2& arg2,$/;"	m	namespace:asio::detail
handler	.\include\asio\detail\bind_handler.hpp	/^bind_handler(ASIO_MOVE_ARG(Handler) handler, const Arg1& arg1,$/;"	m	namespace:asio::detail
handler	.\include\asio\impl\spawn.hpp	/^    spawn_data(ASIO_MOVE_ARG(Hand) handler,$/;"	m	struct:asio::detail::spawn_data
handler	.\include\asio\impl\spawn.hpp	/^void spawn(ASIO_MOVE_ARG(Handler) handler,$/;"	m	namespace:asio
handler	.\include\asio\io_context.hpp	/^  dispatch(ASIO_MOVE_ARG(LegacyCompletionHandler) handler);$/;"	m	class:asio::io_context
handler	.\include\asio\io_context.hpp	/^  post(ASIO_MOVE_ARG(LegacyCompletionHandler) handler);$/;"	m	class:asio::io_context
handler	.\include\asio\spawn.hpp	/^void spawn(ASIO_MOVE_ARG(Handler) handler,$/;"	m	namespace:asio
handler	.\include\board_if.hpp	/^	void (*handler)(board_msg_t*);$/;"	m	class:board_if
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::binder1
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::binder2
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::binder3
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::binder4
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::binder5
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::move_binder1
handler_	.\include\asio\detail\bind_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::move_binder2
handler_	.\include\asio\detail\completion_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::completion_handler
handler_	.\include\asio\detail\descriptor_read_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::descriptor_read_op
handler_	.\include\asio\detail\descriptor_write_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::descriptor_write_op
handler_	.\include\asio\detail\executor_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::executor_op
handler_	.\include\asio\detail\handler_alloc_helpers.hpp	/^  Handler& handler_;$/;"	m	class:asio::detail::hook_allocator
handler_	.\include\asio\detail\reactive_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_null_buffers_op
handler_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_accept_op
handler_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_move_accept_op
handler_	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_connect_op
handler_	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_recv_op
handler_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op
handler_	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_recvmsg_op
handler_	.\include\asio\detail\reactive_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_send_op
handler_	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_socket_sendto_op
handler_	.\include\asio\detail\reactive_wait_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::reactive_wait_op
handler_	.\include\asio\detail\resolve_endpoint_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::resolve_endpoint_op
handler_	.\include\asio\detail\resolve_query_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::resolve_query_op
handler_	.\include\asio\detail\signal_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::signal_handler
handler_	.\include\asio\detail\wait_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::wait_handler
handler_	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_handle_read_op
handler_	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_handle_write_op
handler_	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_null_buffers_op
handler_	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_overlapped_op
handler_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
handler_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
handler_	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_connect_op
handler_	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_recv_op
handler_	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_recvfrom_op
handler_	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_recvmsg_op
handler_	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_socket_send_op
handler_	.\include\asio\detail\win_iocp_wait_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::win_iocp_wait_op
handler_	.\include\asio\detail\winrt_resolve_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::winrt_resolve_op
handler_	.\include\asio\detail\winrt_socket_connect_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::winrt_socket_connect_op
handler_	.\include\asio\detail\winrt_socket_recv_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::winrt_socket_recv_op
handler_	.\include\asio\detail\winrt_socket_send_op.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::winrt_socket_send_op
handler_	.\include\asio\detail\work_dispatcher.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::work_dispatcher
handler_	.\include\asio\detail\wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::rewrapped_handler
handler_	.\include\asio\detail\wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:asio::detail::wrapped_handler
handler_	.\include\asio\experimental\impl\redirect_error.hpp	/^  Handler handler_;$/;"	m	class:asio::experimental::detail::redirect_error_handler
handler_	.\include\asio\impl\buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::buffered_fill_handler
handler_	.\include\asio\impl\buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::buffered_read_some_handler
handler_	.\include\asio\impl\buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::buffered_flush_handler
handler_	.\include\asio\impl\buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::buffered_write_some_handler
handler_	.\include\asio\impl\connect.hpp	/^    IteratorConnectHandler handler_;$/;"	m	class:asio::detail::iterator_connect_op
handler_	.\include\asio\impl\connect.hpp	/^    RangeConnectHandler handler_;$/;"	m	class:asio::detail::range_connect_op
handler_	.\include\asio\impl\read.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_dynbuf_op
handler_	.\include\asio\impl\read.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_op
handler_	.\include\asio\impl\read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_at_op
handler_	.\include\asio\impl\read_at.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_at_streambuf_op
handler_	.\include\asio\impl\read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_until_delim_op
handler_	.\include\asio\impl\read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_until_delim_string_op
handler_	.\include\asio\impl\read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_until_expr_op
handler_	.\include\asio\impl\read_until.hpp	/^    ReadHandler handler_;$/;"	m	class:asio::detail::read_until_match_op
handler_	.\include\asio\impl\spawn.hpp	/^    Handler handler_;$/;"	m	class:asio::detail::coro_handler
handler_	.\include\asio\impl\spawn.hpp	/^    Handler handler_;$/;"	m	struct:asio::detail::spawn_data
handler_	.\include\asio\impl\spawn.hpp	/^    completion_handler_type& handler_;$/;"	m	class:asio::detail::coro_async_result
handler_	.\include\asio\impl\write.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::write_dynbuf_op
handler_	.\include\asio\impl\write.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::write_op
handler_	.\include\asio\impl\write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::write_at_op
handler_	.\include\asio\impl\write_at.hpp	/^    WriteHandler handler_;$/;"	m	class:asio::detail::write_at_streambuf_op
handler_	.\include\asio\spawn.hpp	/^  Handler handler_;$/;"	m	class:asio::basic_yield_context
handler_	.\include\asio\ssl\detail\io.hpp	/^  Handler handler_;$/;"	m	class:asio::ssl::detail::io_op
handler_type	.\include\asio\bind_executor.hpp	/^struct handler_type<executor_binder<T, Executor>, Signature>$/;"	s	namespace:asio
handler_type	.\include\asio\experimental\impl\co_spawn.hpp	/^struct handler_type<experimental::await_token<Executor>, R(Args...)>$/;"	s	namespace:asio
handler_type	.\include\asio\experimental\impl\redirect_error.hpp	/^struct handler_type<experimental::redirect_error_t<CompletionToken>, Signature>$/;"	s	namespace:asio
handler_type	.\include\asio\handler_type.hpp	/^struct handler_type$/;"	s	namespace:asio
handler_type	.\include\asio\impl\spawn.hpp	/^struct handler_type<basic_yield_context<Handler>, ReturnType()>$/;"	s	namespace:asio
handler_type	.\include\asio\impl\spawn.hpp	/^struct handler_type<basic_yield_context<Handler>, ReturnType(Arg1)>$/;"	s	namespace:asio
handler_type	.\include\asio\impl\spawn.hpp	/^struct handler_type<basic_yield_context<Handler>,$/;"	s	namespace:asio
handler_type	.\include\asio\impl\use_future.hpp	/^struct handler_type<detail::packaged_token<Function, Allocator>, Signature>$/;"	s	namespace:asio
handler_type	.\include\asio\impl\use_future.hpp	/^struct handler_type<use_future_t<Allocator>, Signature>$/;"	s	namespace:asio
handler_type_requirements	.\include\asio\detail\handler_type_requirements.hpp	/^struct handler_type_requirements$/;"	s	namespace:asio::detail
handler_work	.\include\asio\detail\handler_work.hpp	/^class handler_work$/;"	c	namespace:asio::detail
handler_work	.\include\asio\detail\handler_work.hpp	/^class handler_work<Handler, system_executor>$/;"	c	namespace:asio::detail
handshake	.\include\asio\ssl\stream.hpp	/^  ASIO_SYNC_OP_VOID handshake(handshake_type type,$/;"	f	class:asio::ssl::stream
handshake	.\include\asio\ssl\stream.hpp	/^  void handshake(handshake_type type)$/;"	f	class:asio::ssl::stream
handshake	.\include\asio\ssl\stream.hpp	/^  void handshake(handshake_type type, const ConstBufferSequence& buffers)$/;"	f	class:asio::ssl::stream
handshake_op	.\include\asio\ssl\detail\handshake_op.hpp	/^  handshake_op(stream_base::handshake_type type)$/;"	f	class:asio::ssl::detail::handshake_op
handshake_op	.\include\asio\ssl\detail\handshake_op.hpp	/^class handshake_op$/;"	c	namespace:asio::ssl::detail
handshake_type	.\include\asio\ssl\stream_base.hpp	/^  enum handshake_type$/;"	g	class:asio::ssl::stream_base
hardware	.\include\asio\serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:asio::serial_port_base::flow_control::type
hardware_concurrency	.\include\asio\detail\null_thread.hpp	/^  static std::size_t hardware_concurrency()$/;"	f	class:asio::detail::null_thread
hardware_concurrency	.\include\asio\detail\std_thread.hpp	/^  static std::size_t hardware_concurrency()$/;"	f	class:asio::detail::std_thread
hardware_concurrency	.\include\asio\detail\winapp_thread.hpp	/^  static std::size_t hardware_concurrency()$/;"	f	class:asio::detail::winapp_thread
hardware_concurrency	.\include\asio\detail\wince_thread.hpp	/^  static std::size_t hardware_concurrency()$/;"	f	class:asio::detail::wince_thread
has_executor_	.\include\asio\experimental\impl\co_spawn.hpp	/^  bool has_executor_ = false;$/;"	m	class:asio::experimental::detail::awaiter
has_iterator_typedef	.\include\asio\connect.hpp	/^  struct has_iterator_typedef$/;"	s	namespace:asio::detail
has_operation	.\include\asio\detail\reactor_op_queue.hpp	/^  bool has_operation(Descriptor descriptor) const$/;"	f	class:asio::detail::reactor_op_queue
has_result_	.\include\asio\experimental\impl\co_spawn.hpp	/^  bool has_result_ = false;$/;"	m	class:asio::experimental::detail::awaitee
has_result_type	.\include\asio\read_until.hpp	/^  struct has_result_type$/;"	s	namespace:asio::detail
has_service	.\include\asio\detail\impl\service_registry.hpp	/^bool service_registry::has_service() const$/;"	f	class:asio::detail::service_registry
has_service	.\include\asio\impl\execution_context.hpp	/^inline bool has_service(execution_context& e)$/;"	f	namespace:asio
hash_map	.\include\asio\detail\hash_map.hpp	/^  hash_map()$/;"	f	class:asio::detail::hash_map
hash_map	.\include\asio\detail\hash_map.hpp	/^class hash_map$/;"	c	namespace:asio::detail
hash_size	.\include\asio\detail\hash_map.hpp	/^  static std::size_t hash_size(std::size_t num_elems)$/;"	f	class:asio::detail::hash_map
have_remote_endpoint	.\include\asio\detail\win_iocp_socket_service.hpp	/^    bool have_remote_endpoint() const$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
have_remote_endpoint_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	class:asio::detail::win_iocp_socket_service::native_handle_type
have_remote_endpoint_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	struct:asio::detail::win_iocp_socket_service::implementation_type
head	.\include\global_types.hpp	/^	board_command_t* head;$/;"	m	struct:board_msg_t
heap_	.\include\asio\detail\timer_queue.hpp	/^  std::vector<heap_entry> heap_;$/;"	m	class:asio::detail::timer_queue
heap_entry	.\include\asio\detail\timer_queue.hpp	/^  struct heap_entry$/;"	s	class:asio::detail::timer_queue
heap_index_	.\include\asio\detail\timer_queue.hpp	/^    std::size_t heap_index_;$/;"	m	class:asio::detail::timer_queue::per_timer_data
helper	.\include\asio\buffers_iterator.hpp	/^    typedef buffers_iterator_types_helper<is_mutable> helper;$/;"	t	struct:asio::detail::buffers_iterator_types
high_resolution_timer	.\include\asio\high_resolution_timer.hpp	/^  high_resolution_timer;$/;"	t	namespace:asio
high_resolution_timer	.\include\asio\ts\netfwd.hpp	/^  high_resolution_timer;$/;"	t	namespace:asio
hints	.\include\asio\ip\basic_resolver_query.hpp	/^  const asio::detail::addrinfo_type& hints() const$/;"	f	class:asio::ip::basic_resolver_query
hints_	.\include\asio\ip\basic_resolver_query.hpp	/^  asio::detail::addrinfo_type hints_;$/;"	m	class:asio::ip::basic_resolver_query
hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^  explicit hook_allocator(Handler& h)$/;"	f	class:asio::detail::hook_allocator
hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^  hook_allocator(const hook_allocator<Handler, U>& a)$/;"	f	class:asio::detail::hook_allocator
hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^class hook_allocator$/;"	c	namespace:asio::detail
hook_allocator	.\include\asio\detail\handler_alloc_helpers.hpp	/^class hook_allocator<Handler, void>$/;"	c	namespace:asio::detail
hops	.\include\asio\ip\multicast.hpp	/^  ASIO_OS_DEF(IPV6_MULTICAST_HOPS)> hops;$/;"	t	namespace:asio::ip::multicast
hops	.\include\asio\ip\multicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:asio::ip::multicast
hops	.\include\asio\ip\unicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:asio::ip::unicast
host_	.\include\asio\ssl\rfc2818_verification.hpp	/^  std::string host_;$/;"	m	class:asio::ssl::rfc2818_verification
host_name	.\include\asio\detail\winrt_utils.hpp	/^inline Windows::Networking::HostName^ host_name(const T& from)$/;"	f	namespace:asio::detail::winrt_utils
host_name	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::basic_string<char, std::char_traits<char>, Allocator> host_name($/;"	f	class:asio::ip::basic_resolver_entry
host_name	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::string host_name() const$/;"	f	class:asio::ip::basic_resolver_entry
host_name	.\include\asio\ip\basic_resolver_query.hpp	/^  std::string host_name() const$/;"	f	class:asio::ip::basic_resolver_query
host_name_	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::string host_name_;$/;"	m	class:asio::ip::basic_resolver_entry
host_name_	.\include\asio\ip\basic_resolver_query.hpp	/^  std::string host_name_;$/;"	m	class:asio::ip::basic_resolver_query
host_not_found	.\include\asio\error.hpp	/^  host_not_found = ASIO_NETDB_ERROR(HOST_NOT_FOUND),$/;"	e	enum:asio::error::netdb_errors
host_not_found_try_again	.\include\asio\error.hpp	/^  host_not_found_try_again = ASIO_NETDB_ERROR(TRY_AGAIN),$/;"	e	enum:asio::error::netdb_errors
host_unreachable	.\include\asio\error.hpp	/^  host_unreachable = ASIO_SOCKET_ERROR(EHOSTUNREACH),$/;"	e	enum:asio::error::basic_errors
icmp	.\include\asio\ip\icmp.hpp	/^  explicit icmp(int protocol_id, int protocol_family)$/;"	f	class:asio::ip::icmp
icmp	.\include\asio\ip\icmp.hpp	/^class icmp$/;"	c	namespace:asio::ip
id	.\include\asio\datagram_socket_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::datagram_socket_service
id	.\include\asio\deadline_timer_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::deadline_timer_service
id	.\include\asio\detail\pop_options.hpp	38;"	d
id	.\include\asio\detail\pop_options.hpp	60;"	d
id	.\include\asio\detail\push_options.hpp	39;"	d
id	.\include\asio\detail\push_options.hpp	63;"	d
id	.\include\asio\execution_context.hpp	/^  id() {}$/;"	f	class:asio::execution_context::id
id	.\include\asio\execution_context.hpp	/^  static service_id<Type> id;$/;"	m	class:asio::detail::execution_context_service_base
id	.\include\asio\execution_context.hpp	/^class execution_context::id$/;"	c	class:asio::execution_context
id	.\include\asio\execution_context.hpp	/^service_id<Type> execution_context_service_base<Type>::id;$/;"	m	class:asio::detail::execution_context_service_base
id	.\include\asio\io_context.hpp	/^  static asio::detail::service_id<Type> id;$/;"	m	class:asio::detail::service_base
id	.\include\asio\io_context.hpp	/^asio::detail::service_id<Type> service_base<Type>::id;$/;"	m	class:asio::detail::service_base
id	.\include\asio\ip\resolver_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::ip::resolver_service
id	.\include\asio\posix\stream_descriptor_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::posix::stream_descriptor_service
id	.\include\asio\raw_socket_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::raw_socket_service
id	.\include\asio\seq_packet_socket_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::seq_packet_socket_service
id	.\include\asio\serial_port_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::serial_port_service
id	.\include\asio\signal_set_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::signal_set_service
id	.\include\asio\socket_acceptor_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::socket_acceptor_service
id	.\include\asio\stream_socket_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::stream_socket_service
id	.\include\asio\waitable_timer_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::waitable_timer_service
id	.\include\asio\windows\object_handle_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::windows::object_handle_service
id	.\include\asio\windows\random_access_handle_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::windows::random_access_handle_service
id	.\include\asio\windows\stream_handle_service.hpp	/^  static asio::io_context::id id;$/;"	m	class:asio::windows::stream_handle_service
id_	.\include\asio\execution_context.hpp	/^    const execution_context::id* id_;$/;"	m	struct:asio::execution_context::service::key
idle_state	.\include\global_types.hpp	/^	idle_state,$/;"	e	enum:udp_states
impl	.\include\asio\impl\executor.hpp	/^  impl()$/;"	f	class:asio::executor::impl
impl	.\include\asio\impl\executor.hpp	/^class executor::impl$/;"	c	class:asio::executor
impl	.\include\asio\impl\executor.hpp	/^class executor::impl<system_executor, Allocator>$/;"	c	class:asio::executor
impl_	.\include\asio\detail\impl\strand_executor_service.hpp	/^  implementation_type impl_;$/;"	m	class:asio::detail::strand_executor_service::invoker
impl_	.\include\asio\detail\impl\strand_service.hpp	/^  strand_impl* impl_;$/;"	m	struct:asio::detail::strand_service::on_dispatch_exit
impl_	.\include\asio\detail\timer_queue_ptime.hpp	/^  timer_queue<forwarding_posix_time_traits> impl_;$/;"	m	class:asio::detail::timer_queue
impl_	.\include\asio\executor.hpp	/^    : impl_(other.clone())$/;"	f	class:asio::executor
impl_	.\include\asio\executor.hpp	/^    : impl_(other.impl_)$/;"	f	class:asio::executor
impl_	.\include\asio\executor.hpp	/^  impl_base* impl_;$/;"	m	class:asio::executor
impl_	.\include\asio\generic\basic_endpoint.hpp	/^  asio::generic::detail::endpoint impl_;$/;"	m	class:asio::generic::basic_endpoint
impl_	.\include\asio\io_context.hpp	/^  impl_type& impl_;$/;"	m	class:asio::io_context
impl_	.\include\asio\io_context_strand.hpp	/^  mutable asio::detail::strand_service::implementation_type impl_;$/;"	m	class:asio::io_context::strand
impl_	.\include\asio\ip\basic_endpoint.hpp	/^  asio::ip::detail::endpoint impl_;$/;"	m	class:asio::ip::basic_endpoint
impl_	.\include\asio\local\basic_endpoint.hpp	/^  asio::local::detail::endpoint impl_;$/;"	m	class:asio::local::basic_endpoint
impl_	.\include\asio\strand.hpp	/^      impl_(other.impl_)$/;"	f	class:asio::strand
impl_	.\include\asio\strand.hpp	/^  implementation_type impl_;$/;"	m	class:asio::strand
impl_	.\include\asio\thread.hpp	/^  detail::thread impl_;$/;"	m	class:asio::thread
impl_	.\include\asio\windows\overlapped_ptr.hpp	/^  detail::win_iocp_overlapped_ptr impl_;$/;"	m	class:asio::windows::overlapped_ptr
impl_base	.\include\asio\executor.hpp	/^    impl_base(bool fast_dispatch) : fast_dispatch_(fast_dispatch) {}$/;"	f	class:asio::executor::impl_base
impl_base	.\include\asio\executor.hpp	/^  class impl_base$/;"	c	class:asio::executor
impl_list_	.\include\asio\detail\strand_executor_service.hpp	/^  strand_impl* impl_list_;$/;"	m	class:asio::detail::strand_executor_service
impl_list_	.\include\asio\detail\win_iocp_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:asio::detail::win_iocp_handle_service
impl_list_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  base_implementation_type* impl_list_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
impl_list_	.\include\asio\detail\win_object_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:asio::detail::win_object_handle_service
impl_list_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  base_implementation_type* impl_list_;$/;"	m	class:asio::detail::winrt_ssocket_service_base
impl_struct	.\include\asio\ssl\stream.hpp	/^  struct impl_struct$/;"	s	class:asio::ssl::stream
impl_type	.\include\asio\io_context.hpp	/^  typedef detail::io_context_impl impl_type;$/;"	t	class:asio::io_context
implementation_	.\include\asio\basic_io_object.hpp	/^  implementation_type implementation_;$/;"	m	class:asio::basic_io_object
implementation_type	.\include\asio\basic_io_object.hpp	/^    typedef typename service_type::implementation_type implementation_type;$/;"	t	class:asio::detail::service_has_move
implementation_type	.\include\asio\basic_io_object.hpp	/^  typedef typename service_type::implementation_type implementation_type;$/;"	t	class:asio::basic_io_object
implementation_type	.\include\asio\datagram_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::datagram_socket_service
implementation_type	.\include\asio\datagram_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::datagram_socket_service
implementation_type	.\include\asio\deadline_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::deadline_timer_service
implementation_type	.\include\asio\deadline_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::deadline_timer_service
implementation_type	.\include\asio\detail\deadline_timer_service.hpp	/^  struct implementation_type$/;"	s	class:asio::detail::deadline_timer_service
implementation_type	.\include\asio\detail\null_socket_service.hpp	/^  struct implementation_type$/;"	s	class:asio::detail::null_socket_service
implementation_type	.\include\asio\detail\reactive_descriptor_service.hpp	/^    implementation_type()$/;"	f	class:asio::detail::reactive_descriptor_service::implementation_type
implementation_type	.\include\asio\detail\reactive_descriptor_service.hpp	/^  class implementation_type$/;"	c	class:asio::detail::reactive_descriptor_service
implementation_type	.\include\asio\detail\reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::implementation_type implementation_type;$/;"	t	class:asio::detail::reactive_serial_port_service
implementation_type	.\include\asio\detail\reactive_socket_service.hpp	/^    implementation_type()$/;"	f	struct:asio::detail::reactive_socket_service::implementation_type
implementation_type	.\include\asio\detail\reactive_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:asio::detail::reactive_socket_service
implementation_type	.\include\asio\detail\resolver_service.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:asio::detail::resolver_service
implementation_type	.\include\asio\detail\resolver_service_base.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:asio::detail::resolver_service_base
implementation_type	.\include\asio\detail\signal_set_service.hpp	/^    implementation_type()$/;"	f	class:asio::detail::signal_set_service::implementation_type
implementation_type	.\include\asio\detail\signal_set_service.hpp	/^  class implementation_type$/;"	c	class:asio::detail::signal_set_service
implementation_type	.\include\asio\detail\strand_executor_service.hpp	/^  typedef shared_ptr<strand_impl> implementation_type;$/;"	t	class:asio::detail::strand_executor_service
implementation_type	.\include\asio\detail\strand_service.hpp	/^  typedef strand_impl* implementation_type;$/;"	t	class:asio::detail::strand_service
implementation_type	.\include\asio\detail\win_iocp_handle_service.hpp	/^    implementation_type()$/;"	f	class:asio::detail::win_iocp_handle_service::implementation_type
implementation_type	.\include\asio\detail\win_iocp_handle_service.hpp	/^  class implementation_type$/;"	c	class:asio::detail::win_iocp_handle_service
implementation_type	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::implementation_type implementation_type;$/;"	t	class:asio::detail::win_iocp_serial_port_service
implementation_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^    implementation_type()$/;"	f	struct:asio::detail::win_iocp_socket_service::implementation_type
implementation_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^  struct implementation_type :$/;"	s	class:asio::detail::win_iocp_socket_service
implementation_type	.\include\asio\detail\win_object_handle_service.hpp	/^    implementation_type()$/;"	f	class:asio::detail::win_object_handle_service::implementation_type
implementation_type	.\include\asio\detail\win_object_handle_service.hpp	/^  class implementation_type$/;"	c	class:asio::detail::win_object_handle_service
implementation_type	.\include\asio\detail\winrt_resolver_service.hpp	/^  typedef socket_ops::shared_cancel_token_type implementation_type;$/;"	t	class:asio::detail::winrt_resolver_service
implementation_type	.\include\asio\detail\winrt_ssocket_service.hpp	/^    implementation_type()$/;"	f	struct:asio::detail::winrt_ssocket_service::implementation_type
implementation_type	.\include\asio\detail\winrt_ssocket_service.hpp	/^  struct implementation_type : base_implementation_type$/;"	s	class:asio::detail::winrt_ssocket_service
implementation_type	.\include\asio\ip\resolver_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::ip::resolver_service
implementation_type	.\include\asio\ip\resolver_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::ip::resolver_service
implementation_type	.\include\asio\posix\stream_descriptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::posix::stream_descriptor_service
implementation_type	.\include\asio\posix\stream_descriptor_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::posix::stream_descriptor_service
implementation_type	.\include\asio\raw_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::raw_socket_service
implementation_type	.\include\asio\raw_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::raw_socket_service
implementation_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::seq_packet_socket_service
implementation_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::seq_packet_socket_service
implementation_type	.\include\asio\serial_port_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::serial_port_service
implementation_type	.\include\asio\serial_port_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::serial_port_service
implementation_type	.\include\asio\signal_set_service.hpp	/^  typedef detail::signal_set_service::implementation_type implementation_type;$/;"	t	class:asio::signal_set_service
implementation_type	.\include\asio\signal_set_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::signal_set_service
implementation_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::socket_acceptor_service
implementation_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::socket_acceptor_service
implementation_type	.\include\asio\strand.hpp	/^    implementation_type;$/;"	t	class:asio::strand
implementation_type	.\include\asio\stream_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::stream_socket_service
implementation_type	.\include\asio\stream_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::stream_socket_service
implementation_type	.\include\asio\waitable_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::waitable_timer_service
implementation_type	.\include\asio\waitable_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::waitable_timer_service
implementation_type	.\include\asio\windows\object_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::windows::object_handle_service
implementation_type	.\include\asio\windows\object_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::windows::object_handle_service
implementation_type	.\include\asio\windows\random_access_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::windows::random_access_handle_service
implementation_type	.\include\asio\windows\random_access_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::windows::random_access_handle_service
implementation_type	.\include\asio\windows\stream_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:asio::windows::stream_handle_service
implementation_type	.\include\asio\windows\stream_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:asio::windows::stream_handle_service
implementations_	.\include\asio\detail\strand_service.hpp	/^  scoped_ptr<strand_impl> implementations_[num_implementations];$/;"	m	class:asio::detail::strand_service
imr_interface	.\include\asio\detail\socket_types.hpp	/^struct in4_mreq_type { in4_addr_type imr_multiaddr, imr_interface; };$/;"	m	struct:asio::detail::in4_mreq_type
imr_multiaddr	.\include\asio\detail\socket_types.hpp	/^struct in4_mreq_type { in4_addr_type imr_multiaddr, imr_interface; };$/;"	m	struct:asio::detail::in4_mreq_type
in4_addr_type	.\include\asio\detail\socket_types.hpp	/^struct in4_addr_type { u_long_type s_addr; };$/;"	s	namespace:asio::detail
in4_mreq_type	.\include\asio\detail\socket_types.hpp	/^struct in4_mreq_type { in4_addr_type imr_multiaddr, imr_interface; };$/;"	s	namespace:asio::detail
in6_addr_emulation	.\include\asio\detail\old_win_sdk_compat.hpp	/^struct in6_addr_emulation$/;"	s	namespace:asio::detail
in6_addr_type	.\include\asio\detail\socket_types.hpp	/^struct in6_addr_type { unsigned char s6_addr[16]; };$/;"	s	namespace:asio::detail
in6_mreq_type	.\include\asio\detail\socket_types.hpp	/^struct in6_mreq_type { in6_addr_type ipv6mr_multiaddr;$/;"	s	namespace:asio::detail
in_avail	.\include\asio\buffered_read_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:asio::buffered_read_stream
in_avail	.\include\asio\buffered_read_stream.hpp	/^  std::size_t in_avail(asio::error_code& ec)$/;"	f	class:asio::buffered_read_stream
in_avail	.\include\asio\buffered_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:asio::buffered_stream
in_avail	.\include\asio\buffered_stream.hpp	/^  std::size_t in_avail(asio::error_code& ec)$/;"	f	class:asio::buffered_stream
in_avail	.\include\asio\buffered_write_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:asio::buffered_write_stream
in_avail	.\include\asio\buffered_write_stream.hpp	/^  std::size_t in_avail(asio::error_code& ec)$/;"	f	class:asio::buffered_write_stream
in_flags_	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags in_flags_;$/;"	m	class:asio::detail::reactive_socket_recvmsg_op_base
in_progress	.\include\asio\error.hpp	/^  in_progress = ASIO_SOCKET_ERROR(EINPROGRESS),$/;"	e	enum:asio::error::basic_errors
increment	.\include\asio\buffers_iterator.hpp	/^  void increment()$/;"	f	class:asio::buffers_iterator
increment	.\include\asio\detail\atomic_count.hpp	/^inline void increment(atomic_count& a, long b) { a += b; }$/;"	f	namespace:asio::detail
increment	.\include\asio\ip\basic_resolver_iterator.hpp	/^  void increment()$/;"	f	class:asio::ip::basic_resolver_iterator
index_	.\include\asio\impl\connect.hpp	/^    std::size_t index_;$/;"	m	class:asio::detail::range_connect_op
index_	.\include\asio\ip\basic_resolver_iterator.hpp	/^  std::size_t index_;$/;"	m	class:asio::ip::basic_resolver_iterator
init	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  void init(Iterator begin, Iterator end)$/;"	f	class:asio::detail::buffer_sequence_adapter
init	.\include\asio\detail\null_static_mutex.hpp	/^  void init()$/;"	f	struct:asio::detail::null_static_mutex
init	.\include\asio\detail\posix_static_mutex.hpp	/^  void init()$/;"	f	struct:asio::detail::posix_static_mutex
init	.\include\asio\detail\std_static_mutex.hpp	/^  void init()$/;"	f	class:asio::detail::std_static_mutex
init_	.\include\asio\io_context.hpp	/^  detail::signal_init<> init_;$/;"	m	class:asio::io_context
init_	.\include\asio\io_context.hpp	/^  detail::winsock_init<> init_;$/;"	m	class:asio::io_context
init_	.\include\asio\ssl\context.hpp	/^  asio::ssl::detail::openssl_init<> init_;$/;"	m	class:asio::ssl::context
init_buffers	.\include\asio\basic_socket_streambuf.hpp	/^  void init_buffers()$/;"	f	class:asio::basic_socket_streambuf
init_count_	.\include\asio\detail\winsock_init.hpp	/^    long init_count_;$/;"	m	struct:asio::detail::winsock_init_base::data
init_key	.\include\asio\detail\impl\service_registry.hpp	/^inline void service_registry::init_key($/;"	f	class:asio::detail::service_registry
init_key	.\include\asio\detail\impl\service_registry.hpp	/^void service_registry::init_key(execution_context::service::key& key,$/;"	f	class:asio::detail::service_registry
init_key_from_id	.\include\asio\detail\impl\service_registry.hpp	/^void service_registry::init_key_from_id(execution_context::service::key& key,$/;"	f	class:asio::detail::service_registry
init_once_	.\include\asio\detail\posix_global.hpp	/^  static ::pthread_once_t init_once_;$/;"	m	struct:asio::detail::posix_global_impl
init_once_	.\include\asio\detail\posix_global.hpp	/^::pthread_once_t posix_global_impl<T>::init_once_ = PTHREAD_ONCE_INIT;$/;"	m	class:asio::detail::posix_global_impl
init_once_	.\include\asio\detail\std_global.hpp	/^  static std::once_flag init_once_;$/;"	m	struct:asio::detail::std_global_impl
init_once_	.\include\asio\detail\std_global.hpp	/^std::once_flag std_global_impl<T>::init_once_;$/;"	m	class:asio::detail::std_global_impl
init_semaphore	.\include\udp_if.hpp	/^	wait_semaphore init_semaphore;$/;"	m	class:udp_if
init_server	.\source\c_binding.cpp	/^void init_server(unsigned int command_port, unsigned int stream_port, unsigned int shuttleBoardID)$/;"	f
init_server_blocking	.\source\c_binding.cpp	/^void init_server_blocking(unsigned int command_port, unsigned int stream_port, unsigned int shuttleBoardID)$/;"	f
init_state	.\include\global_types.hpp	/^	init_state,$/;"	e	enum:udp_states
init_task	.\include\asio\detail\win_iocp_io_context.hpp	/^  void init_task()$/;"	f	class:asio::detail::win_iocp_io_context
initial_suspend	.\include\asio\experimental\impl\co_spawn.hpp	/^  auto initial_suspend()$/;"	f	class:asio::experimental::detail::awaitee_base
initial_suspend	.\include\asio\experimental\impl\co_spawn.hpp	/^  auto initial_suspend()$/;"	f	class:asio::experimental::detail::awaiter
initialised_	.\include\asio\detail\win_static_mutex.hpp	/^  bool initialised_;$/;"	m	struct:asio::detail::win_static_mutex
inner_executor_type	.\include\asio\strand.hpp	/^  typedef Executor inner_executor_type;$/;"	t	class:asio::strand
inner_stream_impl_	.\include\asio\buffered_stream.hpp	/^  write_stream_type inner_stream_impl_;$/;"	m	class:asio::buffered_stream
input_	.\include\asio\ssl\detail\stream_core.hpp	/^  asio::const_buffer input_;$/;"	m	struct:asio::ssl::detail::stream_core
input_buffer_	.\include\asio\ssl\detail\stream_core.hpp	/^  const asio::mutable_buffer input_buffer_;$/;"	m	struct:asio::ssl::detail::stream_core
input_buffer_space_	.\include\asio\ssl\detail\stream_core.hpp	/^  std::vector<unsigned char> input_buffer_space_;$/;"	m	struct:asio::ssl::detail::stream_core
insert	.\include\asio\detail\hash_map.hpp	/^  std::pair<iterator, bool> insert(const value_type& v)$/;"	f	class:asio::detail::hash_map
instance_	.\include\asio\detail\null_global.hpp	/^  static null_global_impl instance_;$/;"	m	struct:asio::detail::null_global_impl
instance_	.\include\asio\detail\null_global.hpp	/^null_global_impl<T> null_global_impl<T>::instance_;$/;"	m	class:asio::detail::null_global_impl
instance_	.\include\asio\detail\posix_global.hpp	/^  static posix_global_impl instance_;$/;"	m	struct:asio::detail::posix_global_impl
instance_	.\include\asio\detail\posix_global.hpp	/^posix_global_impl<T> posix_global_impl<T>::instance_;$/;"	m	class:asio::detail::posix_global_impl
instance_	.\include\asio\detail\std_global.hpp	/^  static std_global_impl instance_;$/;"	m	struct:asio::detail::std_global_impl
instance_	.\include\asio\detail\std_global.hpp	/^std_global_impl<T> std_global_impl<T>::instance_;$/;"	m	class:asio::detail::std_global_impl
instance_	.\include\asio\detail\win_global.hpp	/^  static win_global_impl instance_;$/;"	m	struct:asio::detail::win_global_impl
instance_	.\include\asio\detail\win_global.hpp	/^win_global_impl<T> win_global_impl<T>::instance_ = { 0 };$/;"	m	class:asio::detail::win_global_impl
instance_	.\include\asio\ssl\detail\openssl_init.hpp	/^  static openssl_init instance_;$/;"	m	class:asio::ssl::detail::openssl_init
instance_	.\include\asio\ssl\detail\openssl_init.hpp	/^openssl_init<Do_Init> openssl_init<Do_Init>::instance_;$/;"	m	class:asio::ssl::detail::openssl_init
int_channel	.\include\bmi08x_defs.h	/^enum bmi08x_accel_int_channel int_channel;$/;"	m	struct:bmi08x_accel_int_channel_cfg	typeref:enum:bmi08x_accel_int_channel_cfg::bmi08x_accel_int_channel
int_channel	.\include\bmi08x_defs.h	/^enum bmi08x_gyro_int_channel int_channel;$/;"	m	struct:bmi08x_gyro_int_channel_cfg	typeref:enum:bmi08x_gyro_int_channel_cfg::bmi08x_gyro_int_channel
int_pin_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_int_pin_cfg int_pin_cfg;$/;"	m	struct:bmi08x_accel_int_channel_cfg	typeref:struct:bmi08x_accel_int_channel_cfg::bmi08x_int_pin_cfg
int_pin_cfg	.\include\bmi08x_defs.h	/^struct bmi08x_int_pin_cfg int_pin_cfg;$/;"	m	struct:bmi08x_gyro_int_channel_cfg	typeref:struct:bmi08x_gyro_int_channel_cfg::bmi08x_int_pin_cfg
int_type	.\include\bmi08x_defs.h	/^enum bmi08x_accel_int_types int_type;$/;"	m	struct:bmi08x_accel_int_channel_cfg	typeref:enum:bmi08x_accel_int_channel_cfg::bmi08x_accel_int_types
int_type	.\include\bmi08x_defs.h	/^enum bmi08x_gyro_int_types int_type;$/;"	m	struct:bmi08x_gyro_int_channel_cfg	typeref:enum:bmi08x_gyro_int_channel_cfg::bmi08x_gyro_int_types
integer	.\include\asio\detail\socket_option.hpp	/^  explicit integer(int v)$/;"	f	class:asio::detail::socket_option::integer
integer	.\include\asio\detail\socket_option.hpp	/^  integer()$/;"	f	class:asio::detail::socket_option::integer
integer	.\include\asio\detail\socket_option.hpp	/^class integer$/;"	c	namespace:asio::detail::socket_option
internal_non_blocking	.\include\asio\detail\descriptor_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:asio::detail::descriptor_ops::__anon13
internal_non_blocking	.\include\asio\detail\socket_ops.hpp	/^  internal_non_blocking = 2,$/;"	e	enum:asio::detail::socket_ops::__anon18
interrupt	.\include\asio\detail\null_reactor.hpp	/^  void interrupt()$/;"	f	class:asio::detail::null_reactor
interrupted	.\include\asio\error.hpp	/^  interrupted = ASIO_SOCKET_ERROR(EINTR),$/;"	e	enum:asio::error::basic_errors
interrupter_	.\include\asio\detail\dev_poll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:asio::detail::dev_poll_reactor
interrupter_	.\include\asio\detail\epoll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:asio::detail::epoll_reactor
interrupter_	.\include\asio\detail\kqueue_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:asio::detail::kqueue_reactor
interrupter_	.\include\asio\detail\select_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:asio::detail::select_reactor
intf	.\include\bmi08x_defs.h	/^enum bmi08x_intf intf;$/;"	m	struct:bmi08x_dev	typeref:enum:bmi08x_dev::bmi08x_intf
invalid_argument	.\include\asio\error.hpp	/^  invalid_argument = ASIO_SOCKET_ERROR(EINVAL),$/;"	e	enum:asio::error::basic_errors
invalid_service_owner	.\include\asio\execution_context.hpp	/^class invalid_service_owner$/;"	c	namespace:asio
invoke	.\include\asio\detail\handler_invoke_helpers.hpp	/^inline void invoke(Function& function, Context& context)$/;"	f	namespace:asio_handler_invoke_helpers
invoke	.\include\asio\detail\handler_invoke_helpers.hpp	/^inline void invoke(const Function& function, Context& context)$/;"	f	namespace:asio_handler_invoke_helpers
invoker	.\include\asio\detail\impl\strand_executor_service.hpp	/^  invoker(const implementation_type& impl, Executor& ex)$/;"	f	class:asio::detail::strand_executor_service::invoker
invoker	.\include\asio\detail\impl\strand_executor_service.hpp	/^  invoker(const invoker& other)$/;"	f	class:asio::detail::strand_executor_service::invoker
invoker	.\include\asio\detail\impl\strand_executor_service.hpp	/^  invoker(invoker&& other)$/;"	f	class:asio::detail::strand_executor_service::invoker
invoker	.\include\asio\detail\impl\strand_executor_service.hpp	/^class strand_executor_service::invoker$/;"	c	class:asio::detail::strand_executor_service
io	.\include\asio\ssl\detail\io.hpp	/^std::size_t io(Stream& next_layer, stream_core& core,$/;"	f	namespace:asio::ssl::detail
io_context	.\include\asio\io_context.hpp	/^class io_context$/;"	c	namespace:asio
io_context_	.\include\asio\detail\impl\strand_service.hpp	/^  io_context_impl* io_context_;$/;"	m	struct:asio::detail::strand_service::on_dispatch_exit
io_context_	.\include\asio\detail\null_socket_service.hpp	/^  asio::io_context& io_context_;$/;"	m	class:asio::detail::null_socket_service
io_context_	.\include\asio\detail\reactive_socket_service_base.hpp	/^  io_context& io_context_;$/;"	m	class:asio::detail::reactive_socket_service_base
io_context_	.\include\asio\detail\signal_set_service.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::signal_set_service
io_context_	.\include\asio\detail\strand_service.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::strand_service
io_context_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::io_context& io_context_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
io_context_	.\include\asio\detail\win_object_handle_service.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::win_object_handle_service
io_context_	.\include\asio\detail\winrt_async_manager.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::winrt_async_manager
io_context_	.\include\asio\detail\winrt_resolver_service.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::winrt_resolver_service
io_context_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::winrt_ssocket_service_base
io_context_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  io_context_impl& io_context_;$/;"	m	class:asio::detail::winrt_timer_scheduler
io_context_	.\include\asio\io_context.hpp	/^  io_context& io_context_;$/;"	m	class:asio::io_context::executor_type
io_context_impl	.\include\asio\io_context.hpp	/^  typedef class win_iocp_io_context io_context_impl;$/;"	t	namespace:asio::detail	typeref:class:asio::detail::win_iocp_io_context
io_context_impl_	.\include\asio\detail\resolve_endpoint_op.hpp	/^  io_context_impl& io_context_impl_;$/;"	m	class:asio::detail::resolve_endpoint_op
io_context_impl_	.\include\asio\detail\resolve_query_op.hpp	/^  io_context_impl& io_context_impl_;$/;"	m	class:asio::detail::resolve_query_op
io_context_impl_	.\include\asio\detail\resolver_service_base.hpp	/^  io_context_impl& io_context_impl_;$/;"	m	class:asio::detail::resolver_service_base
io_context_impl_	.\include\asio\io_context.hpp	/^  detail::io_context_impl& io_context_impl_;$/;"	m	class:asio::io_context::work
io_control	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID io_control(IoControlCommand& command,$/;"	f	class:asio::basic_socket
io_control	.\include\asio\basic_socket.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:asio::basic_socket
io_control	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID io_control(IoControlCommand& command,$/;"	f	class:asio::basic_socket_acceptor
io_control	.\include\asio\basic_socket_acceptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:asio::basic_socket_acceptor
io_control	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
io_control	.\include\asio\detail\io_control.hpp	/^namespace io_control {$/;"	n	namespace:asio::detail
io_control	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code io_control(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
io_control	.\include\asio\detail\reactive_descriptor_service.hpp	/^  asio::error_code io_control(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
io_control	.\include\asio\detail\reactive_socket_service_base.hpp	/^  asio::error_code io_control(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
io_control	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::error_code io_control(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
io_control	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::error_code io_control(base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
io_control	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID io_control(IoControlCommand& command,$/;"	f	class:asio::posix::basic_descriptor
io_control	.\include\asio\posix\basic_descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:asio::posix::basic_descriptor
io_control	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID io_control(IoControlCommand& command,$/;"	f	class:asio::posix::descriptor
io_control	.\include\asio\posix\descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:asio::posix::descriptor
io_control	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
io_control	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
io_control	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
io_control	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
io_control	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID io_control(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
io_op	.\include\asio\ssl\detail\io.hpp	/^  io_op(Stream& next_layer, stream_core& core,$/;"	f	class:asio::ssl::detail::io_op
io_op	.\include\asio\ssl\detail\io.hpp	/^  io_op(const io_op& other)$/;"	f	class:asio::ssl::detail::io_op
io_op	.\include\asio\ssl\detail\io.hpp	/^  io_op(io_op&& other)$/;"	f	class:asio::ssl::detail::io_op
io_op	.\include\asio\ssl\detail\io.hpp	/^class io_op$/;"	c	namespace:asio::ssl::detail
io_service	.\include\asio\io_service.hpp	/^typedef io_context io_service;$/;"	t	namespace:asio
iocp_	.\include\asio\detail\win_iocp_io_context.hpp	/^  auto_handle iocp_;$/;"	m	class:asio::detail::win_iocp_io_context
iocp_service_	.\include\asio\detail\win_iocp_handle_service.hpp	/^  win_iocp_io_context& iocp_service_;$/;"	m	class:asio::detail::win_iocp_handle_service
iocp_service_	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  win_iocp_io_context* iocp_service_;$/;"	m	class:asio::detail::win_iocp_overlapped_ptr
iocp_service_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  win_iocp_io_context& iocp_service_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
ioctl_arg_type	.\include\asio\detail\socket_types.hpp	/^typedef u_long_type ioctl_arg_type;$/;"	t	namespace:asio::detail
iostream	.\include\asio\generic\stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:asio::generic::stream_protocol
iostream	.\include\asio\ip\tcp.hpp	/^  typedef basic_socket_iostream<tcp> iostream;$/;"	t	class:asio::ip::tcp
iostream	.\include\asio\local\stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:asio::local::stream_protocol
ip	.\include\asio\ip\address.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v4.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v4_iterator.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v4_range.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v6.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v6_iterator.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\address_v6_range.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\bad_address_cast.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_resolver.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_resolver_entry.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_resolver_iterator.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_resolver_query.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\basic_resolver_results.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\detail\endpoint.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\detail\socket_option.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\host_name.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\icmp.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\address.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\address_v4.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\address_v6.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\network_v4.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\impl\network_v6.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\multicast.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\network_v4.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\network_v6.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\resolver_base.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\resolver_query_base.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\resolver_service.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\tcp.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\udp.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\unicast.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ip\v6_only.hpp	/^namespace ip {$/;"	n	namespace:asio
ip	.\include\asio\ts\netfwd.hpp	/^namespace ip {$/;"	n	namespace:asio
ipv4	.\include\asio\ip\address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:asio::ip::address::__anon28
ipv4_address_	.\include\asio\ip\address.hpp	/^  asio::ip::address_v4 ipv4_address_;$/;"	m	class:asio::ip::address
ipv4_value_	.\include\asio\ip\detail\socket_option.hpp	/^  asio::detail::in4_addr_type ipv4_value_;$/;"	m	class:asio::ip::detail::socket_option::network_interface
ipv4_value_	.\include\asio\ip\detail\socket_option.hpp	/^  asio::detail::in4_mreq_type ipv4_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_request
ipv4_value_	.\include\asio\ip\detail\socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_enable_loopback
ipv4_value_	.\include\asio\ip\detail\socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_hops
ipv4_value_type	.\include\asio\ip\detail\socket_option.hpp	/^  typedef int ipv4_value_type;$/;"	t	class:asio::ip::detail::socket_option::multicast_hops
ipv4_value_type	.\include\asio\ip\detail\socket_option.hpp	/^  typedef unsigned char ipv4_value_type;$/;"	t	class:asio::ip::detail::socket_option::multicast_enable_loopback
ipv6	.\include\asio\ip\address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:asio::ip::address::__anon28
ipv6_address_	.\include\asio\ip\address.hpp	/^  asio::ip::address_v6 ipv6_address_;$/;"	m	class:asio::ip::address
ipv6_mreq_emulation	.\include\asio\detail\old_win_sdk_compat.hpp	/^struct ipv6_mreq_emulation$/;"	s	namespace:asio::detail
ipv6_value_	.\include\asio\ip\detail\socket_option.hpp	/^  asio::detail::in6_mreq_type ipv6_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_request
ipv6_value_	.\include\asio\ip\detail\socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_enable_loopback
ipv6_value_	.\include\asio\ip\detail\socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:asio::ip::detail::socket_option::multicast_hops
ipv6_value_	.\include\asio\ip\detail\socket_option.hpp	/^  unsigned int ipv6_value_;$/;"	m	class:asio::ip::detail::socket_option::network_interface
ipv6_value_type	.\include\asio\ip\detail\socket_option.hpp	/^  typedef int ipv6_value_type;$/;"	t	class:asio::ip::detail::socket_option::multicast_hops
ipv6_value_type	.\include\asio\ip\detail\socket_option.hpp	/^  typedef unsigned char ipv6_value_type;$/;"	t	class:asio::ip::detail::socket_option::multicast_enable_loopback
ipv6mr_interface	.\include\asio\detail\old_win_sdk_compat.hpp	/^  unsigned int ipv6mr_interface;$/;"	m	struct:asio::detail::ipv6_mreq_emulation
ipv6mr_interface	.\include\asio\detail\socket_types.hpp	/^  unsigned long ipv6mr_interface; };$/;"	m	struct:asio::detail::in6_mreq_type
ipv6mr_multiaddr	.\include\asio\detail\old_win_sdk_compat.hpp	/^  in6_addr_emulation ipv6mr_multiaddr;$/;"	m	struct:asio::detail::ipv6_mreq_emulation
ipv6mr_multiaddr	.\include\asio\detail\socket_types.hpp	/^struct in6_mreq_type { in6_addr_type ipv6mr_multiaddr;$/;"	m	struct:asio::detail::in6_mreq_type
is_buffer_sequence	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence$/;"	s	namespace:asio::detail
is_buffer_sequence	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence<const_buffer, const_buffer>$/;"	s	namespace:asio::detail
is_buffer_sequence	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence<const_buffer, mutable_buffer>$/;"	s	namespace:asio::detail
is_buffer_sequence	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence<mutable_buffer, const_buffer>$/;"	s	namespace:asio::detail
is_buffer_sequence	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence<mutable_buffer, mutable_buffer>$/;"	s	namespace:asio::detail
is_buffer_sequence_class	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_buffer_sequence_class$/;"	s	namespace:asio::detail
is_child	.\include\asio\coroutine.hpp	/^  bool is_child() const { return value_ < 0; }$/;"	f	class:asio::coroutine
is_complete	.\include\asio\coroutine.hpp	/^  bool is_complete() const { return value_ == -1; }$/;"	f	class:asio::coroutine
is_const_buffer_sequence	.\include\asio\buffer.hpp	/^struct is_const_buffer_sequence$/;"	s	namespace:asio
is_continuation	.\include\asio\detail\handler_cont_helpers.hpp	/^inline bool is_continuation(Context& context)$/;"	f	namespace:asio_handler_cont_helpers
is_continuation_delegated	.\include\asio\detail\wrapped_handler.hpp	/^struct is_continuation_delegated$/;"	s	namespace:asio::detail
is_continuation_if_running	.\include\asio\detail\wrapped_handler.hpp	/^struct is_continuation_if_running$/;"	s	namespace:asio::detail
is_dynamic_buffer	.\include\asio\buffer.hpp	/^struct is_dynamic_buffer$/;"	s	namespace:asio
is_dynamic_buffer	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_dynamic_buffer$/;"	s	namespace:asio::detail
is_dynamic_buffer_class	.\include\asio\detail\is_buffer_sequence.hpp	/^struct is_dynamic_buffer_class$/;"	s	namespace:asio::detail
is_endpoint_sequence	.\include\asio\connect.hpp	/^struct is_endpoint_sequence$/;"	s	namespace:asio
is_enqueued	.\include\asio\detail\op_queue.hpp	/^  bool is_enqueued(Operation* o) const$/;"	f	class:asio::detail::op_queue
is_error_code_enum	.\include\asio\error.hpp	/^template<> struct is_error_code_enum<asio::error::addrinfo_errors>$/;"	s	namespace:std
is_error_code_enum	.\include\asio\error.hpp	/^template<> struct is_error_code_enum<asio::error::basic_errors>$/;"	s	namespace:std
is_error_code_enum	.\include\asio\error.hpp	/^template<> struct is_error_code_enum<asio::error::misc_errors>$/;"	s	namespace:std
is_error_code_enum	.\include\asio\error.hpp	/^template<> struct is_error_code_enum<asio::error::netdb_errors>$/;"	s	namespace:std
is_error_code_enum	.\include\asio\ssl\error.hpp	/^template<> struct is_error_code_enum<asio::error::ssl_errors>$/;"	s	namespace:std
is_error_code_enum	.\include\asio\ssl\error.hpp	/^template<> struct is_error_code_enum<asio::ssl::error::stream_errors>$/;"	s	namespace:std
is_executor	.\include\asio\detail\is_executor.hpp	/^struct is_executor$/;"	s	namespace:asio::detail
is_executor	.\include\asio\is_executor.hpp	/^struct is_executor$/;"	s	namespace:asio
is_executor_class	.\include\asio\detail\is_executor.hpp	/^struct is_executor_class$/;"	s	namespace:asio::detail
is_legacy_connect_condition	.\include\asio\impl\connect.hpp	/^  struct is_legacy_connect_condition$/;"	s	namespace:asio::detail
is_match_condition	.\include\asio\read_until.hpp	/^struct is_match_condition$/;"	s	namespace:asio
is_mutable	.\include\asio\buffers_iterator.hpp	/^      is_mutable = is_convertible<$/;"	e	enum:asio::detail::buffers_iterator_types::__anon4
is_mutable_buffer_sequence	.\include\asio\buffer.hpp	/^struct is_mutable_buffer_sequence$/;"	s	namespace:asio
is_open	.\include\asio\basic_serial_port.hpp	/^  bool is_open() const$/;"	f	class:asio::basic_serial_port
is_open	.\include\asio\basic_socket.hpp	/^  bool is_open() const$/;"	f	class:asio::basic_socket
is_open	.\include\asio\basic_socket_acceptor.hpp	/^  bool is_open() const$/;"	f	class:asio::basic_socket_acceptor
is_open	.\include\asio\datagram_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::datagram_socket_service
is_open	.\include\asio\detail\null_socket_service.hpp	/^  bool is_open(const implementation_type&) const$/;"	f	class:asio::detail::null_socket_service
is_open	.\include\asio\detail\reactive_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::detail::reactive_descriptor_service
is_open	.\include\asio\detail\reactive_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::detail::reactive_serial_port_service
is_open	.\include\asio\detail\reactive_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:asio::detail::reactive_socket_service_base
is_open	.\include\asio\detail\win_iocp_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_handle_service
is_open	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_serial_port_service
is_open	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_socket_service_base
is_open	.\include\asio\detail\win_object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::detail::win_object_handle_service
is_open	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  bool is_open(const base_implementation_type& impl) const$/;"	f	class:asio::detail::winrt_ssocket_service_base
is_open	.\include\asio\posix\basic_descriptor.hpp	/^  bool is_open() const$/;"	f	class:asio::posix::basic_descriptor
is_open	.\include\asio\posix\descriptor.hpp	/^  bool is_open() const$/;"	f	class:asio::posix::descriptor
is_open	.\include\asio\posix\stream_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::posix::stream_descriptor_service
is_open	.\include\asio\raw_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::raw_socket_service
is_open	.\include\asio\seq_packet_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::seq_packet_socket_service
is_open	.\include\asio\serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::serial_port_service
is_open	.\include\asio\socket_acceptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::socket_acceptor_service
is_open	.\include\asio\stream_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::stream_socket_service
is_open	.\include\asio\windows\basic_handle.hpp	/^  bool is_open() const$/;"	f	class:asio::windows::basic_handle
is_open	.\include\asio\windows\object_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::windows::object_handle_service
is_open	.\include\asio\windows\overlapped_handle.hpp	/^  bool is_open() const$/;"	f	class:asio::windows::overlapped_handle
is_open	.\include\asio\windows\random_access_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::windows::random_access_handle_service
is_open	.\include\asio\windows\stream_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:asio::windows::stream_handle_service
is_parent	.\include\asio\coroutine.hpp	/^  bool is_parent() const { return !is_child(); }$/;"	f	class:asio::coroutine
is_positive_infinity	.\include\asio\detail\timer_queue.hpp	/^  static bool is_positive_infinity($/;"	f	class:asio::detail::timer_queue
is_positive_infinity	.\include\asio\detail\timer_queue.hpp	/^  static bool is_positive_infinity(const Time_Type&)$/;"	f	class:asio::detail::timer_queue
is_read_buffered	.\include\asio\is_read_buffered.hpp	/^class is_read_buffered$/;"	c	namespace:asio
is_read_buffered_big_type	.\include\asio\is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	s	namespace:asio::detail
is_set	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:asio::detail::posix_fd_set_adapter
is_set	.\include\asio\detail\win_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:asio::detail::win_fd_set_adapter
is_v4	.\include\asio\ip\address.hpp	/^  bool is_v4() const$/;"	f	class:asio::ip::address
is_v4	.\include\asio\ip\detail\endpoint.hpp	/^  bool is_v4() const$/;"	f	class:asio::ip::detail::endpoint
is_v6	.\include\asio\ip\address.hpp	/^  bool is_v6() const$/;"	f	class:asio::ip::address
is_write_buffered	.\include\asio\is_write_buffered.hpp	/^class is_write_buffered$/;"	c	namespace:asio
is_write_buffered_big_type	.\include\asio\is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	s	namespace:asio::detail
item	.\include\asio\detail\thread_group.hpp	/^    explicit item(Function f, item* next)$/;"	f	struct:asio::detail::thread_group::item
item	.\include\asio\detail\thread_group.hpp	/^  struct item$/;"	s	class:asio::detail::thread_group
iter_	.\include\asio\buffer.hpp	/^  Iterator iter_;$/;"	m	class:asio::detail::buffer_debug_check
iter_	.\include\asio\impl\connect.hpp	/^    Iterator iter_;$/;"	m	class:asio::detail::iterator_connect_op
iterator	.\include\asio\detail\hash_map.hpp	/^  typedef typename std::list<value_type>::iterator iterator;$/;"	t	class:asio::detail::hash_map
iterator	.\include\asio\detail\reactor_op_queue.hpp	/^  typedef typename hash_map<key_type, mapped_type>::iterator iterator;$/;"	t	class:asio::detail::reactor_op_queue
iterator	.\include\asio\ip\address_v4_range.hpp	/^  typedef basic_address_iterator<address_v4> iterator;$/;"	t	class:asio::ip::basic_address_range
iterator	.\include\asio\ip\address_v6_range.hpp	/^  typedef basic_address_iterator<address_v6> iterator;$/;"	t	class:asio::ip::basic_address_range
iterator	.\include\asio\ip\basic_resolver.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator;$/;"	t	class:asio::ip::basic_resolver
iterator	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef const_iterator iterator;$/;"	t	class:asio::ip::basic_resolver_results
iterator	.\include\asio\placeholders.hpp	/^unspecified iterator;$/;"	m	namespace:asio::placeholders
iterator_category	.\include\asio\buffers_iterator.hpp	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:asio::buffers_iterator
iterator_category	.\include\asio\ip\address_v4_iterator.hpp	/^  typedef std::input_iterator_tag iterator_category;$/;"	t	class:asio::ip::basic_address_iterator
iterator_category	.\include\asio\ip\address_v6_iterator.hpp	/^  typedef std::input_iterator_tag iterator_category;$/;"	t	class:asio::ip::basic_address_iterator
iterator_category	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:asio::ip::basic_resolver_iterator
iterator_connect_op	.\include\asio\impl\connect.hpp	/^    iterator_connect_op(basic_socket<Protocol ASIO_SVC_TARG>& sock,$/;"	f	class:asio::detail::iterator_connect_op
iterator_connect_op	.\include\asio\impl\connect.hpp	/^    iterator_connect_op(const iterator_connect_op& other)$/;"	f	class:asio::detail::iterator_connect_op
iterator_connect_op	.\include\asio\impl\connect.hpp	/^    iterator_connect_op(iterator_connect_op&& other)$/;"	f	class:asio::detail::iterator_connect_op
iterator_connect_op	.\include\asio\impl\connect.hpp	/^  class iterator_connect_op : base_from_connect_condition<ConnectCondition>$/;"	c	namespace:asio::detail
iterator_type	.\include\asio\ip\resolver_service.hpp	/^  typedef basic_resolver_iterator<InternetProtocol> iterator_type;$/;"	t	class:asio::ip::resolver_service
join	.\include\asio\detail\null_thread.hpp	/^  void join()$/;"	f	class:asio::detail::null_thread
join	.\include\asio\detail\std_thread.hpp	/^  void join()$/;"	f	class:asio::detail::std_thread
join	.\include\asio\detail\thread_group.hpp	/^  void join()$/;"	f	class:asio::detail::thread_group
join	.\include\asio\detail\winapp_thread.hpp	/^  void join()$/;"	f	class:asio::detail::winapp_thread
join	.\include\asio\detail\wince_thread.hpp	/^  void join()$/;"	f	class:asio::detail::wince_thread
join	.\include\asio\thread.hpp	/^  void join()$/;"	f	class:asio::thread
join_group	.\include\asio\ip\multicast.hpp	/^typedef implementation_defined join_group;$/;"	t	namespace:asio::ip::multicast
joined_	.\include\asio\detail\posix_thread.hpp	/^  bool joined_;$/;"	m	class:asio::detail::posix_thread
keep_alive	.\include\asio\socket_base.hpp	/^    ASIO_OS_DEF(SOL_SOCKET), ASIO_OS_DEF(SO_KEEPALIVE)> keep_alive;$/;"	t	class:asio::socket_base
keep_alive	.\include\asio\socket_base.hpp	/^  typedef implementation_defined keep_alive;$/;"	t	class:asio::socket_base
key	.\include\asio\execution_context.hpp	/^    key() : type_info_(0), id_(0) {}$/;"	f	struct:asio::execution_context::service::key
key	.\include\asio\execution_context.hpp	/^  struct key$/;"	s	class:asio::execution_context::service
key_	.\include\asio\detail\call_stack.hpp	/^    Key* key_;$/;"	m	class:asio::detail::call_stack::context
key_	.\include\asio\execution_context.hpp	/^  } key_;$/;"	m	class:asio::execution_context::service	typeref:struct:asio::execution_context::service::key
key_type	.\include\asio\detail\reactor_op_queue.hpp	/^  typedef Descriptor key_type;$/;"	t	class:asio::detail::reactor_op_queue
keyword_tss_ptr	.\include\asio\detail\keyword_tss_ptr.hpp	/^  keyword_tss_ptr()$/;"	f	class:asio::detail::keyword_tss_ptr
keyword_tss_ptr	.\include\asio\detail\keyword_tss_ptr.hpp	/^class keyword_tss_ptr$/;"	c	namespace:asio::detail
kqueue_fd_	.\include\asio\detail\kqueue_reactor.hpp	/^  int kqueue_fd_;$/;"	m	class:asio::detail::kqueue_reactor
kqueue_reactor	.\include\asio\detail\kqueue_reactor.hpp	/^class kqueue_reactor$/;"	c	namespace:asio::detail
l_linger	.\include\asio\detail\socket_types.hpp	/^struct linger_type { u_short_type l_onoff, l_linger; };$/;"	m	struct:asio::detail::linger_type
l_onoff	.\include\asio\detail\socket_types.hpp	/^struct linger_type { u_short_type l_onoff, l_linger; };$/;"	m	struct:asio::detail::linger_type
last	.\include\asio\detail\hash_map.hpp	/^    iterator last;$/;"	m	struct:asio::detail::hash_map::bucket_type
lbarrier	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  static void lbarrier()$/;"	f	class:asio::detail::gcc_x86_fenced_block
leave_group	.\include\asio\ip\multicast.hpp	/^  ASIO_OS_DEF(IPV6_LEAVE_GROUP)> leave_group;$/;"	t	namespace:asio::ip::multicast
leave_group	.\include\asio\ip\multicast.hpp	/^typedef implementation_defined leave_group;$/;"	t	namespace:asio::ip::multicast
legacy_connect_condition_helper	.\include\asio\impl\connect.hpp	/^  struct legacy_connect_condition_helper : T$/;"	s	namespace:asio::detail
legacy_connect_condition_helper	.\include\asio\impl\connect.hpp	/^  struct legacy_connect_condition_helper<R (*)(Arg1, Arg2), Iterator>$/;"	s	namespace:asio::detail
legacy_result_	.\include\asio\async_result.hpp	/^  async_result<completion_handler_type> legacy_result_;$/;"	m	class:asio::async_result
len	.\include\global_types.hpp	/^	unsigned len;$/;"	m	struct:data_t
less_than	.\include\asio\detail\chrono_time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:asio::detail::chrono_time_traits
less_than	.\include\asio\time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:asio::time_traits
level	.\include\asio\detail\socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:asio::detail::socket_option::boolean
level	.\include\asio\detail\socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:asio::detail::socket_option::integer
level	.\include\asio\detail\socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:asio::detail::socket_option::linger
level	.\include\asio\ip\detail\socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
level	.\include\asio\ip\detail\socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
level	.\include\asio\ip\detail\socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_request
level	.\include\asio\ip\detail\socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::network_interface
level	.\include\asio\ip\detail\socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
linger	.\include\asio\detail\socket_option.hpp	/^  linger()$/;"	f	class:asio::detail::socket_option::linger
linger	.\include\asio\detail\socket_option.hpp	/^  linger(bool e, int t)$/;"	f	class:asio::detail::socket_option::linger
linger	.\include\asio\detail\socket_option.hpp	/^class linger$/;"	c	namespace:asio::detail::socket_option
linger	.\include\asio\socket_base.hpp	/^      linger;$/;"	t	class:asio::socket_base
linger	.\include\asio\socket_base.hpp	/^  typedef implementation_defined linger;$/;"	t	class:asio::socket_base
linger_type	.\include\asio\detail\socket_types.hpp	/^struct linger_type { u_short_type l_onoff, l_linger; };$/;"	s	namespace:asio::detail
listen	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID listen(int backlog, asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
listen	.\include\asio\basic_socket_acceptor.hpp	/^  void listen(int backlog = socket_base::max_listen_connections)$/;"	f	class:asio::basic_socket_acceptor
listen	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code listen(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
listen	.\include\asio\detail\reactive_socket_service_base.hpp	/^  asio::error_code listen(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
listen	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::error_code listen(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
listen	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID listen(implementation_type& impl, int backlog,$/;"	f	class:asio::socket_acceptor_service
live_list_	.\include\asio\detail\object_pool.hpp	/^  Object* live_list_;$/;"	m	class:asio::detail::object_pool
load_function_type	.\include\asio\detail\reactive_serial_port_service.hpp	/^  typedef asio::error_code (*load_function_type)($/;"	t	class:asio::detail::reactive_serial_port_service::asio
load_function_type	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  typedef asio::error_code (*load_function_type)($/;"	t	class:asio::detail::win_iocp_serial_port_service::asio
load_option	.\include\asio\detail\reactive_serial_port_service.hpp	/^  static asio::error_code load_option(void* option,$/;"	f	class:asio::detail::reactive_serial_port_service
load_option	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  static asio::error_code load_option(void* option,$/;"	f	class:asio::detail::win_iocp_serial_port_service
local	.\include\asio\local\basic_endpoint.hpp	/^namespace local {$/;"	n	namespace:asio
local	.\include\asio\local\connect_pair.hpp	/^namespace local {$/;"	n	namespace:asio
local	.\include\asio\local\datagram_protocol.hpp	/^namespace local {$/;"	n	namespace:asio
local	.\include\asio\local\detail\endpoint.hpp	/^    asio::detail::sockaddr_un_type local;$/;"	m	union:asio::local::detail::endpoint::data_union
local	.\include\asio\local\detail\endpoint.hpp	/^namespace local {$/;"	n	namespace:asio
local	.\include\asio\local\stream_protocol.hpp	/^namespace local {$/;"	n	namespace:asio
local_endpoint	.\include\asio\basic_socket.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:asio::basic_socket
local_endpoint	.\include\asio\basic_socket.hpp	/^  endpoint_type local_endpoint(asio::error_code& ec) const$/;"	f	class:asio::basic_socket
local_endpoint	.\include\asio\basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:asio::basic_socket_acceptor
local_endpoint	.\include\asio\basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint(asio::error_code& ec) const$/;"	f	class:asio::basic_socket_acceptor
local_endpoint	.\include\asio\datagram_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
local_endpoint	.\include\asio\detail\null_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type&,$/;"	f	class:asio::detail::null_socket_service
local_endpoint	.\include\asio\detail\reactive_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
local_endpoint	.\include\asio\detail\win_iocp_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
local_endpoint	.\include\asio\detail\winrt_ssocket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
local_endpoint	.\include\asio\raw_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::raw_socket_service
local_endpoint	.\include\asio\seq_packet_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
local_endpoint	.\include\asio\socket_acceptor_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
local_endpoint	.\include\asio\stream_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:asio::stream_socket_service
local_free_on_block_exit	.\include\asio\detail\local_free_on_block_exit.hpp	/^  explicit local_free_on_block_exit(void* p)$/;"	f	class:asio::detail::local_free_on_block_exit
local_free_on_block_exit	.\include\asio\detail\local_free_on_block_exit.hpp	/^class local_free_on_block_exit$/;"	c	namespace:asio::detail
lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    void lock()$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::conditionally_enabled_mutex
lock	.\include\asio\detail\null_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::null_mutex
lock	.\include\asio\detail\null_static_mutex.hpp	/^  void lock()$/;"	f	struct:asio::detail::null_static_mutex
lock	.\include\asio\detail\posix_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::posix_mutex
lock	.\include\asio\detail\posix_static_mutex.hpp	/^  void lock()$/;"	f	struct:asio::detail::posix_static_mutex
lock	.\include\asio\detail\scoped_lock.hpp	/^  void lock()$/;"	f	class:asio::detail::scoped_lock
lock	.\include\asio\detail\std_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::std_mutex
lock	.\include\asio\detail\std_static_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::std_static_mutex
lock	.\include\asio\detail\win_mutex.hpp	/^  void lock()$/;"	f	class:asio::detail::win_mutex
lock	.\include\asio\detail\win_static_mutex.hpp	/^  void lock()$/;"	f	struct:asio::detail::win_static_mutex
lock	.\source\strm_queue.cpp	/^void strm_queue::lock()$/;"	f	class:strm_queue
locked	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    bool locked() const$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
locked	.\include\asio\detail\scoped_lock.hpp	/^  bool locked() const$/;"	f	class:asio::detail::scoped_lock
locked_	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    bool locked_;$/;"	m	class:asio::detail::conditionally_enabled_mutex::scoped_lock
locked_	.\include\asio\detail\scoped_lock.hpp	/^  bool locked_;$/;"	m	class:asio::detail::scoped_lock
locked_	.\include\asio\detail\strand_executor_service.hpp	/^    bool locked_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
locked_	.\include\asio\detail\strand_service.hpp	/^    bool locked_;$/;"	m	class:asio::detail::strand_service::strand_impl
locks	.\include\global_types.hpp	/^	unsigned locks;$/;"	m	class:wait_semaphore
loopback	.\include\asio\ip\address_v4.hpp	/^  static address_v4 loopback()$/;"	f	class:asio::ip::address_v4
lowest_layer	.\include\asio\basic_serial_port.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::basic_serial_port
lowest_layer	.\include\asio\basic_serial_port.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::basic_serial_port
lowest_layer	.\include\asio\basic_socket.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::basic_socket
lowest_layer	.\include\asio\basic_socket.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::basic_socket
lowest_layer	.\include\asio\buffered_read_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::buffered_read_stream
lowest_layer	.\include\asio\buffered_read_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::buffered_read_stream
lowest_layer	.\include\asio\buffered_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::buffered_stream
lowest_layer	.\include\asio\buffered_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::buffered_stream
lowest_layer	.\include\asio\buffered_write_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::buffered_write_stream
lowest_layer	.\include\asio\buffered_write_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::buffered_write_stream
lowest_layer	.\include\asio\posix\basic_descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::posix::basic_descriptor
lowest_layer	.\include\asio\posix\basic_descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::posix::basic_descriptor
lowest_layer	.\include\asio\posix\descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::posix::descriptor
lowest_layer	.\include\asio\posix\descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::posix::descriptor
lowest_layer	.\include\asio\ssl\stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::ssl::stream
lowest_layer	.\include\asio\ssl\stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::ssl::stream
lowest_layer	.\include\asio\windows\basic_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::windows::basic_handle
lowest_layer	.\include\asio\windows\basic_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::windows::basic_handle
lowest_layer	.\include\asio\windows\overlapped_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:asio::windows::overlapped_handle
lowest_layer	.\include\asio\windows\overlapped_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:asio::windows::overlapped_handle
lowest_layer_type	.\include\asio\basic_serial_port.hpp	/^  typedef basic_serial_port<SerialPortService> lowest_layer_type;$/;"	t	class:asio::basic_serial_port
lowest_layer_type	.\include\asio\basic_socket.hpp	/^  typedef basic_socket<Protocol ASIO_SVC_TARG> lowest_layer_type;$/;"	t	class:asio::basic_socket
lowest_layer_type	.\include\asio\buffered_read_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:asio::buffered_read_stream
lowest_layer_type	.\include\asio\buffered_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:asio::buffered_stream
lowest_layer_type	.\include\asio\buffered_write_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:asio::buffered_write_stream
lowest_layer_type	.\include\asio\posix\basic_descriptor.hpp	/^  typedef basic_descriptor<DescriptorService> lowest_layer_type;$/;"	t	class:asio::posix::basic_descriptor
lowest_layer_type	.\include\asio\posix\descriptor.hpp	/^  typedef descriptor lowest_layer_type;$/;"	t	class:asio::posix::descriptor
lowest_layer_type	.\include\asio\ssl\stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:asio::ssl::stream
lowest_layer_type	.\include\asio\windows\basic_handle.hpp	/^  typedef basic_handle<HandleService> lowest_layer_type;$/;"	t	class:asio::windows::basic_handle
lowest_layer_type	.\include\asio\windows\overlapped_handle.hpp	/^  typedef overlapped_handle lowest_layer_type;$/;"	t	class:asio::windows::overlapped_handle
lvl	.\include\bmi08x_defs.h	/^uint8_t lvl :1;$/;"	m	struct:bmi08x_int_pin_cfg
macos_fenced_block	.\include\asio\detail\macos_fenced_block.hpp	/^  explicit macos_fenced_block(full_t)$/;"	f	class:asio::detail::macos_fenced_block
macos_fenced_block	.\include\asio\detail\macos_fenced_block.hpp	/^  explicit macos_fenced_block(half_t)$/;"	f	class:asio::detail::macos_fenced_block
macos_fenced_block	.\include\asio\detail\macos_fenced_block.hpp	/^class macos_fenced_block$/;"	c	namespace:asio::detail
main	.\source\main.cpp	/^int main()$/;"	f
main	.\test\main.c	/^int main()$/;"	f
make_address_v4	.\include\asio\ip\address_v4.hpp	/^inline address_v4 make_address_v4(address_v4::uint_type addr)$/;"	f	namespace:asio::ip
make_address_v4	.\include\asio\ip\address_v4.hpp	/^inline address_v4 make_address_v4(const address_v4::bytes_type& bytes)$/;"	f	namespace:asio::ip
make_address_v6	.\include\asio\ip\address_v6.hpp	/^inline address_v6 make_address_v6(const address_v6::bytes_type& bytes,$/;"	f	namespace:asio::ip
make_dummy_awaitable	.\include\asio\experimental\impl\co_spawn.hpp	/^inline Awaitable make_dummy_awaitable()$/;"	f	namespace:asio::experimental::detail
make_error_code	.\include\asio\error.hpp	/^inline asio::error_code make_error_code(addrinfo_errors e)$/;"	f	namespace:asio::error
make_error_code	.\include\asio\error.hpp	/^inline asio::error_code make_error_code(basic_errors e)$/;"	f	namespace:asio::error
make_error_code	.\include\asio\error.hpp	/^inline asio::error_code make_error_code(misc_errors e)$/;"	f	namespace:asio::error
make_error_code	.\include\asio\error.hpp	/^inline asio::error_code make_error_code(netdb_errors e)$/;"	f	namespace:asio::error
make_error_code	.\include\asio\ssl\error.hpp	/^inline asio::error_code make_error_code(ssl_errors e)$/;"	f	namespace:asio::error
make_error_code	.\include\asio\ssl\error.hpp	/^inline asio::error_code make_error_code(stream_errors e)$/;"	f	namespace:asio::ssl::error
make_network_v4	.\include\asio\ip\network_v4.hpp	/^inline network_v4 make_network_v4($/;"	f	namespace:asio::ip
make_network_v6	.\include\asio\ip\network_v6.hpp	/^inline network_v6 make_network_v6($/;"	f	namespace:asio::ip
make_service	.\include\asio\impl\execution_context.hpp	/^Service& make_service(execution_context& e)$/;"	f	namespace:asio
make_service	.\include\asio\impl\execution_context.hpp	/^Service& make_service(execution_context& e, ASIO_MOVE_ARG(Args)... args)$/;"	f	namespace:asio
make_work_guard	.\include\asio\executor_work_guard.hpp	/^inline executor_work_guard<Executor> make_work_guard(const Executor& ex,$/;"	f	namespace:asio
make_work_guard	.\include\asio\executor_work_guard.hpp	/^make_work_guard(ExecutionContext& ctx,$/;"	f	namespace:asio
make_work_guard	.\include\asio\executor_work_guard.hpp	/^make_work_guard(const T& t, ExecutionContext& ctx,$/;"	f	namespace:asio
make_work_guard	.\include\asio\executor_work_guard.hpp	/^make_work_guard(const T& t, const Executor& ex,$/;"	f	namespace:asio
make_work_guard	.\include\asio\executor_work_guard.hpp	/^make_work_guard(const T& t,$/;"	f	namespace:asio
make_write_at_streambuf_op	.\include\asio\impl\write_at.hpp	/^  make_write_at_streambuf_op($/;"	f	namespace:asio::detail
manual	.\include\asio\detail\winsock_init.hpp	/^    manual()$/;"	f	class:asio::detail::winsock_init::manual
manual	.\include\asio\detail\winsock_init.hpp	/^    manual(const manual&)$/;"	f	class:asio::detail::winsock_init::manual
manual	.\include\asio\detail\winsock_init.hpp	/^  class manual$/;"	c	class:asio::detail::winsock_init
mapped_type	.\include\asio\detail\reactor_op_queue.hpp	/^    mapped_type() {}$/;"	f	struct:asio::detail::reactor_op_queue::mapped_type
mapped_type	.\include\asio\detail\reactor_op_queue.hpp	/^    mapped_type(const mapped_type&) {}$/;"	f	struct:asio::detail::reactor_op_queue::mapped_type
mapped_type	.\include\asio\detail\reactor_op_queue.hpp	/^  struct mapped_type : op_queue<reactor_op>$/;"	s	class:asio::detail::reactor_op_queue
match_condition_	.\include\asio\impl\read_until.hpp	/^    MatchCondition match_condition_;$/;"	m	class:asio::detail::read_until_match_op
max_addr_v4_str_len	.\include\asio\detail\socket_types.hpp	/^const int max_addr_v4_str_len = 256;$/;"	m	namespace:asio::detail
max_addr_v6_str_len	.\include\asio\detail\socket_types.hpp	/^const int max_addr_v6_str_len = 256;$/;"	m	namespace:asio::detail
max_buffers	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  enum { max_buffers = 1 };$/;"	e	enum:asio::detail::buffer_sequence_adapter_base::__anon6
max_buffers	.\include\asio\detail\consuming_buffers.hpp	/^  enum { max_buffers = MaxBuffers < 16 ? MaxBuffers : 16 };$/;"	e	enum:asio::detail::prepared_buffers::__anon12
max_connections	.\include\asio\socket_base.hpp	/^  static const int max_connections = implementation_defined;$/;"	m	class:asio::socket_base
max_descriptor	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:asio::detail::posix_fd_set_adapter
max_descriptor	.\include\asio\detail\win_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:asio::detail::win_fd_set_adapter
max_descriptor_	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:asio::detail::posix_fd_set_adapter
max_descriptor_	.\include\asio\detail\win_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:asio::detail::win_fd_set_adapter
max_expiry_time	.\include\asio\basic_socket_streambuf.hpp	/^  static time_point max_expiry_time()$/;"	f	class:asio::basic_socket_streambuf
max_listen_connections	.\include\asio\socket_base.hpp	/^  static const int max_listen_connections = implementation_defined;$/;"	m	class:asio::socket_base
max_mem_index	.\include\asio\detail\thread_info_base.hpp	/^  enum { max_mem_index = 2 };$/;"	e	enum:asio::detail::thread_info_base::__anon25
max_ops	.\include\asio\detail\dev_poll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::dev_poll_reactor::op_types
max_ops	.\include\asio\detail\epoll_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::epoll_reactor::op_types
max_ops	.\include\asio\detail\kqueue_reactor.hpp	/^    connect_op = 1, except_op = 2, max_ops = 3 };$/;"	e	enum:asio::detail::kqueue_reactor::op_types
max_ops	.\include\asio\detail\select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:asio::detail::select_reactor::op_types
max_select_ops	.\include\asio\detail\select_reactor.hpp	/^    max_select_ops = 3, connect_op = 3, max_ops = 4 };$/;"	e	enum:asio::detail::select_reactor::op_types
max_signal_number	.\include\asio\detail\signal_set_service.hpp	/^enum { max_signal_number = NSIG };$/;"	e	enum:asio::detail::__anon17
max_size_	.\include\asio\basic_streambuf.hpp	/^  std::size_t max_size_;$/;"	m	class:asio::basic_streambuf
max_size_	.\include\asio\buffer.hpp	/^      max_size_(maximum_size)$/;"	f	class:asio::dynamic_string_buffer
max_size_	.\include\asio\buffer.hpp	/^      max_size_(maximum_size)$/;"	f	class:asio::dynamic_vector_buffer
max_size_	.\include\asio\buffer.hpp	/^      max_size_(other.max_size_)$/;"	f	class:asio::dynamic_string_buffer
max_size_	.\include\asio\buffer.hpp	/^      max_size_(other.max_size_)$/;"	f	class:asio::dynamic_vector_buffer
max_size_	.\include\asio\buffer.hpp	/^  const std::size_t max_size_;$/;"	m	class:asio::dynamic_string_buffer
max_size_	.\include\asio\buffer.hpp	/^  const std::size_t max_size_;$/;"	m	class:asio::dynamic_vector_buffer
max_timeout_msec	.\include\asio\detail\win_iocp_io_context.hpp	/^    max_timeout_msec = 5 * 60 * 1000,$/;"	e	enum:asio::detail::win_iocp_io_context::__anon27
max_timeout_usec	.\include\asio\detail\win_iocp_io_context.hpp	/^    max_timeout_usec = max_timeout_msec * 1000,$/;"	e	enum:asio::detail::win_iocp_io_context::__anon27
max_tls_record_size	.\include\asio\ssl\detail\stream_core.hpp	/^  enum { max_tls_record_size = 17 * 1024 };$/;"	e	enum:asio::ssl::detail::stream_core::__anon30
maybe_unlock_and_signal_one	.\include\asio\detail\conditionally_enabled_event.hpp	/^  bool maybe_unlock_and_signal_one($/;"	f	class:asio::detail::conditionally_enabled_event
maybe_unlock_and_signal_one	.\include\asio\detail\null_event.hpp	/^  bool maybe_unlock_and_signal_one(Lock&)$/;"	f	class:asio::detail::null_event
maybe_unlock_and_signal_one	.\include\asio\detail\posix_event.hpp	/^  bool maybe_unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::posix_event
maybe_unlock_and_signal_one	.\include\asio\detail\std_event.hpp	/^  bool maybe_unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::std_event
maybe_unlock_and_signal_one	.\include\asio\detail\win_event.hpp	/^  bool maybe_unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::win_event
mem_index	.\include\asio\detail\thread_info_base.hpp	/^    enum { mem_index = 0 };$/;"	e	enum:asio::detail::thread_info_base::default_tag::__anon22
mem_index	.\include\asio\detail\thread_info_base.hpp	/^    enum { mem_index = 1 };$/;"	e	enum:asio::detail::thread_info_base::awaitee_tag::__anon23
message	.\include\asio\error_code.hpp	/^  std::string message() const$/;"	f	class:asio::error_code
message	.\include\udp_parser.hpp	/^    msg_t message;$/;"	m	class:udp_parser
message_do_not_route	.\include\asio\socket_base.hpp	/^  static const int message_do_not_route = implementation_defined;$/;"	m	class:asio::socket_base
message_end_of_record	.\include\asio\socket_base.hpp	/^  static const int message_end_of_record = implementation_defined;$/;"	m	class:asio::socket_base
message_flags	.\include\asio\socket_base.hpp	/^  typedef int message_flags;$/;"	t	class:asio::socket_base
message_out_of_band	.\include\asio\socket_base.hpp	/^  static const int message_out_of_band = implementation_defined;$/;"	m	class:asio::socket_base
message_peek	.\include\asio\socket_base.hpp	/^  static const int message_peek = implementation_defined;$/;"	m	class:asio::socket_base
message_size	.\include\asio\error.hpp	/^  message_size = ASIO_SOCKET_ERROR(EMSGSIZE),$/;"	e	enum:asio::error::basic_errors
messages	.\include\global_types.hpp	/^	messages(unsigned s_id) : shuttle_id(s_id), $/;"	f	class:messages
messages	.\include\global_types.hpp	/^class messages$/;"	c
method	.\include\asio\ssl\context_base.hpp	/^  enum method$/;"	g	class:asio::ssl::context_base
might_have_pending_waits	.\include\asio\detail\deadline_timer_service.hpp	/^    bool might_have_pending_waits;$/;"	m	struct:asio::detail::deadline_timer_service::implementation_type
minimum_	.\include\asio\completion_condition.hpp	/^  std::size_t minimum_;$/;"	m	class:asio::detail::transfer_at_least_t
misc_errors	.\include\asio\error.hpp	/^enum misc_errors$/;"	g	namespace:asio::error
mode	.\include\bmi08x_defs.h	/^uint8_t mode;$/;"	m	struct:bmi08x_data_sync_cfg
modified_	.\include\asio\coroutine.hpp	/^  bool modified_;$/;"	m	class:asio::detail::coroutine_ref
move	.\include\asio\experimental\impl\co_spawn.hpp	/^    : awaitee_base<Executor>(std::move(other))$/;"	f	class:asio::experimental::detail::awaitee
move_assign	.\include\asio\datagram_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
move_assign	.\include\asio\detail\deadline_timer_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
move_assign	.\include\asio\detail\null_socket_service.hpp	/^  void move_assign(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
move_assign	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
move_assign	.\include\asio\detail\reactive_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
move_assign	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
move_assign	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
move_assign	.\include\asio\detail\winrt_resolver_service.hpp	/^  void move_assign(implementation_type&,$/;"	f	class:asio::detail::winrt_resolver_service
move_assign	.\include\asio\detail\winrt_ssocket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
move_assign	.\include\asio\ip\resolver_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::ip::resolver_service
move_assign	.\include\asio\posix\stream_descriptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
move_assign	.\include\asio\raw_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
move_assign	.\include\asio\seq_packet_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
move_assign	.\include\asio\serial_port_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::serial_port_service
move_assign	.\include\asio\socket_acceptor_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
move_assign	.\include\asio\stream_socket_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
move_assign	.\include\asio\waitable_timer_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
move_assign	.\include\asio\windows\object_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
move_assign	.\include\asio\windows\random_access_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
move_assign	.\include\asio\windows\stream_handle_service.hpp	/^  void move_assign(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
move_binder1	.\include\asio\detail\bind_handler.hpp	/^  move_binder1(int, ASIO_MOVE_ARG(Handler) handler,$/;"	f	class:asio::detail::move_binder1
move_binder1	.\include\asio\detail\bind_handler.hpp	/^  move_binder1(move_binder1&& other)$/;"	f	class:asio::detail::move_binder1
move_binder1	.\include\asio\detail\bind_handler.hpp	/^class move_binder1$/;"	c	namespace:asio::detail
move_binder2	.\include\asio\detail\bind_handler.hpp	/^  move_binder2(int, ASIO_MOVE_ARG(Handler) handler,$/;"	f	class:asio::detail::move_binder2
move_binder2	.\include\asio\detail\bind_handler.hpp	/^  move_binder2(move_binder2&& other)$/;"	f	class:asio::detail::move_binder2
move_binder2	.\include\asio\detail\bind_handler.hpp	/^class move_binder2$/;"	c	namespace:asio::detail
move_construct	.\include\asio\datagram_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
move_construct	.\include\asio\detail\deadline_timer_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::deadline_timer_service
move_construct	.\include\asio\detail\null_socket_service.hpp	/^  void move_construct(implementation_type&, implementation_type&)$/;"	f	class:asio::detail::null_socket_service
move_construct	.\include\asio\detail\reactive_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
move_construct	.\include\asio\detail\reactive_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
move_construct	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
move_construct	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
move_construct	.\include\asio\detail\winrt_resolver_service.hpp	/^  void move_construct(implementation_type&,$/;"	f	class:asio::detail::winrt_resolver_service
move_construct	.\include\asio\detail\winrt_ssocket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
move_construct	.\include\asio\ip\resolver_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::ip::resolver_service
move_construct	.\include\asio\posix\stream_descriptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
move_construct	.\include\asio\raw_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
move_construct	.\include\asio\seq_packet_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
move_construct	.\include\asio\serial_port_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::serial_port_service
move_construct	.\include\asio\socket_acceptor_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
move_construct	.\include\asio\stream_socket_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
move_construct	.\include\asio\waitable_timer_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::waitable_timer_service
move_construct	.\include\asio\windows\object_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::windows::object_handle_service
move_construct	.\include\asio\windows\random_access_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::windows::random_access_handle_service
move_construct	.\include\asio\windows\stream_handle_service.hpp	/^  void move_construct(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
move_timer	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^void dev_poll_reactor::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::dev_poll_reactor
move_timer	.\include\asio\detail\impl\epoll_reactor.hpp	/^void epoll_reactor::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::epoll_reactor
move_timer	.\include\asio\detail\impl\kqueue_reactor.hpp	/^void kqueue_reactor::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::kqueue_reactor
move_timer	.\include\asio\detail\impl\select_reactor.hpp	/^void select_reactor::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::select_reactor
move_timer	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^void win_iocp_io_context::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::win_iocp_io_context
move_timer	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^void winrt_timer_scheduler::move_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::winrt_timer_scheduler
move_timer	.\include\asio\detail\timer_queue.hpp	/^  void move_timer(per_timer_data& target, per_timer_data& source)$/;"	f	class:asio::detail::timer_queue
msg_t	.\include\global_types.hpp	/^struct msg_t$/;"	s
msgs	.\include\udp_if.hpp	/^	messages msgs;$/;"	m	class:udp_if
mtx	.\include\global_types.hpp	/^	std::mutex mtx;$/;"	m	class:atomic_bool
mtx	.\include\global_types.hpp	/^	std::mutex mtx;$/;"	m	class:wait_semaphore
mtx	.\include\strm_queue.hpp	/^    std::mutex mtx;$/;"	m	class:strm_queue
multicast	.\include\asio\ip\multicast.hpp	/^namespace multicast {$/;"	n	namespace:asio::ip
multicast_enable_loopback	.\include\asio\ip\detail\socket_option.hpp	/^  explicit multicast_enable_loopback(bool v)$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
multicast_enable_loopback	.\include\asio\ip\detail\socket_option.hpp	/^  multicast_enable_loopback()$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
multicast_enable_loopback	.\include\asio\ip\detail\socket_option.hpp	/^class multicast_enable_loopback$/;"	c	namespace:asio::ip::detail::socket_option
multicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^  explicit multicast_hops(int v)$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
multicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^  multicast_hops()$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
multicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^class multicast_hops$/;"	c	namespace:asio::ip::detail::socket_option
multicast_request	.\include\asio\ip\detail\socket_option.hpp	/^  explicit multicast_request($/;"	f	class:asio::ip::detail::socket_option::multicast_request
multicast_request	.\include\asio\ip\detail\socket_option.hpp	/^  explicit multicast_request(const address& multicast_address)$/;"	f	class:asio::ip::detail::socket_option::multicast_request
multicast_request	.\include\asio\ip\detail\socket_option.hpp	/^  explicit multicast_request(const address_v4& multicast_address,$/;"	f	class:asio::ip::detail::socket_option::multicast_request
multicast_request	.\include\asio\ip\detail\socket_option.hpp	/^  multicast_request()$/;"	f	class:asio::ip::detail::socket_option::multicast_request
multicast_request	.\include\asio\ip\detail\socket_option.hpp	/^class multicast_request$/;"	c	namespace:asio::ip::detail::socket_option
multiple_buffers	.\include\asio\buffer.hpp	/^struct multiple_buffers {};$/;"	s	namespace:asio::detail
mutable_buffer	.\include\asio\buffer.hpp	/^    : mutable_buffer(b)$/;"	f	class:asio::mutable_buffers_1
mutable_buffer	.\include\asio\buffer.hpp	/^    : mutable_buffer(data, size)$/;"	f	class:asio::mutable_buffers_1
mutable_buffer	.\include\asio\buffer.hpp	/^  mutable_buffer(void* data, std::size_t size,$/;"	f	class:asio::mutable_buffer
mutable_buffer	.\include\asio\buffer.hpp	/^class mutable_buffer$/;"	c	namespace:asio
mutable_buffers_1	.\include\asio\buffer.hpp	/^  mutable_buffers_1(void* data, std::size_t size,$/;"	f	class:asio::mutable_buffers_1
mutable_buffers_1	.\include\asio\buffer.hpp	/^class mutable_buffers_1$/;"	c	namespace:asio
mutable_buffers_type	.\include\asio\basic_streambuf.hpp	/^    mutable_buffers_type;$/;"	t	class:asio::basic_streambuf_ref
mutable_buffers_type	.\include\asio\basic_streambuf.hpp	/^  typedef implementation_defined mutable_buffers_type;$/;"	t	class:asio::basic_streambuf
mutable_buffers_type	.\include\asio\buffer.hpp	/^  typedef ASIO_MUTABLE_BUFFER mutable_buffers_type;$/;"	t	class:asio::dynamic_string_buffer
mutable_buffers_type	.\include\asio\buffer.hpp	/^  typedef ASIO_MUTABLE_BUFFER mutable_buffers_type;$/;"	t	class:asio::dynamic_vector_buffer
mutex	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    asio::detail::mutex& mutex()$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
mutex	.\include\asio\detail\epoll_reactor.hpp	/^  typedef conditionally_enabled_mutex mutex;$/;"	t	class:asio::detail::epoll_reactor
mutex	.\include\asio\detail\kqueue_reactor.hpp	/^  typedef conditionally_enabled_mutex mutex;$/;"	t	class:asio::detail::kqueue_reactor
mutex	.\include\asio\detail\mutex.hpp	/^typedef null_mutex mutex;$/;"	t	namespace:asio::detail
mutex	.\include\asio\detail\scheduler.hpp	/^  typedef conditionally_enabled_mutex mutex;$/;"	t	class:asio::detail::scheduler
mutex	.\include\asio\detail\scoped_lock.hpp	/^  Mutex& mutex()$/;"	f	class:asio::detail::scoped_lock
mutex_	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    conditionally_enabled_mutex& mutex_;$/;"	m	class:asio::detail::conditionally_enabled_mutex::scoped_lock
mutex_	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::conditionally_enabled_mutex
mutex_	.\include\asio\detail\dev_poll_reactor.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::dev_poll_reactor
mutex_	.\include\asio\detail\epoll_reactor.hpp	/^    mutex mutex_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
mutex_	.\include\asio\detail\epoll_reactor.hpp	/^  mutex mutex_;$/;"	m	class:asio::detail::epoll_reactor
mutex_	.\include\asio\detail\kqueue_reactor.hpp	/^    mutex mutex_;$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
mutex_	.\include\asio\detail\kqueue_reactor.hpp	/^  mutex mutex_;$/;"	m	class:asio::detail::kqueue_reactor
mutex_	.\include\asio\detail\posix_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	class:asio::detail::posix_mutex
mutex_	.\include\asio\detail\posix_static_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	struct:asio::detail::posix_static_mutex
mutex_	.\include\asio\detail\resolver_service_base.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::resolver_service_base
mutex_	.\include\asio\detail\scheduler.hpp	/^  mutable mutex mutex_;$/;"	m	class:asio::detail::scheduler
mutex_	.\include\asio\detail\scoped_lock.hpp	/^  Mutex& mutex_;$/;"	m	class:asio::detail::scoped_lock
mutex_	.\include\asio\detail\select_reactor.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::select_reactor
mutex_	.\include\asio\detail\service_registry.hpp	/^  mutable asio::detail::mutex mutex_;$/;"	m	class:asio::detail::service_registry
mutex_	.\include\asio\detail\std_mutex.hpp	/^  std::mutex mutex_;$/;"	m	class:asio::detail::std_mutex
mutex_	.\include\asio\detail\std_static_mutex.hpp	/^  std::mutex mutex_;$/;"	m	class:asio::detail::std_static_mutex
mutex_	.\include\asio\detail\strand_executor_service.hpp	/^    mutex* mutex_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
mutex_	.\include\asio\detail\strand_executor_service.hpp	/^  mutex mutex_;$/;"	m	class:asio::detail::strand_executor_service
mutex_	.\include\asio\detail\strand_service.hpp	/^    asio::detail::mutex mutex_;$/;"	m	class:asio::detail::strand_service::strand_impl
mutex_	.\include\asio\detail\strand_service.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::strand_service
mutex_	.\include\asio\detail\win_global.hpp	/^  static static_mutex mutex_;$/;"	m	struct:asio::detail::win_global_impl
mutex_	.\include\asio\detail\win_global.hpp	/^static_mutex win_global_impl<T>::mutex_ = ASIO_STATIC_MUTEX_INIT;$/;"	m	class:asio::detail::win_global_impl
mutex_	.\include\asio\detail\win_iocp_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:asio::detail::win_iocp_handle_service
mutex_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
mutex_	.\include\asio\detail\win_object_handle_service.hpp	/^  mutex mutex_;$/;"	m	class:asio::detail::win_object_handle_service
mutex_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::winrt_ssocket_service_base
mutex_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  asio::detail::mutex mutex_;$/;"	m	class:asio::detail::winrt_timer_scheduler
mutexes_	.\include\asio\detail\strand_executor_service.hpp	/^  scoped_ptr<mutex> mutexes_[num_mutexes];$/;"	m	class:asio::detail::strand_executor_service
my_sleep	.\test\main.c	/^void my_sleep(double duration)$/;"	f
name	.\include\asio\detail\io_control.hpp	/^  int name() const$/;"	f	class:asio::detail::io_control::bytes_readable
name	.\include\asio\detail\socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:asio::detail::socket_option::boolean
name	.\include\asio\detail\socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:asio::detail::socket_option::integer
name	.\include\asio\detail\socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:asio::detail::socket_option::linger
name	.\include\asio\ip\detail\socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
name	.\include\asio\ip\detail\socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
name	.\include\asio\ip\detail\socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_request
name	.\include\asio\ip\detail\socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::network_interface
name	.\include\asio\ip\detail\socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
name_too_long	.\include\asio\error.hpp	/^  name_too_long = ASIO_SOCKET_ERROR(ENAMETOOLONG),$/;"	e	enum:asio::error::basic_errors
native_buffer_type	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  typedef Windows::Storage::Streams::IBuffer^ native_buffer_type;$/;"	t	class:asio::detail::buffer_sequence_adapter_base
native_handle	.\include\asio\basic_serial_port.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::basic_serial_port
native_handle	.\include\asio\basic_socket.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::basic_socket
native_handle	.\include\asio\basic_socket_acceptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::basic_socket_acceptor
native_handle	.\include\asio\datagram_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::datagram_socket_service
native_handle	.\include\asio\detail\null_socket_service.hpp	/^  native_handle_type native_handle(implementation_type&)$/;"	f	class:asio::detail::null_socket_service
native_handle	.\include\asio\detail\reactive_descriptor_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:asio::detail::reactive_descriptor_service
native_handle	.\include\asio\detail\reactive_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::detail::reactive_serial_port_service
native_handle	.\include\asio\detail\reactive_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::detail::reactive_socket_service
native_handle	.\include\asio\detail\reactive_socket_service_base.hpp	/^  native_handle_type native_handle(base_implementation_type& impl)$/;"	f	class:asio::detail::reactive_socket_service_base
native_handle	.\include\asio\detail\win_iocp_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_handle_service
native_handle	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::detail::win_iocp_serial_port_service
native_handle	.\include\asio\detail\win_iocp_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::detail::win_iocp_socket_service
native_handle	.\include\asio\detail\win_object_handle_service.hpp	/^  native_handle_type native_handle(const implementation_type& impl) const$/;"	f	class:asio::detail::win_object_handle_service
native_handle	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  native_handle_type native_handle(base_implementation_type& impl)$/;"	f	class:asio::detail::winrt_ssocket_service_base
native_handle	.\include\asio\posix\basic_descriptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::posix::basic_descriptor
native_handle	.\include\asio\posix\descriptor.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::posix::descriptor
native_handle	.\include\asio\posix\stream_descriptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::posix::stream_descriptor_service
native_handle	.\include\asio\raw_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::raw_socket_service
native_handle	.\include\asio\seq_packet_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::seq_packet_socket_service
native_handle	.\include\asio\serial_port_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::serial_port_service
native_handle	.\include\asio\socket_acceptor_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::socket_acceptor_service
native_handle	.\include\asio\ssl\stream.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::ssl::stream
native_handle	.\include\asio\ssl\verify_context.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::ssl::verify_context
native_handle	.\include\asio\stream_socket_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::stream_socket_service
native_handle	.\include\asio\windows\basic_handle.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::windows::basic_handle
native_handle	.\include\asio\windows\object_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::windows::object_handle_service
native_handle	.\include\asio\windows\overlapped_handle.hpp	/^  native_handle_type native_handle()$/;"	f	class:asio::windows::overlapped_handle
native_handle	.\include\asio\windows\random_access_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::windows::random_access_handle_service
native_handle	.\include\asio\windows\stream_handle_service.hpp	/^  native_handle_type native_handle(implementation_type& impl)$/;"	f	class:asio::windows::stream_handle_service
native_handle_type	.\include\asio\basic_datagram_socket.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_datagram_socket
native_handle_type	.\include\asio\basic_raw_socket.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_raw_socket
native_handle_type	.\include\asio\basic_seq_packet_socket.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_seq_packet_socket
native_handle_type	.\include\asio\basic_serial_port.hpp	/^  typedef typename SerialPortService::native_handle_type native_handle_type;$/;"	t	class:asio::basic_serial_port
native_handle_type	.\include\asio\basic_socket.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_socket
native_handle_type	.\include\asio\basic_socket.hpp	/^  typedef typename ASIO_SVC_T::native_handle_type native_handle_type;$/;"	t	class:asio::basic_socket
native_handle_type	.\include\asio\basic_socket_acceptor.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_socket_acceptor
native_handle_type	.\include\asio\basic_socket_acceptor.hpp	/^  typedef typename ASIO_SVC_T::native_handle_type native_handle_type;$/;"	t	class:asio::basic_socket_acceptor
native_handle_type	.\include\asio\basic_stream_socket.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::basic_stream_socket
native_handle_type	.\include\asio\datagram_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::datagram_socket_service
native_handle_type	.\include\asio\datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::datagram_socket_service
native_handle_type	.\include\asio\detail\null_socket_service.hpp	/^  typedef int native_handle_type;$/;"	t	class:asio::detail::null_socket_service
native_handle_type	.\include\asio\detail\reactive_descriptor_service.hpp	/^  typedef int native_handle_type;$/;"	t	class:asio::detail::reactive_descriptor_service
native_handle_type	.\include\asio\detail\reactive_serial_port_service.hpp	/^  typedef reactive_descriptor_service::native_handle_type native_handle_type;$/;"	t	class:asio::detail::reactive_serial_port_service
native_handle_type	.\include\asio\detail\reactive_socket_service.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:asio::detail::reactive_socket_service
native_handle_type	.\include\asio\detail\reactive_socket_service_base.hpp	/^  typedef socket_type native_handle_type;$/;"	t	class:asio::detail::reactive_socket_service_base
native_handle_type	.\include\asio\detail\win_iocp_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:asio::detail::win_iocp_handle_service
native_handle_type	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::native_handle_type native_handle_type;$/;"	t	class:asio::detail::win_iocp_serial_port_service
native_handle_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s)$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
native_handle_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^    native_handle_type(socket_type s, const endpoint_type& ep)$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
native_handle_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^  class native_handle_type$/;"	c	class:asio::detail::win_iocp_socket_service
native_handle_type	.\include\asio\detail\win_object_handle_service.hpp	/^  typedef HANDLE native_handle_type;$/;"	t	class:asio::detail::win_object_handle_service
native_handle_type	.\include\asio\detail\winrt_ssocket_service.hpp	/^  typedef Windows::Networking::Sockets::StreamSocket^ native_handle_type;$/;"	t	class:asio::detail::winrt_ssocket_service
native_handle_type	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  typedef Windows::Networking::Sockets::StreamSocket^ native_handle_type;$/;"	t	class:asio::detail::winrt_ssocket_service_base
native_handle_type	.\include\asio\posix\basic_descriptor.hpp	/^  typedef typename DescriptorService::native_handle_type native_handle_type;$/;"	t	class:asio::posix::basic_descriptor
native_handle_type	.\include\asio\posix\basic_stream_descriptor.hpp	/^    native_handle_type;$/;"	t	class:asio::posix::basic_stream_descriptor
native_handle_type	.\include\asio\posix\descriptor.hpp	/^  typedef ASIO_SVC_T::native_handle_type native_handle_type;$/;"	t	class:asio::posix::descriptor
native_handle_type	.\include\asio\posix\descriptor.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::posix::descriptor
native_handle_type	.\include\asio\posix\stream_descriptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::posix::stream_descriptor_service
native_handle_type	.\include\asio\posix\stream_descriptor_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::posix::stream_descriptor_service
native_handle_type	.\include\asio\raw_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::raw_socket_service
native_handle_type	.\include\asio\raw_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::raw_socket_service
native_handle_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::seq_packet_socket_service
native_handle_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::seq_packet_socket_service
native_handle_type	.\include\asio\serial_port_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::serial_port_service
native_handle_type	.\include\asio\serial_port_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::serial_port_service
native_handle_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::socket_acceptor_service
native_handle_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::socket_acceptor_service
native_handle_type	.\include\asio\ssl\context.hpp	/^  typedef SSL_CTX* native_handle_type;$/;"	t	class:asio::ssl::context
native_handle_type	.\include\asio\ssl\stream.hpp	/^  typedef SSL* native_handle_type;$/;"	t	class:asio::ssl::stream
native_handle_type	.\include\asio\ssl\verify_context.hpp	/^  typedef X509_STORE_CTX* native_handle_type;$/;"	t	class:asio::ssl::verify_context
native_handle_type	.\include\asio\stream_socket_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::stream_socket_service
native_handle_type	.\include\asio\stream_socket_service.hpp	/^  typedef typename service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::stream_socket_service
native_handle_type	.\include\asio\windows\basic_handle.hpp	/^  typedef typename HandleService::native_handle_type native_handle_type;$/;"	t	class:asio::windows::basic_handle
native_handle_type	.\include\asio\windows\basic_object_handle.hpp	/^  typedef typename ObjectHandleService::native_handle_type native_handle_type;$/;"	t	class:asio::windows::basic_object_handle
native_handle_type	.\include\asio\windows\basic_random_access_handle.hpp	/^    native_handle_type;$/;"	t	class:asio::windows::basic_random_access_handle
native_handle_type	.\include\asio\windows\basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_handle_type native_handle_type;$/;"	t	class:asio::windows::basic_stream_handle
native_handle_type	.\include\asio\windows\object_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::windows::object_handle_service
native_handle_type	.\include\asio\windows\object_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::windows::object_handle_service
native_handle_type	.\include\asio\windows\overlapped_handle.hpp	/^  typedef ASIO_SVC_T::native_handle_type native_handle_type;$/;"	t	class:asio::windows::overlapped_handle
native_handle_type	.\include\asio\windows\overlapped_handle.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::windows::overlapped_handle
native_handle_type	.\include\asio\windows\random_access_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::windows::random_access_handle_service
native_handle_type	.\include\asio\windows\random_access_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::windows::random_access_handle_service
native_handle_type	.\include\asio\windows\stream_handle_service.hpp	/^  typedef implementation_defined native_handle_type;$/;"	t	class:asio::windows::stream_handle_service
native_handle_type	.\include\asio\windows\stream_handle_service.hpp	/^  typedef service_impl_type::native_handle_type native_handle_type;$/;"	t	class:asio::windows::stream_handle_service
native_non_blocking	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking($/;"	f	class:asio::basic_socket
native_non_blocking	.\include\asio\basic_socket.hpp	/^  bool native_non_blocking() const$/;"	f	class:asio::basic_socket
native_non_blocking	.\include\asio\basic_socket.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:asio::basic_socket
native_non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking($/;"	f	class:asio::basic_socket_acceptor
native_non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:asio::basic_socket_acceptor
native_non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:asio::basic_socket_acceptor
native_non_blocking	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
native_non_blocking	.\include\asio\datagram_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::datagram_socket_service
native_non_blocking	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code native_non_blocking(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
native_non_blocking	.\include\asio\detail\null_socket_service.hpp	/^  bool native_non_blocking(const implementation_type&) const$/;"	f	class:asio::detail::null_socket_service
native_non_blocking	.\include\asio\detail\reactive_descriptor_service.hpp	/^  asio::error_code native_non_blocking(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
native_non_blocking	.\include\asio\detail\reactive_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::detail::reactive_descriptor_service
native_non_blocking	.\include\asio\detail\reactive_socket_service_base.hpp	/^  asio::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
native_non_blocking	.\include\asio\detail\reactive_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:asio::detail::reactive_socket_service_base
native_non_blocking	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::error_code native_non_blocking(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
native_non_blocking	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_socket_service_base
native_non_blocking	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::error_code native_non_blocking(base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
native_non_blocking	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  bool native_non_blocking(const base_implementation_type&) const$/;"	f	class:asio::detail::winrt_ssocket_service_base
native_non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking($/;"	f	class:asio::posix::basic_descriptor
native_non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:asio::posix::basic_descriptor
native_non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:asio::posix::basic_descriptor
native_non_blocking	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking($/;"	f	class:asio::posix::descriptor
native_non_blocking	.\include\asio\posix\descriptor.hpp	/^  bool native_non_blocking() const$/;"	f	class:asio::posix::descriptor
native_non_blocking	.\include\asio\posix\descriptor.hpp	/^  void native_non_blocking(bool mode)$/;"	f	class:asio::posix::descriptor
native_non_blocking	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
native_non_blocking	.\include\asio\posix\stream_descriptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::posix::stream_descriptor_service
native_non_blocking	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
native_non_blocking	.\include\asio\raw_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::raw_socket_service
native_non_blocking	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
native_non_blocking	.\include\asio\seq_packet_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::seq_packet_socket_service
native_non_blocking	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
native_non_blocking	.\include\asio\socket_acceptor_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::socket_acceptor_service
native_non_blocking	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID native_non_blocking(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
native_non_blocking	.\include\asio\stream_socket_service.hpp	/^  bool native_non_blocking(const implementation_type& impl) const$/;"	f	class:asio::stream_socket_service
neg_infin	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::deadline_timer::time_type neg_infin()$/;"	f	struct:asio::ssl::detail::stream_core
neg_infin	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::steady_timer::time_point neg_infin()$/;"	f	struct:asio::ssl::detail::stream_core
netdb_errors	.\include\asio\error.hpp	/^enum netdb_errors$/;"	g	namespace:asio::error
network_down	.\include\asio\error.hpp	/^  network_down = ASIO_SOCKET_ERROR(ENETDOWN),$/;"	e	enum:asio::error::basic_errors
network_interface	.\include\asio\ip\detail\socket_option.hpp	/^  explicit network_interface(const address_v4& ipv4_interface)$/;"	f	class:asio::ip::detail::socket_option::network_interface
network_interface	.\include\asio\ip\detail\socket_option.hpp	/^  explicit network_interface(unsigned int ipv6_interface)$/;"	f	class:asio::ip::detail::socket_option::network_interface
network_interface	.\include\asio\ip\detail\socket_option.hpp	/^  network_interface()$/;"	f	class:asio::ip::detail::socket_option::network_interface
network_interface	.\include\asio\ip\detail\socket_option.hpp	/^class network_interface$/;"	c	namespace:asio::ip::detail::socket_option
network_reset	.\include\asio\error.hpp	/^  network_reset = ASIO_SOCKET_ERROR(ENETRESET),$/;"	e	enum:asio::error::basic_errors
network_unreachable	.\include\asio\error.hpp	/^  network_unreachable = ASIO_SOCKET_ERROR(ENETUNREACH),$/;"	e	enum:asio::error::basic_errors
network_v4	.\include\asio\ip\network_v4.hpp	/^class network_v4$/;"	c	namespace:asio::ip
network_v6	.\include\asio\ip\network_v6.hpp	/^class network_v6$/;"	c	namespace:asio::ip
new_socket	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_holder& new_socket()$/;"	f	class:asio::detail::win_iocp_socket_accept_op
new_socket	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_holder& new_socket()$/;"	f	class:asio::detail::win_iocp_socket_move_accept_op
new_socket_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  socket_holder new_socket_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
new_socket_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_holder new_socket_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
new_socket_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_holder new_socket_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
next	.\include\asio\detail\object_pool.hpp	/^  static Object*& next(Object* o)$/;"	f	class:asio::detail::object_pool_access
next	.\include\asio\detail\op_queue.hpp	/^  static Operation* next(Operation* o)$/;"	f	class:asio::detail::op_queue_access
next	.\include\asio\detail\op_queue.hpp	/^  static void next(Operation1*& o1, Operation2* o2)$/;"	f	class:asio::detail::op_queue_access
next	.\include\global_types.hpp	/^	board_command_t* next;$/;"	m	struct:board_command_list_t
next	.\include\global_types.hpp	/^	board_command_t* next;$/;"	m	struct:board_command_t
next_	.\include\asio\detail\call_stack.hpp	/^    context* next_;$/;"	m	class:asio::detail::call_stack::context
next_	.\include\asio\detail\epoll_reactor.hpp	/^    descriptor_state* next_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
next_	.\include\asio\detail\kqueue_reactor.hpp	/^    descriptor_state* next_;$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
next_	.\include\asio\detail\scheduler_operation.hpp	/^  scheduler_operation* next_;$/;"	m	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
next_	.\include\asio\detail\signal_set_service.hpp	/^  signal_set_service* next_;$/;"	m	class:asio::detail::signal_set_service
next_	.\include\asio\detail\strand_executor_service.hpp	/^    strand_impl* next_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
next_	.\include\asio\detail\thread_group.hpp	/^    item* next_;$/;"	m	struct:asio::detail::thread_group::item
next_	.\include\asio\detail\timer_queue.hpp	/^    per_timer_data* next_;$/;"	m	class:asio::detail::timer_queue::per_timer_data
next_	.\include\asio\detail\timer_queue_base.hpp	/^  timer_queue_base* next_;$/;"	m	class:asio::detail::timer_queue_base
next_	.\include\asio\detail\win_iocp_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:asio::detail::win_iocp_handle_service::implementation_type
next_	.\include\asio\detail\win_iocp_operation.hpp	/^  win_iocp_operation* next_;$/;"	m	class:asio::detail::win_iocp_operation
next_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    base_implementation_type* next_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
next_	.\include\asio\detail\win_object_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
next_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^    base_implementation_type* next_;$/;"	m	struct:asio::detail::winrt_ssocket_service_base::base_implementation_type
next_	.\include\asio\execution_context.hpp	/^  service* next_;$/;"	m	class:asio::execution_context::service
next_by_key	.\include\asio\detail\call_stack.hpp	/^    Value* next_by_key() const$/;"	f	class:asio::detail::call_stack::context
next_elem_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t next_elem_;$/;"	m	struct:asio::detail::prepared_buffers
next_elem_offset_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t next_elem_offset_;$/;"	m	struct:asio::detail::prepared_buffers
next_in_set_	.\include\asio\detail\signal_set_service.hpp	/^    registration* next_in_set_;$/;"	m	class:asio::detail::signal_set_service::registration
next_in_table_	.\include\asio\detail\signal_set_service.hpp	/^    registration* next_in_table_;$/;"	m	class:asio::detail::signal_set_service::registration
next_layer	.\include\asio\buffered_read_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:asio::buffered_read_stream
next_layer	.\include\asio\buffered_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:asio::buffered_stream
next_layer	.\include\asio\buffered_write_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:asio::buffered_write_stream
next_layer	.\include\asio\ssl\stream.hpp	/^  const next_layer_type& next_layer() const$/;"	f	class:asio::ssl::stream
next_layer	.\include\asio\ssl\stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:asio::ssl::stream
next_layer_	.\include\asio\buffered_read_stream.hpp	/^  Stream next_layer_;$/;"	m	class:asio::buffered_read_stream
next_layer_	.\include\asio\buffered_write_stream.hpp	/^  Stream next_layer_;$/;"	m	class:asio::buffered_write_stream
next_layer_	.\include\asio\ssl\detail\io.hpp	/^  Stream& next_layer_;$/;"	m	class:asio::ssl::detail::io_op
next_layer_	.\include\asio\ssl\stream.hpp	/^  Stream next_layer_;$/;"	m	class:asio::ssl::stream
next_layer_type	.\include\asio\buffered_read_stream.hpp	/^  typedef typename remove_reference<Stream>::type next_layer_type;$/;"	t	class:asio::buffered_read_stream
next_layer_type	.\include\asio\buffered_stream.hpp	/^  typedef typename remove_reference<Stream>::type next_layer_type;$/;"	t	class:asio::buffered_stream
next_layer_type	.\include\asio\buffered_write_stream.hpp	/^  typedef typename remove_reference<Stream>::type next_layer_type;$/;"	t	class:asio::buffered_write_stream
next_layer_type	.\include\asio\ssl\stream.hpp	/^  typedef typename remove_reference<Stream>::type next_layer_type;$/;"	t	class:asio::ssl::stream
no_buffer_space	.\include\asio\error.hpp	/^  no_buffer_space = ASIO_SOCKET_ERROR(ENOBUFS),$/;"	e	enum:asio::error::basic_errors
no_compression	.\include\asio\ssl\context_base.hpp	/^  static const long no_compression = implementation_defined;$/;"	m	class:asio::ssl::context_base
no_data	.\include\asio\error.hpp	/^  no_data = ASIO_NETDB_ERROR(NO_DATA),$/;"	e	enum:asio::error::netdb_errors
no_delay	.\include\asio\ip\tcp.hpp	/^    ASIO_OS_DEF(IPPROTO_TCP), ASIO_OS_DEF(TCP_NODELAY)> no_delay;$/;"	t	class:asio::ip::tcp
no_delay	.\include\asio\ip\tcp.hpp	/^  typedef implementation_defined no_delay;$/;"	t	class:asio::ip::tcp
no_descriptors	.\include\asio\error.hpp	/^  no_descriptors = ASIO_SOCKET_ERROR(EMFILE),$/;"	e	enum:asio::error::basic_errors
no_memory	.\include\asio\error.hpp	/^  no_memory = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
no_permission	.\include\asio\error.hpp	/^  no_permission = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
no_protocol_option	.\include\asio\error.hpp	/^  no_protocol_option = ASIO_SOCKET_ERROR(ENOPROTOOPT),$/;"	e	enum:asio::error::basic_errors
no_recovery	.\include\asio\error.hpp	/^  no_recovery = ASIO_NETDB_ERROR(NO_RECOVERY)$/;"	e	enum:asio::error::netdb_errors
no_sslv2	.\include\asio\ssl\context_base.hpp	/^  static const long no_sslv2 = implementation_defined;$/;"	m	class:asio::ssl::context_base
no_sslv3	.\include\asio\ssl\context_base.hpp	/^  static const long no_sslv3 = implementation_defined;$/;"	m	class:asio::ssl::context_base
no_such_device	.\include\asio\error.hpp	/^  no_such_device = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
no_tlsv1	.\include\asio\ssl\context_base.hpp	/^  static const long no_tlsv1 = implementation_defined;$/;"	m	class:asio::ssl::context_base
no_tlsv1_1	.\include\asio\ssl\context_base.hpp	/^  static const long no_tlsv1_1 = implementation_defined;$/;"	m	class:asio::ssl::context_base
no_tlsv1_2	.\include\asio\ssl\context_base.hpp	/^  static const long no_tlsv1_2 = implementation_defined;$/;"	m	class:asio::ssl::context_base
nomotion_sel	.\include\bmi08x_defs.h	/^uint16_t nomotion_sel;$/;"	m	struct:bmi08x_anymotion_cfg
non_blocking	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID non_blocking($/;"	f	class:asio::basic_socket
non_blocking	.\include\asio\basic_socket.hpp	/^  bool non_blocking() const$/;"	f	class:asio::basic_socket
non_blocking	.\include\asio\basic_socket.hpp	/^  void non_blocking(bool mode)$/;"	f	class:asio::basic_socket
non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID non_blocking($/;"	f	class:asio::basic_socket_acceptor
non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  bool non_blocking() const$/;"	f	class:asio::basic_socket_acceptor
non_blocking	.\include\asio\basic_socket_acceptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:asio::basic_socket_acceptor
non_blocking	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
non_blocking	.\include\asio\datagram_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::datagram_socket_service
non_blocking	.\include\asio\detail\descriptor_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:asio::detail::descriptor_ops::__anon13
non_blocking	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code non_blocking(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
non_blocking	.\include\asio\detail\null_socket_service.hpp	/^  bool non_blocking(const implementation_type&) const$/;"	f	class:asio::detail::null_socket_service
non_blocking	.\include\asio\detail\reactive_descriptor_service.hpp	/^  asio::error_code non_blocking(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
non_blocking	.\include\asio\detail\reactive_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::detail::reactive_descriptor_service
non_blocking	.\include\asio\detail\reactive_socket_service_base.hpp	/^  asio::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
non_blocking	.\include\asio\detail\reactive_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:asio::detail::reactive_socket_service_base
non_blocking	.\include\asio\detail\socket_ops.hpp	/^  non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:asio::detail::socket_ops::__anon18
non_blocking	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::error_code non_blocking(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
non_blocking	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  bool non_blocking(const base_implementation_type& impl) const$/;"	f	class:asio::detail::win_iocp_socket_service_base
non_blocking	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::error_code non_blocking(base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
non_blocking	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  bool non_blocking(const base_implementation_type&) const$/;"	f	class:asio::detail::winrt_ssocket_service_base
non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID non_blocking($/;"	f	class:asio::posix::basic_descriptor
non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  bool non_blocking() const$/;"	f	class:asio::posix::basic_descriptor
non_blocking	.\include\asio\posix\basic_descriptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:asio::posix::basic_descriptor
non_blocking	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID non_blocking($/;"	f	class:asio::posix::descriptor
non_blocking	.\include\asio\posix\descriptor.hpp	/^  bool non_blocking() const$/;"	f	class:asio::posix::descriptor
non_blocking	.\include\asio\posix\descriptor.hpp	/^  void non_blocking(bool mode)$/;"	f	class:asio::posix::descriptor
non_blocking	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
non_blocking	.\include\asio\posix\stream_descriptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::posix::stream_descriptor_service
non_blocking	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
non_blocking	.\include\asio\raw_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::raw_socket_service
non_blocking	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
non_blocking	.\include\asio\seq_packet_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::seq_packet_socket_service
non_blocking	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
non_blocking	.\include\asio\socket_acceptor_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::socket_acceptor_service
non_blocking	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID non_blocking(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
non_blocking	.\include\asio\stream_socket_service.hpp	/^  bool non_blocking(const implementation_type& impl) const$/;"	f	class:asio::stream_socket_service
noncopyable	.\include\asio\detail\noncopyable.hpp	/^  noncopyable() {}$/;"	f	class:asio::detail::noncopyable
noncopyable	.\include\asio\detail\noncopyable.hpp	/^class noncopyable$/;"	c	namespace:asio::detail
none	.\include\asio\serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:asio::serial_port_base::parity::type
none	.\include\asio\serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:asio::serial_port_base::flow_control::type
noop_deleter	.\include\asio\detail\socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	s	namespace:asio::detail::socket_ops
not_connected	.\include\asio\error.hpp	/^  not_connected = ASIO_SOCKET_ERROR(ENOTCONN),$/;"	e	enum:asio::error::basic_errors
not_done	.\include\asio\detail\reactor_op.hpp	/^  enum status { not_done, done, done_and_exhausted };$/;"	e	enum:asio::detail::reactor_op::status
not_found	.\include\asio\error.hpp	/^  not_found,$/;"	e	enum:asio::error::misc_errors
not_socket	.\include\asio\error.hpp	/^  not_socket = ASIO_SOCKET_ERROR(ENOTSOCK),$/;"	e	enum:asio::error::basic_errors
notify	.\source\strm_queue.cpp	/^void strm_queue::notify()$/;"	f	class:strm_queue
notify_fork	.\include\asio\detail\resolver_service.hpp	/^  void notify_fork(asio::io_context::fork_event fork_ev)$/;"	f	class:asio::detail::resolver_service
notify_fork	.\include\asio\detail\winrt_resolver_service.hpp	/^  void notify_fork(asio::io_context::fork_event)$/;"	f	class:asio::detail::winrt_resolver_service
notify_fork	.\include\asio\ip\resolver_service.hpp	/^  void notify_fork(asio::io_context::fork_event event)$/;"	f	class:asio::ip::resolver_service
notify_fork	.\include\asio\signal_set_service.hpp	/^  void notify_fork(asio::io_context::fork_event event)$/;"	f	class:asio::signal_set_service
now	.\include\asio\detail\chrono_time_traits.hpp	/^  static time_type now()$/;"	f	struct:asio::detail::chrono_time_traits
now	.\include\asio\time_traits.hpp	/^  static time_type now()$/;"	f	struct:asio::time_traits
nt_set_info_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  void* nt_set_info_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
nt_set_info_fn	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  typedef LONG (NTAPI *nt_set_info_fn)(HANDLE, ULONG_PTR*, void*, ULONG, ULONG);$/;"	t	class:asio::detail::win_iocp_socket_service_base
null_buffers	.\include\asio\buffer.hpp	/^class null_buffers$/;"	c	namespace:asio
null_event	.\include\asio\detail\null_event.hpp	/^  null_event()$/;"	f	class:asio::detail::null_event
null_event	.\include\asio\detail\null_event.hpp	/^class null_event$/;"	c	namespace:asio::detail
null_fenced_block	.\include\asio\detail\null_fenced_block.hpp	/^  explicit null_fenced_block(half_or_full_t)$/;"	f	class:asio::detail::null_fenced_block
null_fenced_block	.\include\asio\detail\null_fenced_block.hpp	/^class null_fenced_block$/;"	c	namespace:asio::detail
null_global	.\include\asio\detail\null_global.hpp	/^T& null_global()$/;"	f	namespace:asio::detail
null_global_impl	.\include\asio\detail\null_global.hpp	/^  null_global_impl()$/;"	f	struct:asio::detail::null_global_impl
null_global_impl	.\include\asio\detail\null_global.hpp	/^struct null_global_impl$/;"	s	namespace:asio::detail
null_mutex	.\include\asio\detail\null_mutex.hpp	/^  null_mutex()$/;"	f	class:asio::detail::null_mutex
null_mutex	.\include\asio\detail\null_mutex.hpp	/^class null_mutex$/;"	c	namespace:asio::detail
null_reactor	.\include\asio\detail\null_reactor.hpp	/^  null_reactor(asio::execution_context& ctx)$/;"	f	class:asio::detail::null_reactor
null_reactor	.\include\asio\detail\null_reactor.hpp	/^class null_reactor$/;"	c	namespace:asio::detail
null_signal_blocker	.\include\asio\detail\null_signal_blocker.hpp	/^  null_signal_blocker()$/;"	f	class:asio::detail::null_signal_blocker
null_signal_blocker	.\include\asio\detail\null_signal_blocker.hpp	/^class null_signal_blocker$/;"	c	namespace:asio::detail
null_socket_service	.\include\asio\detail\null_socket_service.hpp	/^  null_socket_service(asio::io_context& io_context)$/;"	f	class:asio::detail::null_socket_service
null_socket_service	.\include\asio\detail\null_socket_service.hpp	/^class null_socket_service :$/;"	c	namespace:asio::detail
null_static_mutex	.\include\asio\detail\null_static_mutex.hpp	/^struct null_static_mutex$/;"	s	namespace:asio::detail
null_thread	.\include\asio\detail\null_thread.hpp	/^  null_thread(Function, unsigned int = 0)$/;"	f	class:asio::detail::null_thread
null_thread	.\include\asio\detail\null_thread.hpp	/^class null_thread$/;"	c	namespace:asio::detail
null_tss_ptr	.\include\asio\detail\null_tss_ptr.hpp	/^  null_tss_ptr()$/;"	f	class:asio::detail::null_tss_ptr
null_tss_ptr	.\include\asio\detail\null_tss_ptr.hpp	/^class null_tss_ptr$/;"	c	namespace:asio::detail
num_buckets_	.\include\asio\detail\hash_map.hpp	/^  std::size_t num_buckets_;$/;"	m	class:asio::detail::hash_map
num_implementations	.\include\asio\detail\strand_service.hpp	/^  enum { num_implementations = 193 };$/;"	e	enum:asio::detail::strand_service::__anon21
num_implementations	.\include\asio\detail\strand_service.hpp	/^  enum { num_implementations = ASIO_STRAND_IMPLEMENTATIONS };$/;"	e	enum:asio::detail::strand_service::__anon20
num_kevents_	.\include\asio\detail\kqueue_reactor.hpp	/^    int num_kevents_; \/\/ 1 == read only, 2 == read and write$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
num_mutexes	.\include\asio\detail\strand_executor_service.hpp	/^  enum { num_mutexes = 193 };$/;"	e	enum:asio::detail::strand_executor_service::__anon19
numeric_host	.\include\asio\ip\resolver_base.hpp	/^  static const flags numeric_host = implementation_defined;$/;"	m	class:asio::ip::resolver_base
numeric_service	.\include\asio\ip\resolver_base.hpp	/^  static const flags numeric_service = implementation_defined;$/;"	m	class:asio::ip::resolver_base
object_handle	.\include\asio\windows\object_handle.hpp	/^typedef basic_object_handle<> object_handle;$/;"	t	namespace:asio::windows
object_handle_service	.\include\asio\windows\object_handle_service.hpp	/^  explicit object_handle_service(asio::io_context& io_context)$/;"	f	class:asio::windows::object_handle_service
object_handle_service	.\include\asio\windows\object_handle_service.hpp	/^class object_handle_service$/;"	c	namespace:asio::windows
object_pool	.\include\asio\detail\object_pool.hpp	/^  object_pool()$/;"	f	class:asio::detail::object_pool
object_pool	.\include\asio\detail\object_pool.hpp	/^class object_pool$/;"	c	namespace:asio::detail
object_pool_access	.\include\asio\detail\object_pool.hpp	/^class object_pool_access$/;"	c	namespace:asio::detail
odd	.\include\asio\serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:asio::serial_port_base::parity::type
odr	.\include\bmi08x_defs.h	/^uint8_t odr;$/;"	m	struct:bmi08x_cfg
offset_	.\include\asio\impl\read_at.hpp	/^    uint64_t offset_;$/;"	m	class:asio::detail::read_at_op
offset_	.\include\asio\impl\read_at.hpp	/^    uint64_t offset_;$/;"	m	class:asio::detail::read_at_streambuf_op
offset_	.\include\asio\impl\write_at.hpp	/^    uint64_t offset_;$/;"	m	class:asio::detail::write_at_op
old_mask_	.\include\asio\detail\posix_signal_blocker.hpp	/^  sigset_t old_mask_;$/;"	m	class:asio::detail::posix_signal_blocker
old_size_	.\include\asio\detail\buffer_resize_guard.hpp	/^  size_t old_size_;$/;"	m	class:asio::detail::buffer_resize_guard
on_dispatch_exit	.\include\asio\detail\impl\strand_service.hpp	/^struct strand_service::on_dispatch_exit$/;"	s	class:asio::detail::strand_service
on_invoker_exit	.\include\asio\detail\impl\strand_executor_service.hpp	/^  struct on_invoker_exit$/;"	s	class:asio::detail::strand_executor_service::invoker
one	.\include\asio\serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:asio::serial_port_base::stop_bits::type
one_buffer	.\include\asio\buffer.hpp	/^struct one_buffer {};$/;"	s	namespace:asio::detail
one_thread_	.\include\asio\detail\scheduler.hpp	/^  const bool one_thread_;$/;"	m	class:asio::detail::scheduler
onepointfive	.\include\asio\serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:asio::serial_port_base::stop_bits::type
op_	.\include\asio\impl\executor.hpp	/^  detail::scheduler_operation* op_;$/;"	m	class:asio::executor::function
op_	.\include\asio\ssl\detail\io.hpp	/^  Operation op_;$/;"	m	class:asio::ssl::detail::io_op
op_queue	.\include\asio\detail\op_queue.hpp	/^  op_queue()$/;"	f	class:asio::detail::op_queue
op_queue	.\include\asio\detail\op_queue.hpp	/^class op_queue$/;"	c	namespace:asio::detail
op_queue_	.\include\asio\detail\dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:asio::detail::dev_poll_reactor
op_queue_	.\include\asio\detail\epoll_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
op_queue_	.\include\asio\detail\kqueue_reactor.hpp	/^    op_queue<reactor_op> op_queue_[max_ops];$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
op_queue_	.\include\asio\detail\scheduler.hpp	/^  op_queue<operation> op_queue_;$/;"	m	class:asio::detail::scheduler
op_queue_	.\include\asio\detail\select_reactor.hpp	/^  reactor_op_queue<socket_type> op_queue_[max_ops];$/;"	m	class:asio::detail::select_reactor
op_queue_	.\include\asio\detail\timer_queue.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:asio::detail::timer_queue::per_timer_data
op_queue_	.\include\asio\detail\win_object_handle_service.hpp	/^    op_queue<wait_op> op_queue_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
op_queue_access	.\include\asio\detail\op_queue.hpp	/^class op_queue_access$/;"	c	namespace:asio::detail
op_types	.\include\asio\detail\dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:asio::detail::dev_poll_reactor
op_types	.\include\asio\detail\epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:asio::detail::epoll_reactor
op_types	.\include\asio\detail\kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	g	class:asio::detail::kqueue_reactor
op_types	.\include\asio\detail\select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	g	class:asio::detail::select_reactor
open	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID open(const std::string& device,$/;"	f	class:asio::basic_serial_port
open	.\include\asio\basic_serial_port.hpp	/^  void open(const std::string& device)$/;"	f	class:asio::basic_serial_port
open	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID open(const protocol_type& protocol,$/;"	f	class:asio::basic_socket
open	.\include\asio\basic_socket.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:asio::basic_socket
open	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID open(const protocol_type& protocol,$/;"	f	class:asio::basic_socket_acceptor
open	.\include\asio\basic_socket_acceptor.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:asio::basic_socket_acceptor
open	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
open	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code open(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
open	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code open(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
open	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code open(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
open	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code open(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
open	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
open	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
open	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::serial_port_service
open	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
open	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID open(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
openssl_init	.\include\asio\ssl\detail\openssl_init.hpp	/^  openssl_init()$/;"	f	class:asio::ssl::detail::openssl_init
openssl_init	.\include\asio\ssl\detail\openssl_init.hpp	/^class openssl_init : private openssl_init_base$/;"	c	namespace:asio::ssl::detail
openssl_init_base	.\include\asio\ssl\detail\openssl_init.hpp	/^class openssl_init_base$/;"	c	namespace:asio::ssl::detail
operation	.\include\asio\detail\operation.hpp	/^typedef win_iocp_operation operation;$/;"	t	namespace:asio::detail
operation	.\include\asio\detail\scheduler.hpp	/^  typedef scheduler_operation operation;$/;"	t	class:asio::detail::scheduler
operation_aborted	.\include\asio\error.hpp	/^  operation_aborted = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
operation_not_supported	.\include\asio\error.hpp	/^  operation_not_supported = ASIO_SOCKET_ERROR(EOPNOTSUPP),$/;"	e	enum:asio::error::basic_errors
operation_type	.\include\asio\detail\scheduler_operation.hpp	/^  typedef scheduler_operation operation_type;$/;"	t	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
operation_type	.\include\asio\detail\win_iocp_operation.hpp	/^  typedef win_iocp_operation operation_type;$/;"	t	class:asio::detail::win_iocp_operation
operations_	.\include\asio\detail\reactor_op_queue.hpp	/^  hash_map<key_type, mapped_type> operations_;$/;"	m	class:asio::detail::reactor_op_queue
operator !	.\include\asio\detail\socket_option.hpp	/^  bool operator!() const$/;"	f	class:asio::detail::socket_option::boolean
operator !	.\include\asio\error_code.hpp	/^  bool operator!() const$/;"	f	class:asio::error_code
operator !	.\include\asio\ip\detail\socket_option.hpp	/^  bool operator!() const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
operator !=	.\include\asio\buffers_iterator.hpp	/^  friend bool operator!=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator !=	.\include\asio\error_code.hpp	/^  friend bool operator!=(const error_code& e1, const error_code& e2)$/;"	f	class:asio::error_code
operator !=	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator !=	.\include\asio\generic\datagram_protocol.hpp	/^  friend bool operator!=(const datagram_protocol& p1,$/;"	f	class:asio::generic::datagram_protocol
operator !=	.\include\asio\generic\raw_protocol.hpp	/^  friend bool operator!=(const raw_protocol& p1, const raw_protocol& p2)$/;"	f	class:asio::generic::raw_protocol
operator !=	.\include\asio\generic\seq_packet_protocol.hpp	/^  friend bool operator!=(const seq_packet_protocol& p1,$/;"	f	class:asio::generic::seq_packet_protocol
operator !=	.\include\asio\generic\stream_protocol.hpp	/^  friend bool operator!=(const stream_protocol& p1, const stream_protocol& p2)$/;"	f	class:asio::generic::stream_protocol
operator !=	.\include\asio\ip\address.hpp	/^  friend bool operator!=(const address& a1, const address& a2)$/;"	f	class:asio::ip::address
operator !=	.\include\asio\ip\address_v4.hpp	/^  friend bool operator!=(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator !=	.\include\asio\ip\address_v4_iterator.hpp	/^  friend bool operator!=(const basic_address_iterator& a,$/;"	f	class:asio::ip::basic_address_iterator
operator !=	.\include\asio\ip\address_v6.hpp	/^  friend bool operator!=(const address_v6& a1, const address_v6& a2)$/;"	f	class:asio::ip::address_v6
operator !=	.\include\asio\ip\address_v6_iterator.hpp	/^  friend bool operator!=(const basic_address_iterator& a,$/;"	f	class:asio::ip::basic_address_iterator
operator !=	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator !=	.\include\asio\ip\basic_resolver_iterator.hpp	/^  friend bool operator!=(const basic_resolver_iterator& a,$/;"	f	class:asio::ip::basic_resolver_iterator
operator !=	.\include\asio\ip\basic_resolver_results.hpp	/^  friend bool operator!=(const basic_resolver_results& a,$/;"	f	class:asio::ip::basic_resolver_results
operator !=	.\include\asio\ip\icmp.hpp	/^  friend bool operator!=(const icmp& p1, const icmp& p2)$/;"	f	class:asio::ip::icmp
operator !=	.\include\asio\ip\network_v4.hpp	/^  friend bool operator!=(const network_v4& a, const network_v4& b)$/;"	f	class:asio::ip::network_v4
operator !=	.\include\asio\ip\network_v6.hpp	/^  friend bool operator!=(const network_v6& a, const network_v6& b)$/;"	f	class:asio::ip::network_v6
operator !=	.\include\asio\ip\tcp.hpp	/^  friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:asio::ip::tcp
operator !=	.\include\asio\ip\udp.hpp	/^  friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:asio::ip::udp
operator !=	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator ()	.\include\asio\bind_executor.hpp	/^  typename detail::executor_binder_result_of0<T>::type operator()() const$/;"	f	class:asio::executor_binder
operator ()	.\include\asio\bind_executor.hpp	/^  typename detail::executor_binder_result_of0<T>::type operator()()$/;"	f	class:asio::executor_binder
operator ()	.\include\asio\buffer.hpp	/^  void operator()()$/;"	f	class:asio::detail::buffer_debug_check
operator ()	.\include\asio\completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:asio::detail::transfer_at_least_t
operator ()	.\include\asio\completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:asio::detail::transfer_exactly_t
operator ()	.\include\asio\completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t)$/;"	f	class:asio::detail::transfer_all_t
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::binder1
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::binder2
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::binder3
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::binder4
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::binder5
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::binder1
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::binder2
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::binder3
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::binder4
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::binder5
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::move_binder1
operator ()	.\include\asio\detail\bind_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::move_binder2
operator ()	.\include\asio\detail\impl\strand_executor_service.hpp	/^  void operator()()$/;"	f	class:asio::detail::strand_executor_service::invoker
operator ()	.\include\asio\detail\socket_ops.hpp	/^struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:asio::detail::socket_ops::noop_deleter
operator ()	.\include\asio\detail\work_dispatcher.hpp	/^  void operator()()$/;"	f	class:asio::detail::work_dispatcher
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  bool operator()(Dispatcher& dispatcher, Handler&) const$/;"	f	struct:asio::detail::is_continuation_if_running
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  bool operator()(Dispatcher&, Handler& handler) const$/;"	f	struct:asio::detail::is_continuation_delegated
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::rewrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::rewrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()()$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1) const$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1)$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2) const$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2)$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\detail\wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:asio::detail::wrapped_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^    void operator()(awaiter* a)$/;"	f	struct:asio::experimental::detail::awaiter::deleter
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()()$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()()$/;"	f	class:asio::experimental::detail::co_spawn_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(Arg&& arg)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(Args&&... args)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(const asio::error_code& ec)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(const asio::error_code& ec, Arg&& arg)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(const asio::error_code& ec, Args&&... args)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(std::exception_ptr ex)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(std::exception_ptr ex, Arg&& arg)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator()(std::exception_ptr ex, Args&&... args)$/;"	f	class:asio::experimental::detail::await_handler
operator ()	.\include\asio\experimental\impl\detached.hpp	/^    void operator()()$/;"	f	class:asio::experimental::detail::detached_handler
operator ()	.\include\asio\experimental\impl\detached.hpp	/^    void operator()(Args...)$/;"	f	class:asio::experimental::detail::detached_handler
operator ()	.\include\asio\experimental\impl\redirect_error.hpp	/^  void operator()()$/;"	f	class:asio::experimental::detail::redirect_error_handler
operator ()	.\include\asio\experimental\impl\redirect_error.hpp	/^  void operator()(const asio::error_code& ec)$/;"	f	class:asio::experimental::detail::redirect_error_handler
operator ()	.\include\asio\experimental\impl\redirect_error.hpp	/^  void operator()(const asio::error_code& ec,$/;"	f	class:asio::experimental::detail::redirect_error_handler
operator ()	.\include\asio\impl\buffered_read_stream.hpp	/^    void operator()(const asio::error_code& ec, std::size_t)$/;"	f	class:asio::detail::buffered_read_some_handler
operator ()	.\include\asio\impl\buffered_read_stream.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::buffered_fill_handler
operator ()	.\include\asio\impl\buffered_write_stream.hpp	/^    void operator()(const asio::error_code& ec, std::size_t)$/;"	f	class:asio::detail::buffered_write_some_handler
operator ()	.\include\asio\impl\buffered_write_stream.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::buffered_flush_handler
operator ()	.\include\asio\impl\connect.hpp	/^    bool operator()(const asio::error_code&, const Endpoint&)$/;"	f	struct:asio::detail::default_connect_condition
operator ()	.\include\asio\impl\connect.hpp	/^    void operator()(asio::error_code ec, int start = 0)$/;"	f	class:asio::detail::iterator_connect_op
operator ()	.\include\asio\impl\connect.hpp	/^    void operator()(asio::error_code ec, int start = 0)$/;"	f	class:asio::detail::range_connect_op
operator ()	.\include\asio\impl\executor.hpp	/^  void operator()()$/;"	f	class:asio::executor::function
operator ()	.\include\asio\impl\read.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_dynbuf_op
operator ()	.\include\asio\impl\read.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_op
operator ()	.\include\asio\impl\read_at.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_at_op
operator ()	.\include\asio\impl\read_at.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_at_streambuf_op
operator ()	.\include\asio\impl\read_until.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_until_delim_op
operator ()	.\include\asio\impl\read_until.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_until_delim_string_op
operator ()	.\include\asio\impl\read_until.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_until_expr_op
operator ()	.\include\asio\impl\read_until.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::read_until_match_op
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()()$/;"	f	class:asio::detail::coro_handler
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()()$/;"	f	struct:asio::detail::spawn_helper
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()(T value)$/;"	f	class:asio::detail::coro_handler
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()(asio::error_code ec)$/;"	f	class:asio::detail::coro_handler
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()(asio::error_code ec, T value)$/;"	f	class:asio::detail::coro_handler
operator ()	.\include\asio\impl\spawn.hpp	/^    void operator()(typename basic_yield_context<Handler>::caller_type& ca)$/;"	f	struct:asio::detail::coro_entry_point
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()()$/;"	f	class:asio::detail::packaged_handler
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()()$/;"	f	class:asio::detail::promise_handler_0
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()()$/;"	f	class:asio::detail::promise_invoker
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const asio::error_code& ec)$/;"	f	class:asio::detail::promise_handler_ec_0
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::promise_handler_ec_1
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::promise_handler_ec_n
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const std::exception_ptr& ex)$/;"	f	class:asio::detail::promise_handler_ex_0
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const std::exception_ptr& ex,$/;"	f	class:asio::detail::promise_handler_ex_1
operator ()	.\include\asio\impl\use_future.hpp	/^  void operator()(const std::exception_ptr& ex,$/;"	f	class:asio::detail::promise_handler_ex_n
operator ()	.\include\asio\impl\write.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::write_dynbuf_op
operator ()	.\include\asio\impl\write.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::write_op
operator ()	.\include\asio\impl\write_at.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::write_at_op
operator ()	.\include\asio\impl\write_at.hpp	/^    void operator()(const asio::error_code& ec,$/;"	f	class:asio::detail::write_at_streambuf_op
operator ()	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:asio::ssl::detail::buffered_handshake_op
operator ()	.\include\asio\ssl\detail\handshake_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:asio::ssl::detail::handshake_op
operator ()	.\include\asio\ssl\detail\io.hpp	/^  void operator()(asio::error_code ec,$/;"	f	class:asio::ssl::detail::io_op
operator ()	.\include\asio\ssl\detail\read_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:asio::ssl::detail::read_op
operator ()	.\include\asio\ssl\detail\shutdown_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:asio::ssl::detail::shutdown_op
operator ()	.\include\asio\ssl\detail\write_op.hpp	/^  engine::want operator()(engine& eng,$/;"	f	class:asio::ssl::detail::write_op
operator *	.\include\asio\buffers_iterator.hpp	/^  reference operator*() const$/;"	f	class:asio::buffers_iterator
operator *	.\include\asio\detail\scoped_ptr.hpp	/^  T& operator*()$/;"	f	class:asio::detail::scoped_ptr
operator *	.\include\asio\ip\basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& operator*() const$/;"	f	class:asio::ip::basic_resolver_iterator
operator +	.\include\asio\buffers_iterator.hpp	/^  friend buffers_iterator operator+(const buffers_iterator& iter,$/;"	f	class:asio::buffers_iterator
operator +	.\include\asio\buffers_iterator.hpp	/^  friend buffers_iterator operator+(std::ptrdiff_t difference,$/;"	f	class:asio::buffers_iterator
operator ++	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator operator++(int)$/;"	f	class:asio::buffers_iterator
operator ++	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator& operator++()$/;"	f	class:asio::buffers_iterator
operator ++	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator operator++(int)$/;"	f	class:asio::ip::basic_resolver_iterator
operator ++	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator& operator++()$/;"	f	class:asio::ip::basic_resolver_iterator
operator +=	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator& operator+=(std::ptrdiff_t difference)$/;"	f	class:asio::buffers_iterator
operator -	.\include\asio\buffers_iterator.hpp	/^  friend buffers_iterator operator-(const buffers_iterator& iter,$/;"	f	class:asio::buffers_iterator
operator -	.\include\asio\buffers_iterator.hpp	/^  friend std::ptrdiff_t operator-(const buffers_iterator& a,$/;"	f	class:asio::buffers_iterator
operator --	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator operator--(int)$/;"	f	class:asio::buffers_iterator
operator --	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator& operator--()$/;"	f	class:asio::buffers_iterator
operator --	.\include\asio\ip\address_v4_iterator.hpp	/^  basic_address_iterator operator--(int)$/;"	f	class:asio::ip::basic_address_iterator
operator --	.\include\asio\ip\address_v6_iterator.hpp	/^  basic_address_iterator operator--(int)$/;"	f	class:asio::ip::basic_address_iterator
operator -=	.\include\asio\buffers_iterator.hpp	/^  buffers_iterator& operator-=(std::ptrdiff_t difference)$/;"	f	class:asio::buffers_iterator
operator ->	.\include\asio\buffers_iterator.hpp	/^  pointer operator->() const$/;"	f	class:asio::buffers_iterator
operator ->	.\include\asio\detail\scoped_ptr.hpp	/^  T* operator->()$/;"	f	class:asio::detail::scoped_ptr
operator ->	.\include\asio\ip\basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>* operator->() const$/;"	f	class:asio::ip::basic_resolver_iterator
operator <	.\include\asio\buffers_iterator.hpp	/^  friend bool operator<(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator <	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator <	.\include\asio\ip\address_v4.hpp	/^  friend bool operator<(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator <	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator <	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator <<	.\include\asio\error_code.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio
operator <<	.\include\asio\ip\impl\address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\ip\impl\address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\ip\impl\address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\ip\impl\basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\ip\impl\network_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\ip\impl\network_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::ip
operator <<	.\include\asio\local\basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:asio::local
operator <=	.\include\asio\buffers_iterator.hpp	/^  friend bool operator<=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator <=	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator <=	.\include\asio\ip\address.hpp	/^  friend bool operator<=(const address& a1, const address& a2)$/;"	f	class:asio::ip::address
operator <=	.\include\asio\ip\address_v4.hpp	/^  friend bool operator<=(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator <=	.\include\asio\ip\address_v6.hpp	/^  friend bool operator<=(const address_v6& a1, const address_v6& a2)$/;"	f	class:asio::ip::address_v6
operator <=	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator <=	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator<=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator =	.\include\asio\basic_datagram_socket.hpp	/^      basic_datagram_socket>::type& operator=($/;"	f	class:asio::basic_datagram_socket
operator =	.\include\asio\basic_datagram_socket.hpp	/^  basic_datagram_socket& operator=(basic_datagram_socket&& other)$/;"	f	class:asio::basic_datagram_socket
operator =	.\include\asio\basic_deadline_timer.hpp	/^  basic_deadline_timer& operator=(basic_deadline_timer&& other)$/;"	f	class:asio::basic_deadline_timer
operator =	.\include\asio\basic_io_object.hpp	/^  basic_io_object& operator=(basic_io_object&& other)$/;"	f	class:asio::basic_io_object
operator =	.\include\asio\basic_raw_socket.hpp	/^      basic_raw_socket>::type& operator=($/;"	f	class:asio::basic_raw_socket
operator =	.\include\asio\basic_raw_socket.hpp	/^  basic_raw_socket& operator=(basic_raw_socket&& other)$/;"	f	class:asio::basic_raw_socket
operator =	.\include\asio\basic_seq_packet_socket.hpp	/^      basic_seq_packet_socket>::type& operator=($/;"	f	class:asio::basic_seq_packet_socket
operator =	.\include\asio\basic_seq_packet_socket.hpp	/^  basic_seq_packet_socket& operator=(basic_seq_packet_socket&& other)$/;"	f	class:asio::basic_seq_packet_socket
operator =	.\include\asio\basic_serial_port.hpp	/^  basic_serial_port& operator=(basic_serial_port&& other)$/;"	f	class:asio::basic_serial_port
operator =	.\include\asio\basic_socket.hpp	/^      basic_socket>::type& operator=($/;"	f	class:asio::basic_socket
operator =	.\include\asio\basic_socket.hpp	/^  basic_socket& operator=(basic_socket&& other)$/;"	f	class:asio::basic_socket
operator =	.\include\asio\basic_socket_acceptor.hpp	/^      basic_socket_acceptor>::type& operator=($/;"	f	class:asio::basic_socket_acceptor
operator =	.\include\asio\basic_socket_acceptor.hpp	/^  basic_socket_acceptor& operator=(basic_socket_acceptor&& other)$/;"	f	class:asio::basic_socket_acceptor
operator =	.\include\asio\basic_socket_iostream.hpp	/^  basic_socket_iostream& operator=(basic_socket_iostream&& other)$/;"	f	class:asio::basic_socket_iostream
operator =	.\include\asio\basic_socket_iostream.hpp	/^  socket_iostream_base& operator=(socket_iostream_base&& other)$/;"	f	class:asio::detail::socket_iostream_base
operator =	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket_streambuf& operator=(basic_socket_streambuf&& other)$/;"	f	class:asio::basic_socket_streambuf
operator =	.\include\asio\basic_stream_socket.hpp	/^      basic_stream_socket>::type& operator=($/;"	f	class:asio::basic_stream_socket
operator =	.\include\asio\basic_stream_socket.hpp	/^  basic_stream_socket& operator=(basic_stream_socket&& other)$/;"	f	class:asio::basic_stream_socket
operator =	.\include\asio\basic_waitable_timer.hpp	/^  basic_waitable_timer& operator=(basic_waitable_timer&& other)$/;"	f	class:asio::basic_waitable_timer
operator =	.\include\asio\coroutine.hpp	/^  int& operator=(int v) { modified_ = true; return value_ = v; }$/;"	f	class:asio::detail::coroutine_ref
operator =	.\include\asio\detail\keyword_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:asio::detail::keyword_tss_ptr
operator =	.\include\asio\detail\null_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:asio::detail::null_tss_ptr
operator =	.\include\asio\detail\posix_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:asio::detail::posix_tss_ptr
operator =	.\include\asio\detail\reactor_op_queue.hpp	/^    void operator=(const mapped_type&) {}$/;"	f	struct:asio::detail::reactor_op_queue::mapped_type
operator =	.\include\asio\detail\socket_option.hpp	/^  boolean& operator=(bool v)$/;"	f	class:asio::detail::socket_option::boolean
operator =	.\include\asio\detail\socket_option.hpp	/^  integer& operator=(int v)$/;"	f	class:asio::detail::socket_option::integer
operator =	.\include\asio\detail\tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:asio::detail::tss_ptr
operator =	.\include\asio\detail\win_iocp_socket_service.hpp	/^    void operator=(socket_type s)$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
operator =	.\include\asio\detail\win_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:asio::detail::win_tss_ptr
operator =	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:asio::generic::basic_endpoint
operator =	.\include\asio\generic\basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:asio::generic::basic_endpoint
operator =	.\include\asio\generic\detail\endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:asio::generic::detail::endpoint
operator =	.\include\asio\ip\address_v4.hpp	/^  address_v4& operator=(address_v4&& other)$/;"	f	class:asio::ip::address_v4
operator =	.\include\asio\ip\address_v4.hpp	/^  address_v4& operator=(const address_v4& other)$/;"	f	class:asio::ip::address_v4
operator =	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:asio::ip::basic_endpoint
operator =	.\include\asio\ip\basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:asio::ip::basic_endpoint
operator =	.\include\asio\ip\basic_resolver.hpp	/^  basic_resolver& operator=(basic_resolver&& other)$/;"	f	class:asio::ip::basic_resolver
operator =	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator& operator=(basic_resolver_iterator&& other)$/;"	f	class:asio::ip::basic_resolver_iterator
operator =	.\include\asio\ip\basic_resolver_iterator.hpp	/^  basic_resolver_iterator& operator=(const basic_resolver_iterator& other)$/;"	f	class:asio::ip::basic_resolver_iterator
operator =	.\include\asio\ip\basic_resolver_results.hpp	/^  basic_resolver_results& operator=(basic_resolver_results&& other)$/;"	f	class:asio::ip::basic_resolver_results
operator =	.\include\asio\ip\basic_resolver_results.hpp	/^  basic_resolver_results& operator=(const basic_resolver_results& other)$/;"	f	class:asio::ip::basic_resolver_results
operator =	.\include\asio\ip\detail\endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:asio::ip::detail::endpoint
operator =	.\include\asio\ip\detail\socket_option.hpp	/^  multicast_enable_loopback& operator=(bool v)$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
operator =	.\include\asio\ip\detail\socket_option.hpp	/^  multicast_hops& operator=(int v)$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
operator =	.\include\asio\ip\detail\socket_option.hpp	/^  unicast_hops& operator=(int v)$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
operator =	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint& operator=(basic_endpoint&& other)$/;"	f	class:asio::local::basic_endpoint
operator =	.\include\asio\local\basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:asio::local::basic_endpoint
operator =	.\include\asio\local\detail\endpoint.hpp	/^  endpoint& operator=(const endpoint& other)$/;"	f	class:asio::local::detail::endpoint
operator =	.\include\asio\posix\basic_descriptor.hpp	/^  basic_descriptor& operator=(basic_descriptor&& other)$/;"	f	class:asio::posix::basic_descriptor
operator =	.\include\asio\posix\basic_stream_descriptor.hpp	/^  basic_stream_descriptor& operator=(basic_stream_descriptor&& other)$/;"	f	class:asio::posix::basic_stream_descriptor
operator =	.\include\asio\posix\descriptor.hpp	/^  descriptor& operator=(descriptor&& other)$/;"	f	class:asio::posix::descriptor
operator =	.\include\asio\windows\basic_handle.hpp	/^  basic_handle& operator=(basic_handle&& other)$/;"	f	class:asio::windows::basic_handle
operator =	.\include\asio\windows\basic_object_handle.hpp	/^  basic_object_handle& operator=(basic_object_handle&& other)$/;"	f	class:asio::windows::basic_object_handle
operator =	.\include\asio\windows\basic_random_access_handle.hpp	/^  basic_random_access_handle& operator=(basic_random_access_handle&& other)$/;"	f	class:asio::windows::basic_random_access_handle
operator =	.\include\asio\windows\basic_stream_handle.hpp	/^  basic_stream_handle& operator=(basic_stream_handle&& other)$/;"	f	class:asio::windows::basic_stream_handle
operator =	.\include\asio\windows\overlapped_handle.hpp	/^  overlapped_handle& operator=(overlapped_handle&& other)$/;"	f	class:asio::windows::overlapped_handle
operator ==	.\include\asio\buffers_iterator.hpp	/^  friend bool operator==(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator ==	.\include\asio\error_code.hpp	/^  friend bool operator==(const error_code& e1, const error_code& e2)$/;"	f	class:asio::error_code
operator ==	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator ==	.\include\asio\generic\datagram_protocol.hpp	/^  friend bool operator==(const datagram_protocol& p1,$/;"	f	class:asio::generic::datagram_protocol
operator ==	.\include\asio\generic\raw_protocol.hpp	/^  friend bool operator==(const raw_protocol& p1, const raw_protocol& p2)$/;"	f	class:asio::generic::raw_protocol
operator ==	.\include\asio\generic\seq_packet_protocol.hpp	/^  friend bool operator==(const seq_packet_protocol& p1,$/;"	f	class:asio::generic::seq_packet_protocol
operator ==	.\include\asio\generic\stream_protocol.hpp	/^  friend bool operator==(const stream_protocol& p1, const stream_protocol& p2)$/;"	f	class:asio::generic::stream_protocol
operator ==	.\include\asio\ip\address_v4.hpp	/^  friend bool operator==(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator ==	.\include\asio\ip\address_v4_iterator.hpp	/^  friend bool operator==(const basic_address_iterator& a,$/;"	f	class:asio::ip::basic_address_iterator
operator ==	.\include\asio\ip\address_v6_iterator.hpp	/^  friend bool operator==(const basic_address_iterator& a,$/;"	f	class:asio::ip::basic_address_iterator
operator ==	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator ==	.\include\asio\ip\basic_resolver_iterator.hpp	/^  friend bool operator==(const basic_resolver_iterator& a,$/;"	f	class:asio::ip::basic_resolver_iterator
operator ==	.\include\asio\ip\basic_resolver_results.hpp	/^  friend bool operator==(const basic_resolver_results& a,$/;"	f	class:asio::ip::basic_resolver_results
operator ==	.\include\asio\ip\icmp.hpp	/^  friend bool operator==(const icmp& p1, const icmp& p2)$/;"	f	class:asio::ip::icmp
operator ==	.\include\asio\ip\network_v4.hpp	/^  friend bool operator==(const network_v4& a, const network_v4& b)$/;"	f	class:asio::ip::network_v4
operator ==	.\include\asio\ip\network_v6.hpp	/^  friend bool operator==(const network_v6& a, const network_v6& b)$/;"	f	class:asio::ip::network_v6
operator ==	.\include\asio\ip\tcp.hpp	/^  friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:asio::ip::tcp
operator ==	.\include\asio\ip\udp.hpp	/^  friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:asio::ip::udp
operator ==	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator >	.\include\asio\buffers_iterator.hpp	/^  friend bool operator>(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator >	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator >	.\include\asio\ip\address.hpp	/^  friend bool operator>(const address& a1, const address& a2)$/;"	f	class:asio::ip::address
operator >	.\include\asio\ip\address_v4.hpp	/^  friend bool operator>(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator >	.\include\asio\ip\address_v6.hpp	/^  friend bool operator>(const address_v6& a1, const address_v6& a2)$/;"	f	class:asio::ip::address_v6
operator >	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator >	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator>(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator >=	.\include\asio\buffers_iterator.hpp	/^  friend bool operator>=(const buffers_iterator& a, const buffers_iterator& b)$/;"	f	class:asio::buffers_iterator
operator >=	.\include\asio\generic\basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::generic::basic_endpoint
operator >=	.\include\asio\ip\address.hpp	/^  friend bool operator>=(const address& a1, const address& a2)$/;"	f	class:asio::ip::address
operator >=	.\include\asio\ip\address_v4.hpp	/^  friend bool operator>=(const address_v4& a1, const address_v4& a2)$/;"	f	class:asio::ip::address_v4
operator >=	.\include\asio\ip\address_v6.hpp	/^  friend bool operator>=(const address_v6& a1, const address_v6& a2)$/;"	f	class:asio::ip::address_v6
operator >=	.\include\asio\ip\basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:asio::ip::basic_endpoint
operator >=	.\include\asio\local\basic_endpoint.hpp	/^  friend bool operator>=(const basic_endpoint<Protocol>& e1,$/;"	f	class:asio::local::basic_endpoint
operator T*	.\include\asio\detail\keyword_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:asio::detail::keyword_tss_ptr
operator T*	.\include\asio\detail\null_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:asio::detail::null_tss_ptr
operator T*	.\include\asio\detail\posix_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:asio::detail::posix_tss_ptr
operator T*	.\include\asio\detail\win_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:asio::detail::win_tss_ptr
operator []	.\include\asio\buffers_iterator.hpp	/^  reference operator[](std::ptrdiff_t difference) const$/;"	f	class:asio::buffers_iterator
operator []	.\include\asio\spawn.hpp	/^  basic_yield_context operator[](asio::error_code& ec) const$/;"	f	class:asio::basic_yield_context
operator []	.\include\asio\use_future.hpp	/^  use_future_t<OtherAllocator> operator[](const OtherAllocator& allocator) const$/;"	f	class:asio::use_future_t
operator asio::detail::addrinfo_type*	.\include\asio\detail\resolver_service_base.hpp	/^    operator asio::detail::addrinfo_type*()$/;"	f	class:asio::detail::resolver_service_base::auto_addrinfo
operator bool	.\include\asio\detail\socket_option.hpp	/^  operator bool() const$/;"	f	class:asio::detail::socket_option::boolean
operator bool	.\include\asio\ip\detail\socket_option.hpp	/^  operator bool() const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
operator delete	.\include\asio\experimental\impl\co_spawn.hpp	/^  void operator delete(void* pointer, std::size_t size)$/;"	f	class:asio::experimental::detail::awaitee_base
operator endpoint_type	.\include\asio\ip\basic_resolver_entry.hpp	/^  operator endpoint_type() const$/;"	f	class:asio::ip::basic_resolver_entry
operator fd_set*	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:asio::detail::posix_fd_set_adapter
operator fd_set*	.\include\asio\detail\win_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:asio::detail::win_fd_set_adapter
operator int	.\include\asio\coroutine.hpp	/^  operator int() const { return value_; }$/;"	f	class:asio::detail::coroutine_ref
operator new	.\include\asio\experimental\impl\co_spawn.hpp	/^  void* operator new(std::size_t size)$/;"	f	class:asio::experimental::detail::awaitee_base
operator socket_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^    operator socket_type() const$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
operator std::allocator<void>	.\include\asio\use_future.hpp	/^    operator std::allocator<void>() const$/;"	f	struct:asio::use_future_t::std_allocator_void
operator unspecified_bool_type	.\include\asio\error_code.hpp	/^  operator unspecified_bool_type() const$/;"	f	class:asio::error_code
options	.\include\asio\ssl\context_base.hpp	/^  typedef long options;$/;"	t	class:asio::ssl::context_base
other	.\include\asio\detail\handler_alloc_helpers.hpp	/^    typedef hook_allocator<Handler, U> other;$/;"	t	struct:asio::detail::hook_allocator::rebind
other	.\include\asio\detail\recycling_allocator.hpp	/^    typedef recycling_allocator<U> other;$/;"	t	struct:asio::detail::recycling_allocator::rebind
out_ec_	.\include\asio\impl\spawn.hpp	/^    asio::error_code* out_ec_;$/;"	m	class:asio::detail::coro_async_result
out_flags_	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:asio::detail::reactive_socket_recvmsg_op_base
out_flags_	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  socket_base::message_flags& out_flags_;$/;"	m	class:asio::detail::win_iocp_socket_recvmsg_op
out_of_band_inline	.\include\asio\socket_base.hpp	/^      out_of_band_inline;$/;"	t	class:asio::socket_base
out_of_band_inline	.\include\asio\socket_base.hpp	/^  typedef implementation_defined out_of_band_inline;$/;"	t	class:asio::socket_base
outbound_interface	.\include\asio\ip\multicast.hpp	/^  ASIO_OS_DEF(IPV6_MULTICAST_IF)> outbound_interface;$/;"	t	namespace:asio::ip::multicast
outbound_interface	.\include\asio\ip\multicast.hpp	/^typedef implementation_defined outbound_interface;$/;"	t	namespace:asio::ip::multicast
output_buffer	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  void* output_buffer()$/;"	f	class:asio::detail::win_iocp_socket_accept_op
output_buffer	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  void* output_buffer()$/;"	f	class:asio::detail::win_iocp_socket_move_accept_op
output_buffer_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  unsigned char output_buffer_[(sizeof(sockaddr_storage_type) + 16) * 2];$/;"	m	class:asio::detail::win_iocp_socket_accept_op
output_buffer_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  unsigned char output_buffer_[(sizeof(sockaddr_storage_type) + 16) * 2];$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
output_buffer_	.\include\asio\ssl\detail\stream_core.hpp	/^  const asio::mutable_buffer output_buffer_;$/;"	m	struct:asio::ssl::detail::stream_core
output_buffer_space_	.\include\asio\ssl\detail\stream_core.hpp	/^  std::vector<unsigned char> output_buffer_space_;$/;"	m	struct:asio::ssl::detail::stream_core
output_mode	.\include\bmi08x_defs.h	/^uint8_t output_mode :1;$/;"	m	struct:bmi08x_int_pin_cfg
outstanding_ops_	.\include\asio\detail\winrt_async_manager.hpp	/^  atomic_count outstanding_ops_;$/;"	m	class:asio::detail::winrt_async_manager
outstanding_work_	.\include\asio\detail\scheduler.hpp	/^  atomic_count outstanding_work_;$/;"	m	class:asio::detail::scheduler
outstanding_work_	.\include\asio\detail\win_iocp_io_context.hpp	/^  long outstanding_work_;$/;"	m	class:asio::detail::win_iocp_io_context
overflow	.\include\asio\basic_socket_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:asio::basic_socket_streambuf
overflow	.\include\asio\basic_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:asio::basic_streambuf
overlapped_contains_result	.\include\asio\detail\win_iocp_io_context.hpp	/^    overlapped_contains_result = 2$/;"	e	enum:asio::detail::win_iocp_io_context::__anon27
overlapped_handle	.\include\asio\windows\overlapped_handle.hpp	/^  explicit overlapped_handle(asio::io_context& io_context)$/;"	f	class:asio::windows::overlapped_handle
overlapped_handle	.\include\asio\windows\overlapped_handle.hpp	/^  overlapped_handle(asio::io_context& io_context,$/;"	f	class:asio::windows::overlapped_handle
overlapped_handle	.\include\asio\windows\overlapped_handle.hpp	/^  overlapped_handle(overlapped_handle&& other)$/;"	f	class:asio::windows::overlapped_handle
overlapped_handle	.\include\asio\windows\overlapped_handle.hpp	/^class overlapped_handle$/;"	c	namespace:asio::windows
overlapped_ptr	.\include\asio\windows\overlapped_ptr.hpp	/^  explicit overlapped_ptr(asio::io_context& io_context,$/;"	f	class:asio::windows::overlapped_ptr
overlapped_ptr	.\include\asio\windows\overlapped_ptr.hpp	/^  overlapped_ptr()$/;"	f	class:asio::windows::overlapped_ptr
overlapped_ptr	.\include\asio\windows\overlapped_ptr.hpp	/^class overlapped_ptr$/;"	c	namespace:asio::windows
owner_	.\include\asio\detail\service_registry.hpp	/^  execution_context& owner_;$/;"	m	class:asio::detail::service_registry
owner_	.\include\asio\detail\win_object_handle_service.hpp	/^    win_object_handle_service* owner_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
owner_	.\include\asio\execution_context.hpp	/^  execution_context& owner_;$/;"	m	class:asio::execution_context::service
owns_	.\include\asio\executor_work_guard.hpp	/^      owns_(other.owns_)$/;"	f	class:asio::executor_work_guard
owns_	.\include\asio\executor_work_guard.hpp	/^      owns_(true)$/;"	f	class:asio::executor_work_guard
owns_	.\include\asio\executor_work_guard.hpp	/^  bool owns_;$/;"	m	class:asio::executor_work_guard
p_	.\include\asio\detail\local_free_on_block_exit.hpp	/^  void* p_;$/;"	m	class:asio::detail::local_free_on_block_exit
p_	.\include\asio\detail\scoped_ptr.hpp	/^  T* p_;$/;"	m	class:asio::detail::scoped_ptr
p_	.\include\asio\impl\use_future.hpp	/^  shared_ptr<std::promise<T> > p_;$/;"	m	class:asio::detail::promise_creator
p_	.\include\asio\impl\use_future.hpp	/^  shared_ptr<std::promise<T> > p_;$/;"	m	class:asio::detail::promise_executor
p_	.\include\asio\impl\use_future.hpp	/^  shared_ptr<std::promise<T> > p_;$/;"	m	class:asio::detail::promise_invoker
packaged_async_result	.\include\asio\impl\use_future.hpp	/^  explicit packaged_async_result(completion_handler_type& h)$/;"	f	class:asio::detail::packaged_async_result
packaged_async_result	.\include\asio\impl\use_future.hpp	/^class packaged_async_result$/;"	c	namespace:asio::detail
packaged_handler	.\include\asio\impl\use_future.hpp	/^  packaged_handler(packaged_token<Function, Allocator> t)$/;"	f	class:asio::detail::packaged_handler
packaged_handler	.\include\asio\impl\use_future.hpp	/^class packaged_handler$/;"	c	namespace:asio::detail
packaged_token	.\include\asio\impl\use_future.hpp	/^  packaged_token(Function f, const Allocator& a)$/;"	f	class:asio::detail::packaged_token
packaged_token	.\include\asio\impl\use_future.hpp	/^class packaged_token$/;"	c	namespace:asio::detail
parity	.\include\asio\serial_port_base.hpp	/^  class parity$/;"	c	class:asio::serial_port_base
parse	.\source\udp_parser.cpp	/^bool udp_parser::parse(std::string raw_msg)$/;"	f	class:udp_parser
parse_exe_state	.\include\global_types.hpp	/^	parse_exe_state,$/;"	e	enum:udp_states
parser	.\include\udp_if.hpp	/^	udp_parser* parser;$/;"	m	class:udp_if
partial_search	.\include\asio\impl\read_until.hpp	/^  std::pair<Iterator1, bool> partial_search($/;"	f	namespace:asio::detail
passive	.\include\asio\ip\resolver_base.hpp	/^  static const flags passive = implementation_defined;$/;"	m	class:asio::ip::resolver_base
password_callback	.\include\asio\ssl\detail\password_callback.hpp	/^  explicit password_callback(PasswordCallback callback)$/;"	f	class:asio::ssl::detail::password_callback
password_callback	.\include\asio\ssl\detail\password_callback.hpp	/^class password_callback : public password_callback_base$/;"	c	namespace:asio::ssl::detail
password_callback_base	.\include\asio\ssl\detail\password_callback.hpp	/^class password_callback_base$/;"	c	namespace:asio::ssl::detail
password_purpose	.\include\asio\ssl\context_base.hpp	/^  enum password_purpose$/;"	g	class:asio::ssl::context_base
path	.\include\asio\local\basic_endpoint.hpp	/^  std::string path() const$/;"	f	class:asio::local::basic_endpoint
path	.\include\asio\local\basic_endpoint.hpp	/^  void path(const char* p)$/;"	f	class:asio::local::basic_endpoint
path	.\include\asio\local\basic_endpoint.hpp	/^  void path(const std::string& p)$/;"	f	class:asio::local::basic_endpoint
path_length_	.\include\asio\local\detail\endpoint.hpp	/^  std::size_t path_length_;$/;"	m	class:asio::local::detail::endpoint
peek	.\include\asio\buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_stream
peek	.\include\asio\buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_stream
peek	.\include\asio\buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_write_stream
peek	.\include\asio\buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_write_stream
peek	.\include\asio\impl\buffered_read_stream.hpp	/^std::size_t buffered_read_stream<Stream>::peek($/;"	f	class:asio::buffered_read_stream
peek_copy	.\include\asio\buffered_read_stream.hpp	/^  std::size_t peek_copy(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_read_stream
peer_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
peer_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  Socket& peer_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
peer_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  typename Protocol::socket peer_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
peer_endpoint_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
peer_endpoint_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
peer_endpoint_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  typename Protocol::endpoint* peer_endpoint_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
pem	.\include\asio\ssl\context_base.hpp	/^    pem$/;"	e	enum:asio::ssl::context_base::file_format
pending_event_change_index_	.\include\asio\detail\dev_poll_reactor.hpp	/^  hash_map<int, std::size_t> pending_event_change_index_;$/;"	m	class:asio::detail::dev_poll_reactor
pending_event_changes_	.\include\asio\detail\dev_poll_reactor.hpp	/^  std::vector< ::pollfd> pending_event_changes_;$/;"	m	class:asio::detail::dev_poll_reactor
pending_exception_	.\include\asio\experimental\impl\co_spawn.hpp	/^  std::exception_ptr pending_exception_ = nullptr;$/;"	m	class:asio::experimental::detail::awaitee_base
pending_exception_	.\include\asio\experimental\impl\co_spawn.hpp	/^  std::exception_ptr pending_exception_ = nullptr;$/;"	m	class:asio::experimental::detail::awaiter
pending_read_	.\include\asio\ssl\detail\stream_core.hpp	/^  asio::deadline_timer pending_read_;$/;"	m	struct:asio::ssl::detail::stream_core
pending_read_	.\include\asio\ssl\detail\stream_core.hpp	/^  asio::steady_timer pending_read_;$/;"	m	struct:asio::ssl::detail::stream_core
pending_write_	.\include\asio\ssl\detail\stream_core.hpp	/^  asio::deadline_timer pending_write_;$/;"	m	struct:asio::ssl::detail::stream_core
pending_write_	.\include\asio\ssl\detail\stream_core.hpp	/^  asio::steady_timer pending_write_;$/;"	m	struct:asio::ssl::detail::stream_core
per_descriptor_data	.\include\asio\detail\dev_poll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:asio::detail::dev_poll_reactor
per_descriptor_data	.\include\asio\detail\epoll_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:asio::detail::epoll_reactor
per_descriptor_data	.\include\asio\detail\kqueue_reactor.hpp	/^  typedef descriptor_state* per_descriptor_data;$/;"	t	class:asio::detail::kqueue_reactor
per_descriptor_data	.\include\asio\detail\select_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:asio::detail::select_reactor
per_timer_data	.\include\asio\detail\timer_queue.hpp	/^    per_timer_data() :$/;"	f	class:asio::detail::timer_queue::per_timer_data
per_timer_data	.\include\asio\detail\timer_queue.hpp	/^  class per_timer_data$/;"	c	class:asio::detail::timer_queue
per_timer_data	.\include\asio\detail\timer_queue_ptime.hpp	/^    per_timer_data;$/;"	t	class:asio::detail::timer_queue
perform	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  void perform(reactor_op_queue<socket_type>& operations,$/;"	f	class:asio::detail::posix_fd_set_adapter
perform	.\include\asio\detail\reactor_op.hpp	/^  status perform()$/;"	f	class:asio::detail::reactor_op
perform	.\include\asio\detail\win_fd_set_adapter.hpp	/^  void perform(reactor_op_queue<socket_type>& operations,$/;"	f	class:asio::detail::win_fd_set_adapter
perform_func_	.\include\asio\detail\reactor_op.hpp	/^  perform_func_type perform_func_;$/;"	m	class:asio::detail::reactor_op
perform_func_type	.\include\asio\detail\reactor_op.hpp	/^  typedef status (*perform_func_type)(reactor_op*);$/;"	t	class:asio::detail::reactor_op
perform_operations	.\include\asio\detail\reactor_op_queue.hpp	/^  bool perform_operations(Descriptor descriptor, op_queue<operation>& ops)$/;"	f	class:asio::detail::reactor_op_queue
perform_operations	.\include\asio\detail\reactor_op_queue.hpp	/^  bool perform_operations(iterator i, op_queue<operation>& ops)$/;"	f	class:asio::detail::reactor_op_queue
period_type	.\include\asio\detail\chrono_time_traits.hpp	/^  typedef typename duration_type::period period_type;$/;"	t	struct:asio::detail::chrono_time_traits
pipe_select_interrupter	.\include\asio\detail\pipe_select_interrupter.hpp	/^class pipe_select_interrupter$/;"	c	namespace:asio::detail
placeholders	.\include\asio\placeholders.hpp	/^namespace placeholders {$/;"	n	namespace:asio
plot_data	.\include\global_types.hpp	/^    std::vector<double> plot_data;$/;"	m	struct:msg_t
pointer	.\include\asio\buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type* pointer;$/;"	t	class:asio::buffers_iterator
pointer	.\include\asio\buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType* pointer;$/;"	t	class:asio::buffers_iterator
pointer	.\include\asio\ip\address_v4_iterator.hpp	/^  typedef const address_v4* pointer;$/;"	t	class:asio::ip::basic_address_iterator
pointer	.\include\asio\ip\address_v6_iterator.hpp	/^  typedef const address_v6* pointer;$/;"	t	class:asio::ip::basic_address_iterator
pointer	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>* pointer;$/;"	t	class:asio::ip::basic_resolver_iterator
pool_	.\include\asio\thread_pool.hpp	/^  thread_pool& pool_;$/;"	m	class:asio::thread_pool::executor_type
pop	.\include\asio\detail\op_queue.hpp	/^  void pop()$/;"	f	class:asio::detail::op_queue
pop	.\source\strm_queue.cpp	/^std::string strm_queue::pop()$/;"	f	class:strm_queue
port	.\include\asio\ip\basic_endpoint.hpp	/^  unsigned short port() const$/;"	f	class:asio::ip::basic_endpoint
port	.\include\asio\ip\basic_endpoint.hpp	/^  void port(unsigned short port_num)$/;"	f	class:asio::ip::basic_endpoint
port	.\include\udp_channel.hpp	/^	std::string port;$/;"	m	class:udp_channel
pos_infin	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::deadline_timer::time_type pos_infin()$/;"	f	struct:asio::ssl::detail::stream_core
pos_infin	.\include\asio\ssl\detail\stream_core.hpp	/^  static asio::steady_timer::time_point pos_infin()$/;"	f	struct:asio::ssl::detail::stream_core
position_	.\include\asio\buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:asio::buffers_iterator
posix	.\include\asio\posix\basic_descriptor.hpp	/^namespace posix {$/;"	n	namespace:asio
posix	.\include\asio\posix\basic_stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:asio
posix	.\include\asio\posix\descriptor.hpp	/^namespace posix {$/;"	n	namespace:asio
posix	.\include\asio\posix\descriptor_base.hpp	/^namespace posix {$/;"	n	namespace:asio
posix	.\include\asio\posix\stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:asio
posix	.\include\asio\posix\stream_descriptor_service.hpp	/^namespace posix {$/;"	n	namespace:asio
posix_event	.\include\asio\detail\posix_event.hpp	/^class posix_event$/;"	c	namespace:asio::detail
posix_fd_set_adapter	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  posix_fd_set_adapter()$/;"	f	class:asio::detail::posix_fd_set_adapter
posix_fd_set_adapter	.\include\asio\detail\posix_fd_set_adapter.hpp	/^class posix_fd_set_adapter : noncopyable$/;"	c	namespace:asio::detail
posix_global	.\include\asio\detail\posix_global.hpp	/^T& posix_global()$/;"	f	namespace:asio::detail
posix_global_impl	.\include\asio\detail\posix_global.hpp	/^struct posix_global_impl$/;"	s	namespace:asio::detail
posix_mutex	.\include\asio\detail\posix_mutex.hpp	/^class posix_mutex$/;"	c	namespace:asio::detail
posix_signal_blocker	.\include\asio\detail\posix_signal_blocker.hpp	/^  posix_signal_blocker()$/;"	f	class:asio::detail::posix_signal_blocker
posix_signal_blocker	.\include\asio\detail\posix_signal_blocker.hpp	/^class posix_signal_blocker$/;"	c	namespace:asio::detail
posix_static_mutex	.\include\asio\detail\posix_static_mutex.hpp	/^struct posix_static_mutex$/;"	s	namespace:asio::detail
posix_thread	.\include\asio\detail\posix_thread.hpp	/^  posix_thread(Function f, unsigned int = 0)$/;"	f	class:asio::detail::posix_thread
posix_thread	.\include\asio\detail\posix_thread.hpp	/^class posix_thread$/;"	c	namespace:asio::detail
posix_time	.\include\asio\detail\date_time_fwd.hpp	/^namespace posix_time {$/;"	n	namespace:boost
posix_time_duration	.\include\asio\detail\chrono_time_traits.hpp	/^    explicit posix_time_duration(const duration_type& d)$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
posix_time_duration	.\include\asio\detail\chrono_time_traits.hpp	/^  class posix_time_duration$/;"	c	struct:asio::detail::chrono_time_traits
posix_tss_ptr	.\include\asio\detail\posix_tss_ptr.hpp	/^  posix_tss_ptr()$/;"	f	class:asio::detail::posix_tss_ptr
posix_tss_ptr	.\include\asio\detail\posix_tss_ptr.hpp	/^class posix_tss_ptr$/;"	c	namespace:asio::detail
possible_dup	.\include\asio\detail\descriptor_ops.hpp	/^  possible_dup = 4$/;"	e	enum:asio::detail::descriptor_ops::__anon13
possible_dup	.\include\asio\detail\socket_ops.hpp	/^  possible_dup = 64$/;"	e	enum:asio::detail::socket_ops::__anon18
post	.\include\asio\detail\impl\strand_executor_service.hpp	/^void strand_executor_service::post(const implementation_type& impl,$/;"	f	class:asio::detail::strand_executor_service
post	.\include\asio\detail\impl\strand_service.hpp	/^void strand_service::post(strand_service::implementation_type& impl,$/;"	f	class:asio::detail::strand_service
post	.\include\asio\impl\post.hpp	/^ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) post($/;"	f	namespace:asio
post	.\include\asio\impl\post.hpp	/^inline ASIO_INITFN_RESULT_TYPE(CompletionToken, void()) post($/;"	f	namespace:asio
post_immediate_completion	.\include\asio\detail\dev_poll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op, bool is_continuation)$/;"	f	class:asio::detail::dev_poll_reactor
post_immediate_completion	.\include\asio\detail\epoll_reactor.hpp	/^  void post_immediate_completion(reactor_op* op, bool is_continuation)$/;"	f	class:asio::detail::epoll_reactor
post_immediate_completion	.\include\asio\detail\kqueue_reactor.hpp	/^  void post_immediate_completion(reactor_op* op, bool is_continuation)$/;"	f	class:asio::detail::kqueue_reactor
post_immediate_completion	.\include\asio\detail\select_reactor.hpp	/^  void post_immediate_completion(reactor_op* op, bool is_continuation)$/;"	f	class:asio::detail::select_reactor
post_immediate_completion	.\include\asio\detail\win_iocp_io_context.hpp	/^  void post_immediate_completion(win_iocp_operation* op, bool)$/;"	f	class:asio::detail::win_iocp_io_context
post_private_deferred_completion	.\include\asio\detail\win_iocp_io_context.hpp	/^  void post_private_deferred_completion(win_iocp_operation* op)$/;"	f	class:asio::detail::win_iocp_io_context
post_private_immediate_completion	.\include\asio\detail\win_iocp_io_context.hpp	/^  void post_private_immediate_completion(win_iocp_operation* op)$/;"	f	class:asio::detail::win_iocp_io_context
power	.\include\bmi08x_defs.h	/^uint8_t power;$/;"	m	struct:bmi08x_cfg
prefix_length_	.\include\asio\ip\network_v4.hpp	/^      prefix_length_(other.prefix_length_)$/;"	f	class:asio::ip::network_v4
prefix_length_	.\include\asio\ip\network_v4.hpp	/^  unsigned short prefix_length_;$/;"	m	class:asio::ip::network_v4
prefix_length_	.\include\asio\ip\network_v6.hpp	/^      prefix_length_(other.prefix_length_)$/;"	f	class:asio::ip::network_v6
prefix_length_	.\include\asio\ip\network_v6.hpp	/^  unsigned short prefix_length_;$/;"	m	class:asio::ip::network_v6
prepare	.\include\asio\basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:asio::basic_streambuf
prepare	.\include\asio\basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:asio::basic_streambuf_ref
prepare	.\include\asio\buffer.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:asio::dynamic_string_buffer
prepare	.\include\asio\buffer.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:asio::dynamic_vector_buffer
prepare	.\include\asio\detail\consuming_buffers.hpp	/^  Buffer prepare(std::size_t max_size)$/;"	f	class:asio::detail::consuming_single_buffer
prepare	.\include\asio\detail\consuming_buffers.hpp	/^  boost::array<Buffer, 2> prepare(std::size_t max_size)$/;"	f	class:asio::detail::consuming_buffers
prepare	.\include\asio\detail\consuming_buffers.hpp	/^  null_buffers prepare(std::size_t)$/;"	f	class:asio::detail::consuming_buffers
prepare	.\include\asio\detail\consuming_buffers.hpp	/^  prepared_buffers_type prepare(std::size_t max_size)$/;"	f	struct:asio::detail::prepared_buffers
prepare	.\include\asio\detail\consuming_buffers.hpp	/^  std::array<Buffer, 2> prepare(std::size_t max_size)$/;"	f	class:asio::detail::consuming_buffers
prepared_buffers	.\include\asio\detail\consuming_buffers.hpp	/^struct prepared_buffers$/;"	s	namespace:asio::detail
prepared_buffers_max	.\include\asio\detail\consuming_buffers.hpp	/^struct prepared_buffers_max$/;"	s	namespace:asio::detail
prepared_buffers_max	.\include\asio\detail\consuming_buffers.hpp	/^struct prepared_buffers_max<boost::array<Elem, N> >$/;"	s	namespace:asio::detail
prepared_buffers_max	.\include\asio\detail\consuming_buffers.hpp	/^struct prepared_buffers_max<std::array<Elem, N> >$/;"	s	namespace:asio::detail
prev	.\include\asio\detail\object_pool.hpp	/^  static Object*& prev(Object* o)$/;"	f	class:asio::detail::object_pool_access
prev_	.\include\asio\detail\epoll_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
prev_	.\include\asio\detail\kqueue_reactor.hpp	/^    descriptor_state* prev_;$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
prev_	.\include\asio\detail\signal_set_service.hpp	/^  signal_set_service* prev_;$/;"	m	class:asio::detail::signal_set_service
prev_	.\include\asio\detail\strand_executor_service.hpp	/^    strand_impl* prev_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
prev_	.\include\asio\detail\timer_queue.hpp	/^    per_timer_data* prev_;$/;"	m	class:asio::detail::timer_queue::per_timer_data
prev_	.\include\asio\detail\win_iocp_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:asio::detail::win_iocp_handle_service::implementation_type
prev_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    base_implementation_type* prev_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
prev_	.\include\asio\detail\win_object_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
prev_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^    base_implementation_type* prev_;$/;"	m	struct:asio::detail::winrt_ssocket_service_base::base_implementation_type
prev_in_table_	.\include\asio\detail\signal_set_service.hpp	/^    registration* prev_in_table_;$/;"	m	class:asio::detail::signal_set_service::registration
previous_size_	.\include\asio\impl\buffered_read_stream.hpp	/^    std::size_t previous_size_;$/;"	m	class:asio::detail::buffered_fill_handler
private_op_queue	.\include\asio\detail\scheduler_thread_info.hpp	/^  op_queue<scheduler_operation> private_op_queue;$/;"	m	struct:asio::detail::scheduler_thread_info
private_outstanding_work	.\include\asio\detail\scheduler_thread_info.hpp	/^  long private_outstanding_work;$/;"	m	struct:asio::detail::scheduler_thread_info
process	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  engine::want process(engine& eng,$/;"	f	class:asio::ssl::detail::buffered_handshake_op
promise_	.\include\asio\detail\winrt_async_manager.hpp	/^  std::promise<void> promise_;$/;"	m	class:asio::detail::winrt_async_manager
promise_async_result	.\include\asio\impl\use_future.hpp	/^  explicit promise_async_result(completion_handler_type& h)$/;"	f	class:asio::detail::promise_async_result
promise_async_result	.\include\asio\impl\use_future.hpp	/^class promise_async_result$/;"	c	namespace:asio::detail
promise_creator	.\include\asio\impl\use_future.hpp	/^class promise_creator$/;"	c	namespace:asio::detail
promise_executor	.\include\asio\impl\use_future.hpp	/^  explicit promise_executor(const shared_ptr<std::promise<T> >& p)$/;"	f	class:asio::detail::promise_executor
promise_executor	.\include\asio\impl\use_future.hpp	/^class promise_executor$/;"	c	namespace:asio::detail
promise_handler	.\include\asio\impl\use_future.hpp	/^  promise_handler(use_future_t<Allocator> u)$/;"	f	class:asio::detail::promise_handler
promise_handler	.\include\asio\impl\use_future.hpp	/^class promise_handler$/;"	c	namespace:asio::detail
promise_handler_0	.\include\asio\impl\use_future.hpp	/^class promise_handler_0$/;"	c	namespace:asio::detail
promise_handler_1	.\include\asio\impl\use_future.hpp	/^class promise_handler_1$/;"	c	namespace:asio::detail
promise_handler_ec_0	.\include\asio\impl\use_future.hpp	/^class promise_handler_ec_0$/;"	c	namespace:asio::detail
promise_handler_ec_1	.\include\asio\impl\use_future.hpp	/^class promise_handler_ec_1$/;"	c	namespace:asio::detail
promise_handler_ec_n	.\include\asio\impl\use_future.hpp	/^class promise_handler_ec_n$/;"	c	namespace:asio::detail
promise_handler_ex_0	.\include\asio\impl\use_future.hpp	/^class promise_handler_ex_0$/;"	c	namespace:asio::detail
promise_handler_ex_1	.\include\asio\impl\use_future.hpp	/^class promise_handler_ex_1$/;"	c	namespace:asio::detail
promise_handler_ex_n	.\include\asio\impl\use_future.hpp	/^class promise_handler_ex_n$/;"	c	namespace:asio::detail
promise_handler_n	.\include\asio\impl\use_future.hpp	/^class promise_handler_n$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void()>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(Arg)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(Arg...)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(asio::error_code)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(asio::error_code, Arg)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(asio::error_code, Arg...)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(std::exception_ptr)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(std::exception_ptr, Arg)>$/;"	c	namespace:asio::detail
promise_handler_selector	.\include\asio\impl\use_future.hpp	/^class promise_handler_selector<void(std::exception_ptr, Arg...)>$/;"	c	namespace:asio::detail
promise_invoke_and_set	.\include\asio\impl\use_future.hpp	/^inline void promise_invoke_and_set(std::promise<T>& p,$/;"	f	namespace:asio::detail
promise_invoke_and_set	.\include\asio\impl\use_future.hpp	/^inline void promise_invoke_and_set(std::promise<void>& p,$/;"	f	namespace:asio::detail
promise_invoker	.\include\asio\impl\use_future.hpp	/^  promise_invoker(const shared_ptr<std::promise<T> >& p,$/;"	f	class:asio::detail::promise_invoker
promise_invoker	.\include\asio\impl\use_future.hpp	/^class promise_invoker$/;"	c	namespace:asio::detail
promise_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef asio::experimental::detail::awaitee<T, Executor> promise_type;$/;"	t	struct:std::experimental::coroutine_traits
promise_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef asio::experimental::detail::awaiter<Executor> promise_type;$/;"	t	struct:std::experimental::coroutine_traits
protocol	.\include\asio\generic\basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:asio::generic::basic_endpoint
protocol	.\include\asio\generic\datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::generic::datagram_protocol
protocol	.\include\asio\generic\detail\endpoint.hpp	/^  int protocol() const$/;"	f	class:asio::generic::detail::endpoint
protocol	.\include\asio\generic\raw_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::generic::raw_protocol
protocol	.\include\asio\generic\seq_packet_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::generic::seq_packet_protocol
protocol	.\include\asio\generic\stream_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::generic::stream_protocol
protocol	.\include\asio\ip\basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:asio::ip::basic_endpoint
protocol	.\include\asio\ip\icmp.hpp	/^  int protocol() const$/;"	f	class:asio::ip::icmp
protocol	.\include\asio\ip\tcp.hpp	/^  int protocol() const$/;"	f	class:asio::ip::tcp
protocol	.\include\asio\ip\udp.hpp	/^  int protocol() const$/;"	f	class:asio::ip::udp
protocol	.\include\asio\local\basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:asio::local::basic_endpoint
protocol	.\include\asio\local\datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::local::datagram_protocol
protocol	.\include\asio\local\stream_protocol.hpp	/^  int protocol() const$/;"	f	class:asio::local::stream_protocol
protocol_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
protocol_	.\include\asio\detail\reactive_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:asio::detail::reactive_socket_service::implementation_type
protocol_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
protocol_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  Protocol protocol_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
protocol_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:asio::detail::win_iocp_socket_service::implementation_type
protocol_	.\include\asio\detail\winrt_ssocket_service.hpp	/^    protocol_type protocol_;$/;"	m	struct:asio::detail::winrt_ssocket_service::implementation_type
protocol_	.\include\asio\generic\datagram_protocol.hpp	/^  int protocol_;$/;"	m	class:asio::generic::datagram_protocol
protocol_	.\include\asio\generic\detail\endpoint.hpp	/^  int protocol_;$/;"	m	class:asio::generic::detail::endpoint
protocol_	.\include\asio\generic\raw_protocol.hpp	/^  int protocol_;$/;"	m	class:asio::generic::raw_protocol
protocol_	.\include\asio\generic\seq_packet_protocol.hpp	/^  int protocol_;$/;"	m	class:asio::generic::seq_packet_protocol
protocol_	.\include\asio\generic\stream_protocol.hpp	/^  int protocol_;$/;"	m	class:asio::generic::stream_protocol
protocol_	.\include\asio\ip\icmp.hpp	/^  int protocol_;$/;"	m	class:asio::ip::icmp
protocol_type	.\include\asio\basic_datagram_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_datagram_socket
protocol_type	.\include\asio\basic_raw_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_raw_socket
protocol_type	.\include\asio\basic_seq_packet_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_seq_packet_socket
protocol_type	.\include\asio\basic_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_socket
protocol_type	.\include\asio\basic_socket_acceptor.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_socket_acceptor
protocol_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_socket_iostream
protocol_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_socket_streambuf
protocol_type	.\include\asio\basic_stream_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::basic_stream_socket
protocol_type	.\include\asio\datagram_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::datagram_socket_service
protocol_type	.\include\asio\detail\null_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::detail::null_socket_service
protocol_type	.\include\asio\detail\reactive_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::detail::reactive_socket_service
protocol_type	.\include\asio\detail\win_iocp_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::detail::win_iocp_socket_service
protocol_type	.\include\asio\detail\winrt_ssocket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::detail::winrt_ssocket_service
protocol_type	.\include\asio\generic\basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::generic::basic_endpoint
protocol_type	.\include\asio\ip\basic_endpoint.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::basic_endpoint
protocol_type	.\include\asio\ip\basic_resolver.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::basic_resolver
protocol_type	.\include\asio\ip\basic_resolver_entry.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::basic_resolver_entry
protocol_type	.\include\asio\ip\basic_resolver_query.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::basic_resolver_query
protocol_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::basic_resolver_results
protocol_type	.\include\asio\ip\resolver_service.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:asio::ip::resolver_service
protocol_type	.\include\asio\local\basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::local::basic_endpoint
protocol_type	.\include\asio\raw_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::raw_socket_service
protocol_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::seq_packet_socket_service
protocol_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::socket_acceptor_service
protocol_type	.\include\asio\stream_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:asio::stream_socket_service
protocol_type_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  int protocol_type_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op_base
ptr	.\include\asio\detail\posix_thread.hpp	/^    func_base* ptr;$/;"	m	struct:asio::detail::posix_thread::auto_func_base_ptr
ptr	.\include\asio\detail\win_thread.hpp	/^    func_base* ptr;$/;"	m	struct:asio::detail::win_thread::auto_func_base_ptr
ptr	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef std::unique_ptr<awaiter, deleter> ptr;$/;"	t	class:asio::experimental::detail::awaiter
ptr_	.\include\asio\detail\null_global.hpp	/^  T* ptr_;$/;"	m	struct:asio::detail::null_global_impl
ptr_	.\include\asio\detail\posix_global.hpp	/^  T* ptr_;$/;"	m	struct:asio::detail::posix_global_impl
ptr_	.\include\asio\detail\service_registry.hpp	/^    execution_context::service* ptr_;$/;"	m	struct:asio::detail::service_registry::auto_service_ptr
ptr_	.\include\asio\detail\std_global.hpp	/^  T* ptr_;$/;"	m	struct:asio::detail::std_global_impl
ptr_	.\include\asio\detail\win_global.hpp	/^  static T* ptr_;$/;"	m	struct:asio::detail::win_global_impl
ptr_	.\include\asio\detail\win_global.hpp	/^T* win_global_impl<T>::ptr_ = 0;$/;"	m	class:asio::detail::win_global_impl
ptr_	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  win_iocp_operation* ptr_;$/;"	m	class:asio::detail::win_iocp_overlapped_ptr
ptr_	.\include\asio\impl\executor.hpp	/^    impl* ptr_;$/;"	m	struct:asio::executor::impl::raw_mem
puberror	.\include\asio\basic_socket_streambuf.hpp	/^  const asio::error_code& puberror() const$/;"	f	class:asio::basic_socket_streambuf
push	.\include\asio\detail\op_queue.hpp	/^  void push(Operation* h)$/;"	f	class:asio::detail::op_queue
push	.\include\asio\detail\op_queue.hpp	/^  void push(op_queue<OtherOperation>& q)$/;"	f	class:asio::detail::op_queue
push	.\source\strm_queue.cpp	/^void strm_queue::push(char* data)$/;"	f	class:strm_queue
push	.\source\strm_queue.cpp	/^void strm_queue::push(std::string data)$/;"	f	class:strm_queue
put_buffer_	.\include\asio\basic_socket_streambuf.hpp	/^  std::vector<char> put_buffer_;$/;"	m	class:asio::detail::socket_streambuf_buffers
putback_max	.\include\asio\basic_socket_streambuf.hpp	/^  enum { putback_max = 8 };$/;"	e	enum:asio::basic_socket_streambuf::__anon2
query	.\include\asio\ip\basic_resolver.hpp	/^  typedef basic_resolver_query<InternetProtocol> query;$/;"	t	class:asio::ip::basic_resolver
query_	.\include\asio\detail\resolve_query_op.hpp	/^  query_type query_;$/;"	m	class:asio::detail::resolve_query_op
query_	.\include\asio\detail\winrt_resolve_op.hpp	/^  query_type query_;$/;"	m	class:asio::detail::winrt_resolve_op
query_type	.\include\asio\detail\resolve_query_op.hpp	/^  typedef asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:asio::detail::resolve_query_op
query_type	.\include\asio\detail\resolver_service.hpp	/^  typedef asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:asio::detail::resolver_service
query_type	.\include\asio\detail\winrt_resolve_op.hpp	/^  typedef asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:asio::detail::winrt_resolve_op
query_type	.\include\asio\detail\winrt_resolver_service.hpp	/^  typedef asio::ip::basic_resolver_query<Protocol> query_type;$/;"	t	class:asio::detail::winrt_resolver_service
query_type	.\include\asio\ip\resolver_service.hpp	/^  typedef basic_resolver_query<InternetProtocol> query_type;$/;"	t	class:asio::ip::resolver_service
queue	.\include\strm_queue.hpp	/^    std::queue<std::string> queue;$/;"	m	class:strm_queue
queue_	.\include\asio\detail\signal_set_service.hpp	/^    op_queue<signal_op> queue_;$/;"	m	class:asio::detail::signal_set_service::implementation_type
queue_	.\include\asio\detail\signal_set_service.hpp	/^    op_queue<signal_op>* queue_;$/;"	m	class:asio::detail::signal_set_service::registration
random_access_handle	.\include\asio\windows\random_access_handle.hpp	/^typedef basic_random_access_handle<> random_access_handle;$/;"	t	namespace:asio::windows
random_access_handle_service	.\include\asio\windows\random_access_handle_service.hpp	/^  explicit random_access_handle_service(asio::io_context& io_context)$/;"	f	class:asio::windows::random_access_handle_service
random_access_handle_service	.\include\asio\windows\random_access_handle_service.hpp	/^class random_access_handle_service$/;"	c	namespace:asio::windows
range	.\include\bmi08x_defs.h	/^uint8_t range;$/;"	m	struct:bmi08x_cfg
range_connect_op	.\include\asio\impl\connect.hpp	/^    range_connect_op(basic_socket<Protocol ASIO_SVC_TARG>& sock,$/;"	f	class:asio::detail::range_connect_op
range_connect_op	.\include\asio\impl\connect.hpp	/^    range_connect_op(const range_connect_op& other)$/;"	f	class:asio::detail::range_connect_op
range_connect_op	.\include\asio\impl\connect.hpp	/^    range_connect_op(range_connect_op&& other)$/;"	f	class:asio::detail::range_connect_op
range_connect_op	.\include\asio\impl\connect.hpp	/^  class range_connect_op : base_from_connect_condition<ConnectCondition>$/;"	c	namespace:asio::detail
raw	.\include\global_types.hpp	/^	char raw[MAX_LEN];$/;"	m	struct:data_t
raw_mem	.\include\asio\impl\executor.hpp	/^    explicit raw_mem(const Allocator& a)$/;"	f	struct:asio::executor::impl::raw_mem
raw_mem	.\include\asio\impl\executor.hpp	/^  struct raw_mem$/;"	s	class:asio::executor::impl
raw_protocol	.\include\asio\generic\raw_protocol.hpp	/^  raw_protocol(const Protocol& source_protocol)$/;"	f	class:asio::generic::raw_protocol
raw_protocol	.\include\asio\generic\raw_protocol.hpp	/^  raw_protocol(int address_family, int socket_protocol)$/;"	f	class:asio::generic::raw_protocol
raw_protocol	.\include\asio\generic\raw_protocol.hpp	/^class raw_protocol$/;"	c	namespace:asio::generic
raw_socket_service	.\include\asio\raw_socket_service.hpp	/^  explicit raw_socket_service(asio::io_context& io_context)$/;"	f	class:asio::raw_socket_service
raw_socket_service	.\include\asio\raw_socket_service.hpp	/^class raw_socket_service$/;"	c	namespace:asio
rdbuf	.\include\asio\basic_socket_iostream.hpp	/^    Clock, WaitTraits ASIO_SVC_TARG1>* rdbuf() const$/;"	f	class:asio::basic_socket_iostream
reactive_descriptor_service	.\include\asio\detail\reactive_descriptor_service.hpp	/^class reactive_descriptor_service :$/;"	c	namespace:asio::detail
reactive_null_buffers_op	.\include\asio\detail\reactive_null_buffers_op.hpp	/^  reactive_null_buffers_op(Handler& handler)$/;"	f	class:asio::detail::reactive_null_buffers_op
reactive_null_buffers_op	.\include\asio\detail\reactive_null_buffers_op.hpp	/^class reactive_null_buffers_op : public reactor_op$/;"	c	namespace:asio::detail
reactive_serial_port_service	.\include\asio\detail\reactive_serial_port_service.hpp	/^class reactive_serial_port_service :$/;"	c	namespace:asio::detail
reactive_socket_accept_op	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_accept_op
reactive_socket_accept_op	.\include\asio\detail\reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op :$/;"	c	namespace:asio::detail
reactive_socket_accept_op_base	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  reactive_socket_accept_op_base(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_accept_op_base
reactive_socket_accept_op_base	.\include\asio\detail\reactive_socket_accept_op.hpp	/^class reactive_socket_accept_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_connect_op	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op(socket_type socket, Handler& handler)$/;"	f	class:asio::detail::reactive_socket_connect_op
reactive_socket_connect_op	.\include\asio\detail\reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op : public reactive_socket_connect_op_base$/;"	c	namespace:asio::detail
reactive_socket_connect_op_base	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  reactive_socket_connect_op_base(socket_type socket, func_type complete_func)$/;"	f	class:asio::detail::reactive_socket_connect_op_base
reactive_socket_connect_op_base	.\include\asio\detail\reactive_socket_connect_op.hpp	/^class reactive_socket_connect_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_move_accept_op	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  reactive_socket_move_accept_op(io_context& ioc, socket_type socket,$/;"	f	class:asio::detail::reactive_socket_move_accept_op
reactive_socket_move_accept_op	.\include\asio\detail\reactive_socket_accept_op.hpp	/^class reactive_socket_move_accept_op :$/;"	c	namespace:asio::detail
reactive_socket_recv_op	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_recv_op
reactive_socket_recv_op	.\include\asio\detail\reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op :$/;"	c	namespace:asio::detail
reactive_socket_recv_op_base	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  reactive_socket_recv_op_base(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_recv_op_base
reactive_socket_recv_op_base	.\include\asio\detail\reactive_socket_recv_op.hpp	/^class reactive_socket_recv_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_recvfrom_op	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op(socket_type socket, int protocol_type,$/;"	f	class:asio::detail::reactive_socket_recvfrom_op
reactive_socket_recvfrom_op	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op :$/;"	c	namespace:asio::detail
reactive_socket_recvfrom_op_base	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  reactive_socket_recvfrom_op_base(socket_type socket, int protocol_type,$/;"	f	class:asio::detail::reactive_socket_recvfrom_op_base
reactive_socket_recvfrom_op_base	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^class reactive_socket_recvfrom_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_recvmsg_op	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_recvmsg_op
reactive_socket_recvmsg_op	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op :$/;"	c	namespace:asio::detail
reactive_socket_recvmsg_op_base	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  reactive_socket_recvmsg_op_base(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_recvmsg_op_base
reactive_socket_recvmsg_op_base	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^class reactive_socket_recvmsg_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_send_op	.\include\asio\detail\reactive_socket_send_op.hpp	/^  reactive_socket_send_op(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_send_op
reactive_socket_send_op	.\include\asio\detail\reactive_socket_send_op.hpp	/^class reactive_socket_send_op :$/;"	c	namespace:asio::detail
reactive_socket_send_op_base	.\include\asio\detail\reactive_socket_send_op.hpp	/^  reactive_socket_send_op_base(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_send_op_base
reactive_socket_send_op_base	.\include\asio\detail\reactive_socket_send_op.hpp	/^class reactive_socket_send_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_sendto_op	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_sendto_op
reactive_socket_sendto_op	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op :$/;"	c	namespace:asio::detail
reactive_socket_sendto_op_base	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  reactive_socket_sendto_op_base(socket_type socket,$/;"	f	class:asio::detail::reactive_socket_sendto_op_base
reactive_socket_sendto_op_base	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^class reactive_socket_sendto_op_base : public reactor_op$/;"	c	namespace:asio::detail
reactive_socket_service	.\include\asio\detail\reactive_socket_service.hpp	/^  reactive_socket_service(asio::io_context& io_context)$/;"	f	class:asio::detail::reactive_socket_service
reactive_socket_service	.\include\asio\detail\reactive_socket_service.hpp	/^class reactive_socket_service :$/;"	c	namespace:asio::detail
reactive_socket_service_base	.\include\asio\detail\reactive_socket_service_base.hpp	/^class reactive_socket_service_base$/;"	c	namespace:asio::detail
reactive_wait_op	.\include\asio\detail\reactive_wait_op.hpp	/^  reactive_wait_op(Handler& handler)$/;"	f	class:asio::detail::reactive_wait_op
reactive_wait_op	.\include\asio\detail\reactive_wait_op.hpp	/^class reactive_wait_op : public reactor_op$/;"	c	namespace:asio::detail
reactor	.\include\asio\detail\reactor_fwd.hpp	/^typedef class null_reactor reactor;$/;"	t	namespace:asio::detail	typeref:class:asio::detail::null_reactor
reactor_	.\include\asio\detail\epoll_reactor.hpp	/^    epoll_reactor* reactor_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
reactor_	.\include\asio\detail\reactive_descriptor_service.hpp	/^  reactor& reactor_;$/;"	m	class:asio::detail::reactive_descriptor_service
reactor_	.\include\asio\detail\reactive_socket_service_base.hpp	/^  reactor& reactor_;$/;"	m	class:asio::detail::reactive_socket_service_base
reactor_	.\include\asio\detail\signal_set_service.hpp	/^  reactor& reactor_;$/;"	m	class:asio::detail::signal_set_service
reactor_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  select_reactor* reactor_;$/;"	m	class:asio::detail::win_iocp_socket_service_base
reactor_data_	.\include\asio\detail\reactive_descriptor_service.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	class:asio::detail::reactive_descriptor_service::implementation_type
reactor_data_	.\include\asio\detail\reactive_socket_service_base.hpp	/^    reactor::per_descriptor_data reactor_data_;$/;"	m	struct:asio::detail::reactive_socket_service_base::base_implementation_type
reactor_data_	.\include\asio\detail\signal_set_service.hpp	/^  reactor::per_descriptor_data reactor_data_;$/;"	m	class:asio::detail::signal_set_service
reactor_data_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    select_reactor::per_descriptor_data reactor_data_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
reactor_op	.\include\asio\detail\reactor_op.hpp	/^  reactor_op(perform_func_type perform_func, func_type complete_func)$/;"	f	class:asio::detail::reactor_op
reactor_op	.\include\asio\detail\reactor_op.hpp	/^class reactor_op$/;"	c	namespace:asio::detail
reactor_op_queue	.\include\asio\detail\reactor_op_queue.hpp	/^  reactor_op_queue()$/;"	f	class:asio::detail::reactor_op_queue
reactor_op_queue	.\include\asio\detail\reactor_op_queue.hpp	/^class reactor_op_queue$/;"	c	namespace:asio::detail
read	.\include\asio\impl\read.hpp	/^inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:asio
read	.\include\asio\impl\read.hpp	/^inline std::size_t read(SyncReadStream& s,$/;"	f	namespace:asio
read	.\include\asio\impl\read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	f	namespace:asio
read	.\include\asio\impl\read.hpp	/^std::size_t read(SyncReadStream& s,$/;"	f	namespace:asio
read	.\include\bmi08x_defs.h	/^bmi08x_com_fptr_t read;$/;"	m	struct:bmi08x_dev
read_at	.\include\asio\impl\read_at.hpp	/^inline std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:asio
read_at	.\include\asio\impl\read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	f	namespace:asio
read_at_buffer_sequence	.\include\asio\impl\read_at.hpp	/^  std::size_t read_at_buffer_sequence(SyncRandomAccessReadDevice& d,$/;"	f	namespace:asio::detail
read_at_op	.\include\asio\impl\read_at.hpp	/^    read_at_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:asio::detail::read_at_op
read_at_op	.\include\asio\impl\read_at.hpp	/^    read_at_op(const read_at_op& other)$/;"	f	class:asio::detail::read_at_op
read_at_op	.\include\asio\impl\read_at.hpp	/^    read_at_op(read_at_op&& other)$/;"	f	class:asio::detail::read_at_op
read_at_op	.\include\asio\impl\read_at.hpp	/^  class read_at_op$/;"	c	namespace:asio::detail
read_at_streambuf_op	.\include\asio\impl\read_at.hpp	/^    read_at_streambuf_op(AsyncRandomAccessReadDevice& device,$/;"	f	class:asio::detail::read_at_streambuf_op
read_at_streambuf_op	.\include\asio\impl\read_at.hpp	/^    read_at_streambuf_op(const read_at_streambuf_op& other)$/;"	f	class:asio::detail::read_at_streambuf_op
read_at_streambuf_op	.\include\asio\impl\read_at.hpp	/^    read_at_streambuf_op(read_at_streambuf_op&& other)$/;"	f	class:asio::detail::read_at_streambuf_op
read_at_streambuf_op	.\include\asio\impl\read_at.hpp	/^  class read_at_streambuf_op$/;"	c	namespace:asio::detail
read_buffer_sequence	.\include\asio\impl\read.hpp	/^  std::size_t read_buffer_sequence(SyncReadStream& s,$/;"	f	namespace:asio::detail
read_descriptor	.\include\asio\detail\eventfd_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:asio::detail::eventfd_select_interrupter
read_descriptor	.\include\asio\detail\pipe_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:asio::detail::pipe_select_interrupter
read_descriptor	.\include\asio\detail\socket_select_interrupter.hpp	/^  socket_type read_descriptor() const$/;"	f	class:asio::detail::socket_select_interrupter
read_descriptor_	.\include\asio\detail\eventfd_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:asio::detail::eventfd_select_interrupter
read_descriptor_	.\include\asio\detail\pipe_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:asio::detail::pipe_select_interrupter
read_descriptor_	.\include\asio\detail\socket_select_interrupter.hpp	/^  socket_type read_descriptor_;$/;"	m	class:asio::detail::socket_select_interrupter
read_dynbuf_op	.\include\asio\impl\read.hpp	/^    read_dynbuf_op(AsyncReadStream& stream,$/;"	f	class:asio::detail::read_dynbuf_op
read_dynbuf_op	.\include\asio\impl\read.hpp	/^    read_dynbuf_op(const read_dynbuf_op& other)$/;"	f	class:asio::detail::read_dynbuf_op
read_dynbuf_op	.\include\asio\impl\read.hpp	/^    read_dynbuf_op(read_dynbuf_op&& other)$/;"	f	class:asio::detail::read_dynbuf_op
read_dynbuf_op	.\include\asio\impl\read.hpp	/^  class read_dynbuf_op$/;"	c	namespace:asio::detail
read_op	.\include\asio\detail\dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::dev_poll_reactor::op_types
read_op	.\include\asio\detail\epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::epoll_reactor::op_types
read_op	.\include\asio\detail\kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::kqueue_reactor::op_types
read_op	.\include\asio\detail\select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:asio::detail::select_reactor::op_types
read_op	.\include\asio\impl\read.hpp	/^    read_op(AsyncReadStream& stream, const MutableBufferSequence& buffers,$/;"	f	class:asio::detail::read_op
read_op	.\include\asio\impl\read.hpp	/^    read_op(const read_op& other)$/;"	f	class:asio::detail::read_op
read_op	.\include\asio\impl\read.hpp	/^    read_op(read_op&& other)$/;"	f	class:asio::detail::read_op
read_op	.\include\asio\impl\read.hpp	/^  class read_op$/;"	c	namespace:asio::detail
read_op	.\include\asio\ssl\detail\read_op.hpp	/^  read_op(const MutableBufferSequence& buffers)$/;"	f	class:asio::ssl::detail::read_op
read_op	.\include\asio\ssl\detail\read_op.hpp	/^class read_op$/;"	c	namespace:asio::ssl::detail
read_size_helper	.\include\asio\basic_streambuf.hpp	/^  friend std::size_t read_size_helper($/;"	f	class:asio::basic_streambuf
read_some	.\include\asio\basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::basic_serial_port
read_some	.\include\asio\basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_serial_port
read_some	.\include\asio\basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::basic_stream_socket
read_some	.\include\asio\basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
read_some	.\include\asio\buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_stream
read_some	.\include\asio\buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_stream
read_some	.\include\asio\buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::buffered_write_stream
read_some	.\include\asio\buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::buffered_write_stream
read_some	.\include\asio\detail\reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
read_some	.\include\asio\detail\reactive_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
read_some	.\include\asio\detail\win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_handle_service
read_some	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
read_some	.\include\asio\impl\buffered_read_stream.hpp	/^std::size_t buffered_read_stream<Stream>::read_some($/;"	f	class:asio::buffered_read_stream
read_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::posix::basic_stream_descriptor
read_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::posix::basic_stream_descriptor
read_some	.\include\asio\posix\stream_descriptor_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
read_some	.\include\asio\serial_port_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:asio::serial_port_service
read_some	.\include\asio\ssl\stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::ssl::stream
read_some	.\include\asio\ssl\stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::ssl::stream
read_some	.\include\asio\windows\basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:asio::windows::basic_stream_handle
read_some	.\include\asio\windows\basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:asio::windows::basic_stream_handle
read_some	.\include\asio\windows\stream_handle_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
read_some_at	.\include\asio\detail\win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::detail::win_iocp_handle_service
read_some_at	.\include\asio\windows\basic_random_access_handle.hpp	/^  std::size_t read_some_at(uint64_t offset,$/;"	f	class:asio::windows::basic_random_access_handle
read_some_at	.\include\asio\windows\random_access_handle_service.hpp	/^  std::size_t read_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::windows::random_access_handle_service
read_stream_type	.\include\asio\buffered_stream.hpp	/^  typedef buffered_read_stream<write_stream_type&> read_stream_type;$/;"	t	class:asio::buffered_stream
read_until	.\include\asio\impl\read_until.hpp	/^inline std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:asio
read_until	.\include\asio\impl\read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	f	namespace:asio
read_until_delim_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_op(AsyncReadStream& stream,$/;"	f	class:asio::detail::read_until_delim_op
read_until_delim_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_op(const read_until_delim_op& other)$/;"	f	class:asio::detail::read_until_delim_op
read_until_delim_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_op(read_until_delim_op&& other)$/;"	f	class:asio::detail::read_until_delim_op
read_until_delim_op	.\include\asio\impl\read_until.hpp	/^  class read_until_delim_op$/;"	c	namespace:asio::detail
read_until_delim_string_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_string_op(AsyncReadStream& stream,$/;"	f	class:asio::detail::read_until_delim_string_op
read_until_delim_string_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_string_op(const read_until_delim_string_op& other)$/;"	f	class:asio::detail::read_until_delim_string_op
read_until_delim_string_op	.\include\asio\impl\read_until.hpp	/^    read_until_delim_string_op(read_until_delim_string_op&& other)$/;"	f	class:asio::detail::read_until_delim_string_op
read_until_delim_string_op	.\include\asio\impl\read_until.hpp	/^  class read_until_delim_string_op$/;"	c	namespace:asio::detail
read_until_expr_op	.\include\asio\impl\read_until.hpp	/^    read_until_expr_op(AsyncReadStream& stream,$/;"	f	class:asio::detail::read_until_expr_op
read_until_expr_op	.\include\asio\impl\read_until.hpp	/^    read_until_expr_op(const read_until_expr_op& other)$/;"	f	class:asio::detail::read_until_expr_op
read_until_expr_op	.\include\asio\impl\read_until.hpp	/^    read_until_expr_op(read_until_expr_op&& other)$/;"	f	class:asio::detail::read_until_expr_op
read_until_expr_op	.\include\asio\impl\read_until.hpp	/^  class read_until_expr_op$/;"	c	namespace:asio::detail
read_until_match_op	.\include\asio\impl\read_until.hpp	/^    read_until_match_op(AsyncReadStream& stream,$/;"	f	class:asio::detail::read_until_match_op
read_until_match_op	.\include\asio\impl\read_until.hpp	/^    read_until_match_op(const read_until_match_op& other)$/;"	f	class:asio::detail::read_until_match_op
read_until_match_op	.\include\asio\impl\read_until.hpp	/^    read_until_match_op(read_until_match_op&& other)$/;"	f	class:asio::detail::read_until_match_op
read_until_match_op	.\include\asio\impl\read_until.hpp	/^  class read_until_match_op$/;"	c	namespace:asio::detail
read_write_len	.\include\bmi08x_defs.h	/^uint8_t read_write_len;$/;"	m	struct:bmi08x_dev
ready	.\include\asio\experimental\impl\co_spawn.hpp	/^  bool ready() const$/;"	f	class:asio::experimental::detail::awaitee_base
ready_	.\include\asio\detail\win_iocp_operation.hpp	/^  long ready_;$/;"	m	class:asio::detail::win_iocp_operation
ready_	.\include\asio\experimental\impl\co_spawn.hpp	/^  bool ready_ = false;$/;"	m	class:asio::experimental::detail::awaitee_base
ready_	.\include\asio\impl\spawn.hpp	/^    atomic_count ready_;$/;"	m	class:asio::detail::coro_async_result
ready_	.\include\asio\impl\spawn.hpp	/^    atomic_count* ready_;$/;"	m	class:asio::detail::coro_handler
ready_queue_	.\include\asio\detail\strand_executor_service.hpp	/^    op_queue<scheduler_operation> ready_queue_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
ready_queue_	.\include\asio\detail\strand_service.hpp	/^    op_queue<operation> ready_queue_;$/;"	m	class:asio::detail::strand_service::strand_impl
rebind	.\include\asio\detail\handler_alloc_helpers.hpp	/^  struct rebind$/;"	s	class:asio::detail::hook_allocator
rebind	.\include\asio\detail\recycling_allocator.hpp	/^  struct rebind$/;"	s	class:asio::detail::recycling_allocator
rebind	.\include\asio\use_future.hpp	/^  use_future_t<OtherAllocator> rebind(const OtherAllocator& allocator) const$/;"	f	class:asio::use_future_t
receive	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:asio::basic_datagram_socket
receive	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
receive	.\include\asio\basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:asio::basic_raw_socket
receive	.\include\asio\basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
receive	.\include\asio\basic_seq_packet_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_seq_packet_socket
receive	.\include\asio\basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:asio::basic_stream_socket
receive	.\include\asio\basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
receive	.\include\asio\datagram_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
receive	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t receive(implementation_type&, const MutableBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
receive	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t receive(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
receive	.\include\asio\detail\reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service_base
receive	.\include\asio\detail\reactive_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
receive	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service_base
receive	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  size_t receive(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
receive	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  std::size_t receive(base_implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service_base
receive	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  std::size_t receive(base_implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
receive	.\include\asio\raw_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
receive	.\include\asio\seq_packet_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
receive	.\include\asio\stream_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
receive_buffer_size	.\include\asio\socket_base.hpp	/^      receive_buffer_size;$/;"	t	class:asio::socket_base
receive_buffer_size	.\include\asio\socket_base.hpp	/^  typedef implementation_defined receive_buffer_size;$/;"	t	class:asio::socket_base
receive_data	.\source\udp_channel.cpp	/^void udp_channel::receive_data()$/;"	f	class:udp_channel
receive_from	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
receive_from	.\include\asio\basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
receive_from	.\include\asio\datagram_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
receive_from	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t receive_from(implementation_type&, const MutableBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
receive_from	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t receive_from(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
receive_from	.\include\asio\detail\reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service
receive_from	.\include\asio\detail\reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
receive_from	.\include\asio\detail\win_iocp_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
receive_from	.\include\asio\raw_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
receive_low_watermark	.\include\asio\socket_base.hpp	/^      receive_low_watermark;$/;"	t	class:asio::socket_base
receive_low_watermark	.\include\asio\socket_base.hpp	/^  typedef implementation_defined receive_low_watermark;$/;"	t	class:asio::socket_base
receive_state	.\include\global_types.hpp	/^	receive_state,$/;"	e	enum:udp_states
receive_with_flags	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t receive_with_flags(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
receive_with_flags	.\include\asio\detail\reactive_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
receive_with_flags	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  size_t receive_with_flags(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^  recycling_allocator()$/;"	f	class:asio::detail::recycling_allocator
recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^  recycling_allocator(const recycling_allocator<U>&)$/;"	f	class:asio::detail::recycling_allocator
recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^class recycling_allocator$/;"	c	namespace:asio::detail
recycling_allocator	.\include\asio\detail\recycling_allocator.hpp	/^class recycling_allocator<void>$/;"	c	namespace:asio::detail
redirect_error	.\include\asio\experimental\redirect_error.hpp	/^inline redirect_error_t<typename decay<CompletionToken>::type> redirect_error($/;"	f	namespace:asio::experimental
redirect_error_handler	.\include\asio\experimental\impl\redirect_error.hpp	/^  redirect_error_handler(redirect_error_t<CompletionToken> e)$/;"	f	class:asio::experimental::detail::redirect_error_handler
redirect_error_handler	.\include\asio\experimental\impl\redirect_error.hpp	/^class redirect_error_handler$/;"	c	namespace:asio::experimental::detail
redirect_error_signature	.\include\asio\experimental\impl\redirect_error.hpp	/^struct redirect_error_signature$/;"	s	namespace:asio::experimental::detail
redirect_error_signature	.\include\asio\experimental\impl\redirect_error.hpp	/^struct redirect_error_signature<R(asio::error_code)>$/;"	s	namespace:asio::experimental::detail
redirect_error_signature	.\include\asio\experimental\impl\redirect_error.hpp	/^struct redirect_error_signature<R(asio::error_code, Args...)>$/;"	s	namespace:asio::experimental::detail
redirect_error_signature	.\include\asio\experimental\impl\redirect_error.hpp	/^struct redirect_error_signature<R(const asio::error_code&)>$/;"	s	namespace:asio::experimental::detail
redirect_error_signature	.\include\asio\experimental\impl\redirect_error.hpp	/^struct redirect_error_signature<R(const asio::error_code&, Args...)>$/;"	s	namespace:asio::experimental::detail
redirect_error_t	.\include\asio\experimental\redirect_error.hpp	/^class redirect_error_t$/;"	c	namespace:asio::experimental
reenter	.\include\asio\unyield.hpp	12;"	d
reenter	.\include\asio\yield.hpp	14;"	d
ref_	.\include\asio\ssl\detail\openssl_init.hpp	/^  asio::detail::shared_ptr<do_init> ref_;$/;"	m	class:asio::ssl::detail::openssl_init
ref_count_	.\include\asio\experimental\impl\co_spawn.hpp	/^  std::size_t ref_count_ = 0;$/;"	m	class:asio::experimental::detail::awaiter
ref_count_	.\include\asio\impl\executor.hpp	/^  mutable detail::atomic_count ref_count_;$/;"	m	class:asio::executor::impl
reference	.\include\asio\buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type& reference;$/;"	t	class:asio::buffers_iterator
reference	.\include\asio\buffers_iterator.hpp	/^  typedef const_or_non_const_ByteType& reference;$/;"	t	class:asio::buffers_iterator
reference	.\include\asio\ip\address_v4_iterator.hpp	/^  typedef const address_v4& reference;$/;"	t	class:asio::ip::basic_address_iterator
reference	.\include\asio\ip\address_v6_iterator.hpp	/^  typedef const address_v6& reference;$/;"	t	class:asio::ip::basic_address_iterator
reference	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef const basic_resolver_entry<InternetProtocol>& reference;$/;"	t	class:asio::ip::basic_resolver_iterator
reference	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef value_type& reference;$/;"	t	class:asio::ip::basic_resolver_results
registered_descriptors_	.\include\asio\detail\epoll_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:asio::detail::epoll_reactor
registered_descriptors_	.\include\asio\detail\kqueue_reactor.hpp	/^  object_pool<descriptor_state> registered_descriptors_;$/;"	m	class:asio::detail::kqueue_reactor
registered_descriptors_mutex_	.\include\asio\detail\epoll_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:asio::detail::epoll_reactor
registered_descriptors_mutex_	.\include\asio\detail\kqueue_reactor.hpp	/^  mutex registered_descriptors_mutex_;$/;"	m	class:asio::detail::kqueue_reactor
registered_events_	.\include\asio\detail\epoll_reactor.hpp	/^    uint32_t registered_events_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
registration	.\include\asio\detail\signal_set_service.hpp	/^    registration()$/;"	f	class:asio::detail::signal_set_service::registration
registration	.\include\asio\detail\signal_set_service.hpp	/^  class registration$/;"	c	class:asio::detail::signal_set_service
registrations_	.\include\asio\detail\signal_set_service.hpp	/^  registration* registrations_[max_signal_number];$/;"	m	class:asio::detail::signal_set_service
rehash	.\include\asio\detail\hash_map.hpp	/^  void rehash(std::size_t num_buckets)$/;"	f	class:asio::detail::hash_map
release	.\include\asio\basic_socket.hpp	/^  native_handle_type release()$/;"	f	class:asio::basic_socket
release	.\include\asio\basic_socket.hpp	/^  native_handle_type release(asio::error_code& ec)$/;"	f	class:asio::basic_socket
release	.\include\asio\basic_socket_acceptor.hpp	/^  native_handle_type release()$/;"	f	class:asio::basic_socket_acceptor
release	.\include\asio\basic_socket_acceptor.hpp	/^  native_handle_type release(asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
release	.\include\asio\datagram_socket_service.hpp	/^  native_handle_type release(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
release	.\include\asio\detail\null_socket_service.hpp	/^  native_handle_type release(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
release	.\include\asio\detail\scoped_ptr.hpp	/^  T* release()$/;"	f	class:asio::detail::scoped_ptr
release	.\include\asio\detail\socket_holder.hpp	/^  socket_type release()$/;"	f	class:asio::detail::socket_holder
release	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
release	.\include\asio\experimental\impl\co_spawn.hpp	/^  void release()$/;"	f	class:asio::experimental::detail::awaiter
release	.\include\asio\posix\basic_descriptor.hpp	/^  native_handle_type release()$/;"	f	class:asio::posix::basic_descriptor
release	.\include\asio\posix\descriptor.hpp	/^  native_handle_type release()$/;"	f	class:asio::posix::descriptor
release	.\include\asio\posix\stream_descriptor_service.hpp	/^  native_handle_type release(implementation_type& impl)$/;"	f	class:asio::posix::stream_descriptor_service
release	.\include\asio\raw_socket_service.hpp	/^  native_handle_type release(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
release	.\include\asio\seq_packet_socket_service.hpp	/^  native_handle_type release(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
release	.\include\asio\socket_acceptor_service.hpp	/^  native_handle_type release(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
release	.\include\asio\stream_socket_service.hpp	/^  native_handle_type release(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
release	.\include\asio\windows\overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:asio::windows::overlapped_ptr
remote_endpoint	.\include\asio\basic_socket.hpp	/^  endpoint_type remote_endpoint() const$/;"	f	class:asio::basic_socket
remote_endpoint	.\include\asio\basic_socket.hpp	/^  endpoint_type remote_endpoint(asio::error_code& ec) const$/;"	f	class:asio::basic_socket
remote_endpoint	.\include\asio\datagram_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
remote_endpoint	.\include\asio\detail\null_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type&,$/;"	f	class:asio::detail::null_socket_service
remote_endpoint	.\include\asio\detail\reactive_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
remote_endpoint	.\include\asio\detail\win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint() const$/;"	f	class:asio::detail::win_iocp_socket_service::native_handle_type
remote_endpoint	.\include\asio\detail\win_iocp_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
remote_endpoint	.\include\asio\detail\winrt_ssocket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
remote_endpoint	.\include\asio\raw_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::raw_socket_service
remote_endpoint	.\include\asio\seq_packet_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
remote_endpoint	.\include\asio\stream_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:asio::stream_socket_service
remote_endpoint_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	class:asio::detail::win_iocp_socket_service::native_handle_type
remote_endpoint_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	struct:asio::detail::win_iocp_socket_service::implementation_type
remove	.\include\asio\basic_signal_set.hpp	/^  ASIO_SYNC_OP_VOID remove(int signal_number,$/;"	f	class:asio::basic_signal_set
remove	.\include\asio\basic_signal_set.hpp	/^  void remove(int signal_number)$/;"	f	class:asio::basic_signal_set
remove	.\include\asio\signal_set_service.hpp	/^  ASIO_SYNC_OP_VOID remove(implementation_type& impl,$/;"	f	class:asio::signal_set_service
remove_timer	.\include\asio\detail\timer_queue.hpp	/^  void remove_timer(per_timer_data& timer)$/;"	f	class:asio::detail::timer_queue
remove_timer_queue	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^void dev_poll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::dev_poll_reactor
remove_timer_queue	.\include\asio\detail\impl\epoll_reactor.hpp	/^void epoll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::epoll_reactor
remove_timer_queue	.\include\asio\detail\impl\kqueue_reactor.hpp	/^void kqueue_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::kqueue_reactor
remove_timer_queue	.\include\asio\detail\impl\select_reactor.hpp	/^void select_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::select_reactor
remove_timer_queue	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^void win_iocp_io_context::remove_timer_queue($/;"	f	class:asio::detail::win_iocp_io_context
remove_timer_queue	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^void winrt_timer_scheduler::remove_timer_queue(timer_queue<Time_Traits>& queue)$/;"	f	class:asio::detail::winrt_timer_scheduler
reserve	.\include\asio\basic_streambuf.hpp	/^  void reserve(std::size_t n)$/;"	f	class:asio::basic_streambuf
reserve	.\include\asio\detail\win_fd_set_adapter.hpp	/^  void reserve(u_int n)$/;"	f	class:asio::detail::win_fd_set_adapter
reset	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:asio::detail::posix_fd_set_adapter
reset	.\include\asio\detail\scoped_ptr.hpp	/^  void reset(T* p = 0)$/;"	f	class:asio::detail::scoped_ptr
reset	.\include\asio\detail\socket_holder.hpp	/^  void reset()$/;"	f	class:asio::detail::socket_holder
reset	.\include\asio\detail\socket_holder.hpp	/^  void reset(socket_type s)$/;"	f	class:asio::detail::socket_holder
reset	.\include\asio\detail\win_fd_set_adapter.hpp	/^  void reset()$/;"	f	class:asio::detail::win_fd_set_adapter
reset	.\include\asio\detail\win_iocp_operation.hpp	/^  void reset()$/;"	f	class:asio::detail::win_iocp_operation
reset	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  void reset()$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
reset	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  void reset(asio::io_context& io_context, Handler handler)$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
reset	.\include\asio\impl\io_context.hpp	/^inline void io_context::reset()$/;"	f	class:asio::io_context
reset	.\include\asio\windows\overlapped_ptr.hpp	/^  void reset()$/;"	f	class:asio::windows::overlapped_ptr
reset	.\include\asio\windows\overlapped_ptr.hpp	/^  void reset(asio::io_context& io_context,$/;"	f	class:asio::windows::overlapped_ptr
resize	.\include\asio\detail\buffered_stream_storage.hpp	/^  void resize(size_type length)$/;"	f	class:asio::detail::buffered_stream_storage
resize	.\include\asio\detail\socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:asio::detail::socket_option::boolean
resize	.\include\asio\detail\socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:asio::detail::socket_option::integer
resize	.\include\asio\detail\socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:asio::detail::socket_option::linger
resize	.\include\asio\generic\basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:asio::generic::basic_endpoint
resize	.\include\asio\ip\basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:asio::ip::basic_endpoint
resize	.\include\asio\ip\detail\socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
resize	.\include\asio\ip\detail\socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
resize	.\include\asio\ip\detail\socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
resize	.\include\asio\local\basic_endpoint.hpp	/^  void resize(std::size_t new_size)$/;"	f	class:asio::local::basic_endpoint
resolve	.\include\asio\detail\resolver_service.hpp	/^  results_type resolve(implementation_type&, const query_type& query,$/;"	f	class:asio::detail::resolver_service
resolve	.\include\asio\detail\resolver_service.hpp	/^  results_type resolve(implementation_type&,$/;"	f	class:asio::detail::resolver_service
resolve	.\include\asio\detail\winrt_resolver_service.hpp	/^  results_type resolve(implementation_type&,$/;"	f	class:asio::detail::winrt_resolver_service
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(ASIO_STRING_VIEW_PARAM host,$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(const endpoint_type& e)$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(const endpoint_type& e, asio::error_code& ec)$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(const protocol_type& protocol,$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(const query& q)$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\basic_resolver.hpp	/^  results_type resolve(const query& q, asio::error_code& ec)$/;"	f	class:asio::ip::basic_resolver
resolve	.\include\asio\ip\resolver_service.hpp	/^  results_type resolve(implementation_type& impl, const query_type& query,$/;"	f	class:asio::ip::resolver_service
resolve	.\include\asio\ip\resolver_service.hpp	/^  results_type resolve(implementation_type& impl,$/;"	f	class:asio::ip::resolver_service
resolve_endpoint_op	.\include\asio\detail\resolve_endpoint_op.hpp	/^  resolve_endpoint_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:asio::detail::resolve_endpoint_op
resolve_endpoint_op	.\include\asio\detail\resolve_endpoint_op.hpp	/^class resolve_endpoint_op : public resolve_op$/;"	c	namespace:asio::detail
resolve_op	.\include\asio\detail\resolve_op.hpp	/^  resolve_op(func_type complete_func)$/;"	f	class:asio::detail::resolve_op
resolve_op	.\include\asio\detail\resolve_op.hpp	/^class resolve_op : public operation$/;"	c	namespace:asio::detail
resolve_query_op	.\include\asio\detail\resolve_query_op.hpp	/^  resolve_query_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:asio::detail::resolve_query_op
resolve_query_op	.\include\asio\detail\resolve_query_op.hpp	/^class resolve_query_op : public resolve_op$/;"	c	namespace:asio::detail
resolver	.\include\asio\ip\icmp.hpp	/^  typedef basic_resolver<icmp> resolver;$/;"	t	class:asio::ip::icmp
resolver	.\include\asio\ip\tcp.hpp	/^  typedef basic_resolver<tcp> resolver;$/;"	t	class:asio::ip::tcp
resolver	.\include\asio\ip\udp.hpp	/^  typedef basic_resolver<udp> resolver;$/;"	t	class:asio::ip::udp
resolver_base	.\include\asio\ip\resolver_base.hpp	/^class resolver_base$/;"	c	namespace:asio::ip
resolver_errc	.\include\asio\error.hpp	/^namespace resolver_errc {$/;"	n	namespace:asio
resolver_query_base	.\include\asio\ip\resolver_query_base.hpp	/^class resolver_query_base : public resolver_base$/;"	c	namespace:asio::ip
resolver_service	.\include\asio\detail\resolver_service.hpp	/^  resolver_service(asio::io_context& io_context)$/;"	f	class:asio::detail::resolver_service
resolver_service	.\include\asio\detail\resolver_service.hpp	/^class resolver_service :$/;"	c	namespace:asio::detail
resolver_service	.\include\asio\ip\resolver_service.hpp	/^  explicit resolver_service(asio::io_context& io_context)$/;"	f	class:asio::ip::resolver_service
resolver_service	.\include\asio\ip\resolver_service.hpp	/^class resolver_service$/;"	c	namespace:asio::ip
resolver_service_base	.\include\asio\detail\resolver_service_base.hpp	/^class resolver_service_base$/;"	c	namespace:asio::detail
restart	.\include\asio\detail\win_iocp_io_context.hpp	/^  void restart()$/;"	f	class:asio::detail::win_iocp_io_context
result	.\include\asio\async_result.hpp	/^  async_result<typename decay<CompletionToken>::type, Signature> result;$/;"	m	struct:asio::async_completion
result_	.\include\asio\detail\winrt_async_op.hpp	/^  TResult result_;$/;"	m	class:asio::detail::winrt_async_op
result_	.\include\asio\detail\winsock_init.hpp	/^    long result_;$/;"	m	struct:asio::detail::winsock_init_base::data
result_	.\include\asio\experimental\impl\co_spawn.hpp	/^  alignas(T) unsigned char result_[sizeof(T)];$/;"	m	class:asio::experimental::detail::awaitee
result_of	.\include\asio\detail\type_traits.hpp	/^struct result_of<F(Args...)> : std::invoke_result<F, Args...> {};$/;"	s	namespace:asio
result_type	.\include\asio\bind_executor.hpp	/^  typedef R result_type;$/;"	t	struct:asio::detail::executor_binder_result_type
result_type	.\include\asio\bind_executor.hpp	/^  typedef see_below result_type;$/;"	t	class:asio::executor_binder
result_type	.\include\asio\bind_executor.hpp	/^  typedef typename T::result_type result_type;$/;"	t	struct:asio::detail::executor_binder_result_type
result_type	.\include\asio\completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:asio::detail::transfer_all_t
result_type	.\include\asio\completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:asio::detail::transfer_at_least_t
result_type	.\include\asio\completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:asio::detail::transfer_exactly_t
result_type	.\include\asio\detail\wrapped_handler.hpp	/^  typedef void result_type;$/;"	t	class:asio::detail::wrapped_handler
result_type	.\include\asio\impl\use_future.hpp	/^  typedef void result_type;$/;"	t	class:asio::detail::packaged_handler
result_type	.\include\asio\impl\use_future.hpp	/^  typedef void result_type;$/;"	t	class:asio::detail::promise_handler
result_type	.\include\asio\ssl\rfc2818_verification.hpp	/^  typedef bool result_type;$/;"	t	class:asio::ssl::rfc2818_verification
result_type_or_void	.\include\asio\bind_executor.hpp	/^  typedef result_type result_type_or_void;$/;"	t	struct:asio::detail::executor_binder_result_type
result_type_or_void	.\include\asio\bind_executor.hpp	/^  typedef void result_type_or_void;$/;"	t	struct:asio::detail::executor_binder_result_type
results	.\include\asio\placeholders.hpp	/^unspecified results;$/;"	m	namespace:asio::placeholders
results_	.\include\asio\detail\resolve_endpoint_op.hpp	/^  results_type results_;$/;"	m	class:asio::detail::resolve_endpoint_op
results_type	.\include\asio\detail\resolve_endpoint_op.hpp	/^  typedef asio::ip::basic_resolver_results<Protocol> results_type;$/;"	t	class:asio::detail::resolve_endpoint_op
results_type	.\include\asio\detail\resolve_query_op.hpp	/^  typedef asio::ip::basic_resolver_results<Protocol> results_type;$/;"	t	class:asio::detail::resolve_query_op
results_type	.\include\asio\detail\resolver_service.hpp	/^  typedef asio::ip::basic_resolver_results<Protocol> results_type;$/;"	t	class:asio::detail::resolver_service
results_type	.\include\asio\detail\winrt_resolve_op.hpp	/^  typedef asio::ip::basic_resolver_results<Protocol> results_type;$/;"	t	class:asio::detail::winrt_resolve_op
results_type	.\include\asio\detail\winrt_resolver_service.hpp	/^  typedef asio::ip::basic_resolver_results<Protocol> results_type;$/;"	t	class:asio::detail::winrt_resolver_service
results_type	.\include\asio\ip\basic_resolver.hpp	/^  typedef basic_resolver_results<InternetProtocol> results_type;$/;"	t	class:asio::ip::basic_resolver
results_type	.\include\asio\ip\resolver_service.hpp	/^  typedef basic_resolver_results<InternetProtocol> results_type;$/;"	t	class:asio::ip::resolver_service
resume_on_attach_	.\include\asio\experimental\impl\co_spawn.hpp	/^  coroutine_handle<void> resume_on_attach_ = nullptr;$/;"	m	class:asio::experimental::detail::awaitee_base
rethrow_exception	.\include\asio\experimental\impl\co_spawn.hpp	/^  void rethrow_exception()$/;"	f	class:asio::experimental::detail::awaitee_base
rethrow_unhandled_exception	.\include\asio\experimental\impl\co_spawn.hpp	/^  void rethrow_unhandled_exception()$/;"	f	class:asio::experimental::detail::awaiter
return_type	.\include\asio\async_result.hpp	/^  typedef void return_type;$/;"	t	class:asio::async_result
return_type	.\include\asio\bind_executor.hpp	/^  typedef typename async_result<T, Signature>::return_type return_type;$/;"	t	class:asio::async_result
return_type	.\include\asio\experimental\impl\co_spawn.hpp	/^    Executor, Args...>::awaitable_type return_type;$/;"	t	class:asio::async_result
return_type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef void return_type;$/;"	t	class:asio::experimental::detail::await_handler
return_type	.\include\asio\experimental\impl\detached.hpp	/^  typedef void return_type;$/;"	t	struct:asio::async_result
return_type	.\include\asio\impl\spawn.hpp	/^    typedef T return_type;$/;"	t	class:asio::detail::coro_async_result
return_type	.\include\asio\impl\spawn.hpp	/^    typedef void return_type;$/;"	t	class:asio::detail::coro_async_result
return_type	.\include\asio\impl\use_future.hpp	/^  typedef typename completion_handler_type::future_type return_type;$/;"	t	class:asio::detail::packaged_async_result
return_type	.\include\asio\impl\use_future.hpp	/^  typedef typename completion_handler_type::future_type return_type;$/;"	t	class:asio::detail::promise_async_result
return_type	.\include\asio\packaged_task.hpp	/^  typedef std::future<Result> return_type;$/;"	t	class:asio::async_result
return_value	.\include\asio\experimental\impl\co_spawn.hpp	/^  void return_value(U&& u)$/;"	f	class:asio::experimental::detail::awaitee
return_void	.\include\asio\experimental\impl\co_spawn.hpp	/^  void return_void()$/;"	f	class:asio::experimental::detail::awaitee
return_void	.\include\asio\experimental\impl\co_spawn.hpp	/^  void return_void()$/;"	f	class:asio::experimental::detail::awaiter
reusable_memory_	.\include\asio\detail\thread_info_base.hpp	/^  void* reusable_memory_[max_mem_index];$/;"	m	class:asio::detail::thread_info_base
reuse_address	.\include\asio\socket_base.hpp	/^      reuse_address;$/;"	t	class:asio::socket_base
reuse_address	.\include\asio\socket_base.hpp	/^  typedef implementation_defined reuse_address;$/;"	t	class:asio::socket_base
rewrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  explicit rewrapped_handler(Handler& handler, const Context& context)$/;"	f	class:asio::detail::rewrapped_handler
rewrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  explicit rewrapped_handler(const Handler& handler, const Context& context)$/;"	f	class:asio::detail::rewrapped_handler
rewrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  rewrapped_handler(const rewrapped_handler& other)$/;"	f	class:asio::detail::rewrapped_handler
rewrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  rewrapped_handler(rewrapped_handler&& other)$/;"	f	class:asio::detail::rewrapped_handler
rewrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^class rewrapped_handler$/;"	c	namespace:asio::detail
rfc2818_verification	.\include\asio\ssl\rfc2818_verification.hpp	/^  explicit rfc2818_verification(const std::string& host)$/;"	f	class:asio::ssl::rfc2818_verification
rfc2818_verification	.\include\asio\ssl\rfc2818_verification.hpp	/^class rfc2818_verification$/;"	c	namespace:asio::ssl
run	.\include\asio\detail\null_reactor.hpp	/^  void run(long \/*usec*\/, op_queue<scheduler_operation>& \/*ops*\/)$/;"	f	class:asio::detail::null_reactor
run	.\include\asio\detail\posix_thread.hpp	/^    virtual void run()$/;"	f	class:asio::detail::posix_thread::func
run	.\include\asio\detail\win_thread.hpp	/^    virtual void run()$/;"	f	class:asio::detail::win_thread::func
run	.\include\asio\detail\winapp_thread.hpp	/^    virtual void run()$/;"	f	class:asio::detail::winapp_thread::func
run	.\include\asio\detail\wince_thread.hpp	/^    virtual void run()$/;"	f	class:asio::detail::wince_thread::func
run_for	.\include\asio\impl\io_context.hpp	/^std::size_t io_context::run_for($/;"	f	class:asio::io_context
run_one_for	.\include\asio\impl\io_context.hpp	/^std::size_t io_context::run_one_for($/;"	f	class:asio::io_context
run_one_until	.\include\asio\impl\io_context.hpp	/^std::size_t io_context::run_one_until($/;"	f	class:asio::io_context
run_until	.\include\asio\impl\io_context.hpp	/^std::size_t io_context::run_until($/;"	f	class:asio::io_context
s6_addr	.\include\asio\detail\old_win_sdk_compat.hpp	69;"	d
s6_addr	.\include\asio\detail\socket_types.hpp	/^struct in6_addr_type { unsigned char s6_addr[16]; };$/;"	m	struct:asio::detail::in6_addr_type
s_addr	.\include\asio\detail\socket_types.hpp	/^struct in4_addr_type { u_long_type s_addr; };$/;"	m	struct:asio::detail::in4_addr_type
sa_family	.\include\asio\detail\socket_types.hpp	/^struct socket_addr_type { int sa_family; };$/;"	m	struct:asio::detail::socket_addr_type
safe_cancellation_thread_id_	.\include\asio\detail\win_iocp_handle_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:asio::detail::win_iocp_handle_service::implementation_type
safe_cancellation_thread_id_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
salt_	.\include\asio\detail\strand_executor_service.hpp	/^  std::size_t salt_;$/;"	m	class:asio::detail::strand_executor_service
salt_	.\include\asio\detail\strand_service.hpp	/^  std::size_t salt_;$/;"	m	class:asio::detail::strand_service
sb_	.\include\asio\basic_streambuf.hpp	/^    : sb_(other.sb_)$/;"	f	class:asio::basic_streambuf_ref
sb_	.\include\asio\basic_streambuf.hpp	/^  basic_streambuf<Allocator>& sb_;$/;"	m	class:asio::basic_streambuf_ref
sbarrier	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  static void sbarrier()$/;"	f	class:asio::detail::gcc_x86_fenced_block
schedule_timer	.\include\asio\detail\impl\dev_poll_reactor.hpp	/^void dev_poll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::dev_poll_reactor
schedule_timer	.\include\asio\detail\impl\epoll_reactor.hpp	/^void epoll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::epoll_reactor
schedule_timer	.\include\asio\detail\impl\kqueue_reactor.hpp	/^void kqueue_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::kqueue_reactor
schedule_timer	.\include\asio\detail\impl\select_reactor.hpp	/^void select_reactor::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::select_reactor
schedule_timer	.\include\asio\detail\impl\win_iocp_io_context.hpp	/^void win_iocp_io_context::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::win_iocp_io_context
schedule_timer	.\include\asio\detail\impl\winrt_timer_scheduler.hpp	/^void winrt_timer_scheduler::schedule_timer(timer_queue<Time_Traits>& queue,$/;"	f	class:asio::detail::winrt_timer_scheduler
scheduler	.\include\asio\detail\scheduler.hpp	/^class scheduler$/;"	c	namespace:asio::detail
scheduler_	.\include\asio\detail\deadline_timer_service.hpp	/^  timer_scheduler& scheduler_;$/;"	m	class:asio::detail::deadline_timer_service
scheduler_	.\include\asio\detail\dev_poll_reactor.hpp	/^  scheduler& scheduler_;$/;"	m	class:asio::detail::dev_poll_reactor
scheduler_	.\include\asio\detail\epoll_reactor.hpp	/^  scheduler& scheduler_;$/;"	m	class:asio::detail::epoll_reactor
scheduler_	.\include\asio\detail\kqueue_reactor.hpp	/^  scheduler& scheduler_;$/;"	m	class:asio::detail::kqueue_reactor
scheduler_	.\include\asio\detail\select_reactor.hpp	/^  scheduler_type& scheduler_;$/;"	m	class:asio::detail::select_reactor
scheduler_	.\include\asio\system_context.hpp	/^  detail::scheduler& scheduler_;$/;"	m	class:asio::system_context
scheduler_	.\include\asio\thread_pool.hpp	/^  detail::scheduler& scheduler_;$/;"	m	class:asio::thread_pool
scheduler_operation	.\include\asio\detail\scheduler_operation.hpp	/^  scheduler_operation(func_type func)$/;"	f	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
scheduler_thread_info	.\include\asio\detail\scheduler_thread_info.hpp	/^struct scheduler_thread_info : public thread_info_base$/;"	s	namespace:asio::detail
scheduler_type	.\include\asio\detail\select_reactor.hpp	/^  typedef class scheduler scheduler_type;$/;"	t	class:asio::detail::select_reactor	typeref:class:asio::detail::select_reactor::scheduler
scheduler_type	.\include\asio\detail\select_reactor.hpp	/^  typedef class win_iocp_io_context scheduler_type;$/;"	t	class:asio::detail::select_reactor	typeref:class:asio::detail::select_reactor::win_iocp_io_context
scope_id	.\include\asio\ip\address_v6.hpp	/^  unsigned long scope_id() const$/;"	f	class:asio::ip::address_v6
scope_id	.\include\asio\ip\address_v6.hpp	/^  void scope_id(unsigned long id)$/;"	f	class:asio::ip::address_v6
scope_id_	.\include\asio\ip\address_v6.hpp	/^  unsigned long scope_id_;$/;"	m	class:asio::ip::address_v6
scoped_lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    explicit scoped_lock(conditionally_enabled_mutex& m)$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
scoped_lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    scoped_lock(conditionally_enabled_mutex& m, adopt_lock_t)$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
scoped_lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  class scoped_lock$/;"	c	class:asio::detail::conditionally_enabled_mutex
scoped_lock	.\include\asio\detail\null_mutex.hpp	/^  typedef asio::detail::scoped_lock<null_mutex> scoped_lock;$/;"	t	class:asio::detail::null_mutex
scoped_lock	.\include\asio\detail\null_static_mutex.hpp	/^  typedef asio::detail::scoped_lock<null_static_mutex> scoped_lock;$/;"	t	struct:asio::detail::null_static_mutex
scoped_lock	.\include\asio\detail\posix_mutex.hpp	/^  typedef asio::detail::scoped_lock<posix_mutex> scoped_lock;$/;"	t	class:asio::detail::posix_mutex
scoped_lock	.\include\asio\detail\posix_static_mutex.hpp	/^  typedef asio::detail::scoped_lock<posix_static_mutex> scoped_lock;$/;"	t	struct:asio::detail::posix_static_mutex
scoped_lock	.\include\asio\detail\scoped_lock.hpp	/^  explicit scoped_lock(Mutex& m)$/;"	f	class:asio::detail::scoped_lock
scoped_lock	.\include\asio\detail\scoped_lock.hpp	/^  scoped_lock(Mutex& m, adopt_lock_t)$/;"	f	class:asio::detail::scoped_lock
scoped_lock	.\include\asio\detail\scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:asio::detail
scoped_lock	.\include\asio\detail\std_mutex.hpp	/^  typedef asio::detail::scoped_lock<std_mutex> scoped_lock;$/;"	t	class:asio::detail::std_mutex
scoped_lock	.\include\asio\detail\std_static_mutex.hpp	/^  typedef asio::detail::scoped_lock<std_static_mutex> scoped_lock;$/;"	t	class:asio::detail::std_static_mutex
scoped_lock	.\include\asio\detail\win_mutex.hpp	/^  typedef asio::detail::scoped_lock<win_mutex> scoped_lock;$/;"	t	class:asio::detail::win_mutex
scoped_lock	.\include\asio\detail\win_static_mutex.hpp	/^  typedef asio::detail::scoped_lock<win_static_mutex> scoped_lock;$/;"	t	struct:asio::detail::win_static_mutex
scoped_ptr	.\include\asio\detail\scoped_ptr.hpp	/^  explicit scoped_ptr(T* p = 0)$/;"	f	class:asio::detail::scoped_ptr
scoped_ptr	.\include\asio\detail\scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:asio::detail
search_position_	.\include\asio\impl\read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:asio::detail::read_until_delim_op
search_position_	.\include\asio\impl\read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:asio::detail::read_until_delim_string_op
search_position_	.\include\asio\impl\read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:asio::detail::read_until_expr_op
search_position_	.\include\asio\impl\read_until.hpp	/^    std::size_t search_position_;$/;"	m	class:asio::detail::read_until_match_op
second_argument_type	.\include\asio\bind_executor.hpp	/^  typedef A2 second_argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_type
second_argument_type	.\include\asio\bind_executor.hpp	/^  typedef see_below second_argument_type;$/;"	t	class:asio::executor_binder
second_argument_type	.\include\asio\bind_executor.hpp	/^  typedef typename T::second_argument_type second_argument_type;$/;"	t	struct:asio::detail::executor_binder_argument_types
select_interrupter	.\include\asio\detail\select_interrupter.hpp	/^typedef socket_select_interrupter select_interrupter;$/;"	t	namespace:asio::detail
select_reactor	.\include\asio\detail\select_reactor.hpp	/^class select_reactor$/;"	c	namespace:asio::detail
send	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:asio::basic_datagram_socket
send	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
send	.\include\asio\basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:asio::basic_raw_socket
send	.\include\asio\basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
send	.\include\asio\basic_seq_packet_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_seq_packet_socket
send	.\include\asio\basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:asio::basic_stream_socket
send	.\include\asio\basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
send	.\include\asio\datagram_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
send	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t send(implementation_type&, const ConstBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
send	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t send(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
send	.\include\asio\detail\reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service_base
send	.\include\asio\detail\reactive_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
send	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service_base
send	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  size_t send(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
send	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  std::size_t send(base_implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service_base
send	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  std::size_t send(base_implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
send	.\include\asio\raw_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
send	.\include\asio\seq_packet_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
send	.\include\asio\stream_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
send_break	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID send_break(asio::error_code& ec)$/;"	f	class:asio::basic_serial_port
send_break	.\include\asio\basic_serial_port.hpp	/^  void send_break()$/;"	f	class:asio::basic_serial_port
send_break	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code send_break(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
send_break	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code send_break(implementation_type&,$/;"	f	class:asio::detail::win_iocp_serial_port_service
send_break	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID send_break(implementation_type& impl,$/;"	f	class:asio::serial_port_service
send_buffer_size	.\include\asio\socket_base.hpp	/^      send_buffer_size;$/;"	t	class:asio::socket_base
send_buffer_size	.\include\asio\socket_base.hpp	/^  typedef implementation_defined send_buffer_size;$/;"	t	class:asio::socket_base
send_data	.\source\udp_channel.cpp	/^void udp_channel::send_data(std::string msg)$/;"	f	class:udp_channel
send_data_s1	.\source\c_binding.cpp	/^void send_data_s1(char* sensor_name, float timestamp, float x)$/;"	f
send_data_s3	.\source\c_binding.cpp	/^void send_data_s3(char* sensor_name, float timestamp, float x, float y, float z)$/;"	f
send_low_watermark	.\include\asio\socket_base.hpp	/^      send_low_watermark;$/;"	t	class:asio::socket_base
send_low_watermark	.\include\asio\socket_base.hpp	/^  typedef implementation_defined send_low_watermark;$/;"	t	class:asio::socket_base
send_state	.\include\global_types.hpp	/^	send_state,$/;"	e	enum:udp_states
send_to	.\include\asio\basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_datagram_socket
send_to	.\include\asio\basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_raw_socket
send_to	.\include\asio\datagram_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
send_to	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t send_to(implementation_type&, const ConstBufferSequence&,$/;"	f	class:asio::detail::null_socket_service
send_to	.\include\asio\detail\null_socket_service.hpp	/^  std::size_t send_to(implementation_type&, const null_buffers&,$/;"	f	class:asio::detail::null_socket_service
send_to	.\include\asio\detail\reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:asio::detail::reactive_socket_service
send_to	.\include\asio\detail\reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::reactive_socket_service
send_to	.\include\asio\detail\win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:asio::detail::win_iocp_socket_service
send_to	.\include\asio\detail\win_iocp_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	class:asio::detail::win_iocp_socket_service
send_to	.\include\asio\raw_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
sender_endpoint_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  Endpoint& sender_endpoint_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op_base
sensor_name	.\include\global_types.hpp	/^	char* sensor_name;$/;"	m	struct:board_msg_t
sensor_name	.\include\global_types.hpp	/^    std::string sensor_name;$/;"	m	struct:msg_t
sensor_name	.\source\udp_server.h	/^	char* sensor_name;$/;"	m	struct:board_msg_t
sensor_name	.\test\udp_server.h	/^	char* sensor_name;$/;"	m	struct:board_msg_t
seq_packet_protocol	.\include\asio\generic\seq_packet_protocol.hpp	/^  seq_packet_protocol(const Protocol& source_protocol)$/;"	f	class:asio::generic::seq_packet_protocol
seq_packet_protocol	.\include\asio\generic\seq_packet_protocol.hpp	/^  seq_packet_protocol(int address_family, int socket_protocol)$/;"	f	class:asio::generic::seq_packet_protocol
seq_packet_protocol	.\include\asio\generic\seq_packet_protocol.hpp	/^class seq_packet_protocol$/;"	c	namespace:asio::generic
seq_packet_socket_service	.\include\asio\seq_packet_socket_service.hpp	/^  explicit seq_packet_socket_service(asio::io_context& io_context)$/;"	f	class:asio::seq_packet_socket_service
seq_packet_socket_service	.\include\asio\seq_packet_socket_service.hpp	/^class seq_packet_socket_service$/;"	c	namespace:asio
serial_port	.\include\asio\serial_port.hpp	/^typedef basic_serial_port<> serial_port;$/;"	t	namespace:asio
serial_port_base	.\include\asio\serial_port_base.hpp	/^class serial_port_base$/;"	c	namespace:asio
serial_port_service	.\include\asio\serial_port_service.hpp	/^  explicit serial_port_service(asio::io_context& io_context)$/;"	f	class:asio::serial_port_service
serial_port_service	.\include\asio\serial_port_service.hpp	/^class serial_port_service$/;"	c	namespace:asio
server	.\include\asio\ssl\stream_base.hpp	/^    server$/;"	e	enum:asio::ssl::stream_base::handshake_type
server_inited	.\include\udp_if.hpp	/^	atomic_bool server_inited;$/;"	m	class:udp_if
service	.\include\asio\execution_context.hpp	/^class execution_context::service$/;"	c	class:asio::execution_context
service	.\include\asio\io_context.hpp	/^class io_context::service$/;"	c	class:asio::io_context
service_	.\include\asio\basic_io_object.hpp	/^  IoObjectService* service_;$/;"	m	class:asio::basic_io_object
service_	.\include\asio\basic_io_object.hpp	/^  service_type& service_;$/;"	m	class:asio::basic_io_object
service_	.\include\asio\detail\strand_executor_service.hpp	/^    strand_executor_service* service_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
service_	.\include\asio\io_context_strand.hpp	/^  asio::detail::strand_service& service_;$/;"	m	class:asio::io_context::strand
service_already_exists	.\include\asio\execution_context.hpp	/^class service_already_exists$/;"	c	namespace:asio
service_base	.\include\asio\io_context.hpp	/^  service_base(asio::io_context& io_context)$/;"	f	class:asio::detail::service_base
service_base	.\include\asio\io_context.hpp	/^class service_base$/;"	c	namespace:asio::detail
service_has_move	.\include\asio\basic_io_object.hpp	/^  class service_has_move$/;"	c	namespace:asio::detail
service_id	.\include\asio\execution_context.hpp	/^class service_id$/;"	c	namespace:asio::detail
service_impl_	.\include\asio\datagram_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::datagram_socket_service
service_impl_	.\include\asio\deadline_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::deadline_timer_service
service_impl_	.\include\asio\ip\resolver_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::ip::resolver_service
service_impl_	.\include\asio\posix\stream_descriptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::posix::stream_descriptor_service
service_impl_	.\include\asio\raw_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::raw_socket_service
service_impl_	.\include\asio\seq_packet_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::seq_packet_socket_service
service_impl_	.\include\asio\serial_port_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::serial_port_service
service_impl_	.\include\asio\signal_set_service.hpp	/^  detail::signal_set_service service_impl_;$/;"	m	class:asio::signal_set_service
service_impl_	.\include\asio\socket_acceptor_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::socket_acceptor_service
service_impl_	.\include\asio\stream_socket_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::stream_socket_service
service_impl_	.\include\asio\waitable_timer_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::waitable_timer_service
service_impl_	.\include\asio\windows\object_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::windows::object_handle_service
service_impl_	.\include\asio\windows\random_access_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::windows::random_access_handle_service
service_impl_	.\include\asio\windows\stream_handle_service.hpp	/^  service_impl_type service_impl_;$/;"	m	class:asio::windows::stream_handle_service
service_impl_type	.\include\asio\datagram_socket_service.hpp	/^  typedef detail::null_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::datagram_socket_service
service_impl_type	.\include\asio\datagram_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::datagram_socket_service
service_impl_type	.\include\asio\datagram_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::datagram_socket_service
service_impl_type	.\include\asio\deadline_timer_service.hpp	/^  typedef detail::deadline_timer_service<traits_type> service_impl_type;$/;"	t	class:asio::deadline_timer_service
service_impl_type	.\include\asio\ip\resolver_service.hpp	/^    service_impl_type;$/;"	t	class:asio::ip::resolver_service
service_impl_type	.\include\asio\posix\stream_descriptor_service.hpp	/^  typedef detail::reactive_descriptor_service service_impl_type;$/;"	t	class:asio::posix::stream_descriptor_service
service_impl_type	.\include\asio\raw_socket_service.hpp	/^  typedef detail::null_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::raw_socket_service
service_impl_type	.\include\asio\raw_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::raw_socket_service
service_impl_type	.\include\asio\raw_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::raw_socket_service
service_impl_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef detail::null_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::seq_packet_socket_service
service_impl_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::seq_packet_socket_service
service_impl_type	.\include\asio\seq_packet_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::seq_packet_socket_service
service_impl_type	.\include\asio\serial_port_service.hpp	/^  typedef detail::reactive_serial_port_service service_impl_type;$/;"	t	class:asio::serial_port_service
service_impl_type	.\include\asio\serial_port_service.hpp	/^  typedef detail::win_iocp_serial_port_service service_impl_type;$/;"	t	class:asio::serial_port_service
service_impl_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef detail::null_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::socket_acceptor_service
service_impl_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::socket_acceptor_service
service_impl_type	.\include\asio\socket_acceptor_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::socket_acceptor_service
service_impl_type	.\include\asio\stream_socket_service.hpp	/^  typedef detail::reactive_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::stream_socket_service
service_impl_type	.\include\asio\stream_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:asio::stream_socket_service
service_impl_type	.\include\asio\stream_socket_service.hpp	/^  typedef detail::winrt_ssocket_service<Protocol> service_impl_type;$/;"	t	class:asio::stream_socket_service
service_impl_type	.\include\asio\waitable_timer_service.hpp	/^    detail::chrono_time_traits<Clock, WaitTraits> > service_impl_type;$/;"	t	class:asio::waitable_timer_service
service_impl_type	.\include\asio\windows\object_handle_service.hpp	/^  typedef detail::win_object_handle_service service_impl_type;$/;"	t	class:asio::windows::object_handle_service
service_impl_type	.\include\asio\windows\random_access_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:asio::windows::random_access_handle_service
service_impl_type	.\include\asio\windows\stream_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:asio::windows::stream_handle_service
service_name	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::basic_string<char, std::char_traits<char>, Allocator> service_name($/;"	f	class:asio::ip::basic_resolver_entry
service_name	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::string service_name() const$/;"	f	class:asio::ip::basic_resolver_entry
service_name	.\include\asio\ip\basic_resolver_query.hpp	/^  std::string service_name() const$/;"	f	class:asio::ip::basic_resolver_query
service_name_	.\include\asio\ip\basic_resolver_entry.hpp	/^  std::string service_name_;$/;"	m	class:asio::ip::basic_resolver_entry
service_name_	.\include\asio\ip\basic_resolver_query.hpp	/^  std::string service_name_;$/;"	m	class:asio::ip::basic_resolver_query
service_not_found	.\include\asio\error.hpp	/^  service_not_found = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::addrinfo_errors
service_registry	.\include\asio\detail\service_registry.hpp	/^class service_registry$/;"	c	namespace:asio::detail
service_registry_	.\include\asio\execution_context.hpp	/^  asio::detail::service_registry* service_registry_;$/;"	m	class:asio::execution_context
service_type	.\include\asio\basic_io_object.hpp	/^    typedef IoObjectService service_type;$/;"	t	class:asio::detail::service_has_move
service_type	.\include\asio\basic_io_object.hpp	/^  typedef IoObjectService service_type;$/;"	t	class:asio::basic_io_object
set	.\include\asio\detail\io_control.hpp	/^  void set(std::size_t value)$/;"	f	class:asio::detail::io_control::bytes_readable
set	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:asio::detail::posix_fd_set_adapter
set	.\include\asio\detail\posix_fd_set_adapter.hpp	/^  void set(reactor_op_queue<socket_type>& operations, op_queue<operation>& ops)$/;"	f	class:asio::detail::posix_fd_set_adapter
set	.\include\asio\detail\win_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:asio::detail::win_fd_set_adapter
set	.\include\asio\detail\win_fd_set_adapter.hpp	/^  void set(reactor_op_queue<socket_type>& operations, op_queue<operation>&)$/;"	f	class:asio::detail::win_fd_set_adapter
setBoardHandler	.\source\udp_if.cpp	/^void udp_if::setBoardHandler(void (*f)(board_msg_t*))$/;"	f	class:udp_if
set_board_handler	.\source\c_binding.cpp	/^void set_board_handler(void (*f)(board_msg_t*))$/;"	f
set_except	.\include\asio\experimental\impl\co_spawn.hpp	/^  void set_except(std::exception_ptr e)$/;"	f	class:asio::experimental::detail::awaitee_base
set_executor	.\include\asio\experimental\impl\co_spawn.hpp	/^  void set_executor(const Executor& ex)$/;"	f	class:asio::experimental::detail::awaiter
set_false	.\include\global_types.hpp	/^	void set_false()$/;"	f	class:atomic_bool
set_option	.\include\asio\basic_serial_port.hpp	/^  ASIO_SYNC_OP_VOID set_option(const SettableSerialPortOption& option,$/;"	f	class:asio::basic_serial_port
set_option	.\include\asio\basic_serial_port.hpp	/^  void set_option(const SettableSerialPortOption& option)$/;"	f	class:asio::basic_serial_port
set_option	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID set_option(const SettableSocketOption& option,$/;"	f	class:asio::basic_socket
set_option	.\include\asio\basic_socket.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:asio::basic_socket
set_option	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID set_option(const SettableSocketOption& option,$/;"	f	class:asio::basic_socket_acceptor
set_option	.\include\asio\basic_socket_acceptor.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:asio::basic_socket_acceptor
set_option	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
set_option	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code set_option(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
set_option	.\include\asio\detail\reactive_serial_port_service.hpp	/^  asio::error_code set_option(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
set_option	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code set_option(implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
set_option	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  asio::error_code set_option(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
set_option	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code set_option(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
set_option	.\include\asio\detail\winrt_ssocket_service.hpp	/^  asio::error_code set_option(implementation_type& impl,$/;"	f	class:asio::detail::winrt_ssocket_service
set_option	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
set_option	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
set_option	.\include\asio\serial_port_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::serial_port_service
set_option	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
set_option	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID set_option(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
set_password_callback	.\include\asio\ssl\impl\context.hpp	/^ASIO_SYNC_OP_VOID context::set_password_callback($/;"	f	class:asio::ssl::context
set_password_callback	.\include\asio\ssl\impl\context.hpp	/^void context::set_password_callback(PasswordCallback callback)$/;"	f	class:asio::ssl::context
set_ready_events	.\include\asio\detail\epoll_reactor.hpp	/^    void set_ready_events(uint32_t events) { task_result_ = events; }$/;"	f	class:asio::detail::epoll_reactor::descriptor_state
set_terminate_threads	.\include\asio\detail\win_thread.hpp	/^  static void set_terminate_threads(bool b)$/;"	f	class:asio::detail::win_thread_base
set_true	.\include\global_types.hpp	/^	void set_true()$/;"	f	class:atomic_bool
set_verify_callback	.\include\asio\ssl\impl\context.hpp	/^ASIO_SYNC_OP_VOID context::set_verify_callback($/;"	f	class:asio::ssl::context
set_verify_callback	.\include\asio\ssl\impl\context.hpp	/^void context::set_verify_callback(VerifyCallback callback)$/;"	f	class:asio::ssl::context
set_verify_callback	.\include\asio\ssl\stream.hpp	/^  ASIO_SYNC_OP_VOID set_verify_callback(VerifyCallback callback,$/;"	f	class:asio::ssl::stream
set_verify_callback	.\include\asio\ssl\stream.hpp	/^  void set_verify_callback(VerifyCallback callback)$/;"	f	class:asio::ssl::stream
set_verify_depth	.\include\asio\ssl\stream.hpp	/^  ASIO_SYNC_OP_VOID set_verify_depth($/;"	f	class:asio::ssl::stream
set_verify_depth	.\include\asio\ssl\stream.hpp	/^  void set_verify_depth(int depth)$/;"	f	class:asio::ssl::stream
set_verify_mode	.\include\asio\ssl\stream.hpp	/^  ASIO_SYNC_OP_VOID set_verify_mode($/;"	f	class:asio::ssl::stream
set_verify_mode	.\include\asio\ssl\stream.hpp	/^  void set_verify_mode(verify_mode v)$/;"	f	class:asio::ssl::stream
setbuf	.\include\asio\basic_socket_streambuf.hpp	/^  std::streambuf* setbuf(char_type* s, std::streamsize n)$/;"	f	class:asio::basic_socket_streambuf
shared_cancel_token_type	.\include\asio\detail\socket_ops.hpp	/^typedef shared_ptr<void> shared_cancel_token_type;$/;"	t	namespace:asio::detail::socket_ops
shut_down	.\include\asio\error.hpp	/^  shut_down = ASIO_SOCKET_ERROR(ESHUTDOWN),$/;"	e	enum:asio::error::basic_errors
shutdown	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID shutdown(shutdown_type what,$/;"	f	class:asio::basic_socket
shutdown	.\include\asio\basic_socket.hpp	/^  void shutdown(shutdown_type what)$/;"	f	class:asio::basic_socket
shutdown	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID shutdown(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
shutdown	.\include\asio\datagram_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::datagram_socket_service
shutdown	.\include\asio\deadline_timer_service.hpp	/^  void shutdown()$/;"	f	class:asio::deadline_timer_service
shutdown	.\include\asio\detail\deadline_timer_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::deadline_timer_service
shutdown	.\include\asio\detail\null_reactor.hpp	/^  void shutdown()$/;"	f	class:asio::detail::null_reactor
shutdown	.\include\asio\detail\null_socket_service.hpp	/^  asio::error_code shutdown(implementation_type&,$/;"	f	class:asio::detail::null_socket_service
shutdown	.\include\asio\detail\null_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::null_socket_service
shutdown	.\include\asio\detail\reactive_socket_service.hpp	/^  asio::error_code shutdown(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service
shutdown	.\include\asio\detail\reactive_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::reactive_socket_service
shutdown	.\include\asio\detail\resolver_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::resolver_service
shutdown	.\include\asio\detail\win_iocp_socket_service.hpp	/^  asio::error_code shutdown(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service
shutdown	.\include\asio\detail\win_iocp_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::win_iocp_socket_service
shutdown	.\include\asio\detail\winrt_async_manager.hpp	/^  void shutdown()$/;"	f	class:asio::detail::winrt_async_manager
shutdown	.\include\asio\detail\winrt_resolver_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::winrt_resolver_service
shutdown	.\include\asio\detail\winrt_ssocket_service.hpp	/^  void shutdown()$/;"	f	class:asio::detail::winrt_ssocket_service
shutdown	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^  asio::error_code shutdown(base_implementation_type&,$/;"	f	class:asio::detail::winrt_ssocket_service_base
shutdown	.\include\asio\ip\resolver_service.hpp	/^  void shutdown()$/;"	f	class:asio::ip::resolver_service
shutdown	.\include\asio\posix\stream_descriptor_service.hpp	/^  void shutdown()$/;"	f	class:asio::posix::stream_descriptor_service
shutdown	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID shutdown(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
shutdown	.\include\asio\raw_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::raw_socket_service
shutdown	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID shutdown(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
shutdown	.\include\asio\seq_packet_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::seq_packet_socket_service
shutdown	.\include\asio\serial_port_service.hpp	/^  void shutdown()$/;"	f	class:asio::serial_port_service
shutdown	.\include\asio\signal_set_service.hpp	/^  void shutdown()$/;"	f	class:asio::signal_set_service
shutdown	.\include\asio\socket_acceptor_service.hpp	/^  void shutdown()$/;"	f	class:asio::socket_acceptor_service
shutdown	.\include\asio\ssl\stream.hpp	/^  ASIO_SYNC_OP_VOID shutdown(asio::error_code& ec)$/;"	f	class:asio::ssl::stream
shutdown	.\include\asio\ssl\stream.hpp	/^  void shutdown()$/;"	f	class:asio::ssl::stream
shutdown	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID shutdown(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
shutdown	.\include\asio\stream_socket_service.hpp	/^  void shutdown()$/;"	f	class:asio::stream_socket_service
shutdown	.\include\asio\waitable_timer_service.hpp	/^  void shutdown()$/;"	f	class:asio::waitable_timer_service
shutdown	.\include\asio\windows\object_handle_service.hpp	/^  void shutdown()$/;"	f	class:asio::windows::object_handle_service
shutdown	.\include\asio\windows\random_access_handle_service.hpp	/^  void shutdown()$/;"	f	class:asio::windows::random_access_handle_service
shutdown	.\include\asio\windows\stream_handle_service.hpp	/^  void shutdown()$/;"	f	class:asio::windows::stream_handle_service
shutdown_	.\include\asio\detail\dev_poll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::dev_poll_reactor
shutdown_	.\include\asio\detail\epoll_reactor.hpp	/^    bool shutdown_;$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
shutdown_	.\include\asio\detail\epoll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::epoll_reactor
shutdown_	.\include\asio\detail\kqueue_reactor.hpp	/^    bool shutdown_;$/;"	m	struct:asio::detail::kqueue_reactor::descriptor_state
shutdown_	.\include\asio\detail\kqueue_reactor.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::kqueue_reactor
shutdown_	.\include\asio\detail\scheduler.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::scheduler
shutdown_	.\include\asio\detail\select_reactor.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::select_reactor
shutdown_	.\include\asio\detail\strand_executor_service.hpp	/^    bool shutdown_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
shutdown_	.\include\asio\detail\win_iocp_io_context.hpp	/^  long shutdown_;$/;"	m	class:asio::detail::win_iocp_io_context
shutdown_	.\include\asio\detail\win_object_handle_service.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::win_object_handle_service
shutdown_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  bool shutdown_;$/;"	m	class:asio::detail::winrt_timer_scheduler
shutdown_both	.\include\asio\socket_base.hpp	/^    shutdown_both = implementation_defined$/;"	e	enum:asio::socket_base::shutdown_type
shutdown_op	.\include\asio\ssl\detail\shutdown_op.hpp	/^class shutdown_op$/;"	c	namespace:asio::ssl::detail
shutdown_receive	.\include\asio\socket_base.hpp	/^    shutdown_receive = implementation_defined,$/;"	e	enum:asio::socket_base::shutdown_type
shutdown_send	.\include\asio\socket_base.hpp	/^    shutdown_send = implementation_defined,$/;"	e	enum:asio::socket_base::shutdown_type
shutdown_type	.\include\asio\socket_base.hpp	/^  enum shutdown_type$/;"	g	class:asio::socket_base
shuttle_id	.\include\board_if.hpp	/^	unsigned shuttle_id;$/;"	m	class:board_if
shuttle_id	.\include\global_types.hpp	/^	unsigned shuttle_id;$/;"	m	class:messages
shuttle_id	.\include\udp_if.hpp	/^	unsigned shuttle_id;$/;"	m	class:udp_if
signal	.\include\asio\detail\conditionally_enabled_event.hpp	/^  void signal(conditionally_enabled_mutex::scoped_lock& lock)$/;"	f	class:asio::detail::conditionally_enabled_event
signal	.\include\asio\detail\null_event.hpp	/^  void signal(Lock&)$/;"	f	class:asio::detail::null_event
signal	.\include\asio\detail\posix_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:asio::detail::posix_event
signal	.\include\asio\detail\std_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:asio::detail::std_event
signal	.\include\asio\detail\win_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:asio::detail::win_event
signal_all	.\include\asio\detail\conditionally_enabled_event.hpp	/^  void signal_all(conditionally_enabled_mutex::scoped_lock& lock)$/;"	f	class:asio::detail::conditionally_enabled_event
signal_all	.\include\asio\detail\null_event.hpp	/^  void signal_all(Lock&)$/;"	f	class:asio::detail::null_event
signal_all	.\include\asio\detail\posix_event.hpp	/^  void signal_all(Lock& lock)$/;"	f	class:asio::detail::posix_event
signal_all	.\include\asio\detail\std_event.hpp	/^  void signal_all(Lock& lock)$/;"	f	class:asio::detail::std_event
signal_all	.\include\asio\detail\win_event.hpp	/^  void signal_all(Lock& lock)$/;"	f	class:asio::detail::win_event
signal_blocker	.\include\asio\detail\signal_blocker.hpp	/^typedef null_signal_blocker signal_blocker;$/;"	t	namespace:asio::detail
signal_handler	.\include\asio\detail\signal_handler.hpp	/^  signal_handler(Handler& h)$/;"	f	class:asio::detail::signal_handler
signal_handler	.\include\asio\detail\signal_handler.hpp	/^class signal_handler : public signal_op$/;"	c	namespace:asio::detail
signal_init	.\include\asio\detail\signal_init.hpp	/^  signal_init()$/;"	f	class:asio::detail::signal_init
signal_init	.\include\asio\detail\signal_init.hpp	/^class signal_init$/;"	c	namespace:asio::detail
signal_number	.\include\asio\placeholders.hpp	/^unspecified signal_number;$/;"	m	namespace:asio::placeholders
signal_number_	.\include\asio\detail\signal_op.hpp	/^  int signal_number_;$/;"	m	class:asio::detail::signal_op
signal_number_	.\include\asio\detail\signal_set_service.hpp	/^    int signal_number_;$/;"	m	class:asio::detail::signal_set_service::registration
signal_op	.\include\asio\detail\signal_op.hpp	/^  signal_op(func_type func)$/;"	f	class:asio::detail::signal_op
signal_op	.\include\asio\detail\signal_op.hpp	/^class signal_op$/;"	c	namespace:asio::detail
signal_set	.\include\asio\signal_set.hpp	/^typedef basic_signal_set<> signal_set;$/;"	t	namespace:asio
signal_set_service	.\include\asio\detail\signal_set_service.hpp	/^class signal_set_service :$/;"	c	namespace:asio::detail
signal_set_service	.\include\asio\signal_set_service.hpp	/^  explicit signal_set_service(asio::io_context& io_context)$/;"	f	class:asio::signal_set_service
signal_set_service	.\include\asio\signal_set_service.hpp	/^class signal_set_service$/;"	c	namespace:asio
signals_	.\include\asio\detail\signal_set_service.hpp	/^    registration* signals_;$/;"	m	class:asio::detail::signal_set_service::implementation_type
signed_size_type	.\include\asio\detail\socket_types.hpp	/^typedef int signed_size_type;$/;"	t	namespace:asio::detail
sin6_addr	.\include\asio\detail\old_win_sdk_compat.hpp	/^  in6_addr_emulation sin6_addr;$/;"	m	struct:asio::detail::sockaddr_in6_emulation
sin6_addr	.\include\asio\detail\socket_types.hpp	/^  in6_addr_type sin6_addr; u_short_type sin6_port;$/;"	m	struct:asio::detail::sockaddr_in6_type
sin6_family	.\include\asio\detail\old_win_sdk_compat.hpp	/^  short sin6_family;$/;"	m	struct:asio::detail::sockaddr_in6_emulation
sin6_family	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_in6_type { int sin6_family;$/;"	m	struct:asio::detail::sockaddr_in6_type
sin6_flowinfo	.\include\asio\detail\old_win_sdk_compat.hpp	/^  u_long sin6_flowinfo;$/;"	m	struct:asio::detail::sockaddr_in6_emulation
sin6_flowinfo	.\include\asio\detail\socket_types.hpp	/^  u_long_type sin6_flowinfo; u_long_type sin6_scope_id; };$/;"	m	struct:asio::detail::sockaddr_in6_type
sin6_port	.\include\asio\detail\old_win_sdk_compat.hpp	/^  u_short sin6_port;$/;"	m	struct:asio::detail::sockaddr_in6_emulation
sin6_port	.\include\asio\detail\socket_types.hpp	/^  in6_addr_type sin6_addr; u_short_type sin6_port;$/;"	m	struct:asio::detail::sockaddr_in6_type
sin6_scope_id	.\include\asio\detail\old_win_sdk_compat.hpp	/^  u_long sin6_scope_id;$/;"	m	struct:asio::detail::sockaddr_in6_emulation
sin6_scope_id	.\include\asio\detail\socket_types.hpp	/^  u_long_type sin6_flowinfo; u_long_type sin6_scope_id; };$/;"	m	struct:asio::detail::sockaddr_in6_type
sin_addr	.\include\asio\detail\socket_types.hpp	/^  in4_addr_type sin_addr; u_short_type sin_port; };$/;"	m	struct:asio::detail::sockaddr_in4_type
sin_family	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_in4_type { int sin_family;$/;"	m	struct:asio::detail::sockaddr_in4_type
sin_port	.\include\asio\detail\socket_types.hpp	/^  in4_addr_type sin_addr; u_short_type sin_port; };$/;"	m	struct:asio::detail::sockaddr_in4_type
single_dh_use	.\include\asio\ssl\context_base.hpp	/^  static const long single_dh_use = implementation_defined;$/;"	m	class:asio::ssl::context_base
size	.\include\asio\detail\buffered_stream_storage.hpp	/^  size_type size() const$/;"	f	class:asio::detail::buffered_stream_storage
size	.\include\asio\detail\socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:asio::detail::socket_option::boolean
size	.\include\asio\detail\socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:asio::detail::socket_option::integer
size	.\include\asio\detail\socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:asio::detail::socket_option::linger
size	.\include\asio\generic\basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::generic::basic_endpoint
size	.\include\asio\generic\detail\endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::generic::detail::endpoint
size	.\include\asio\ip\basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::ip::basic_endpoint
size	.\include\asio\ip\detail\endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::ip::detail::endpoint
size	.\include\asio\ip\detail\socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
size	.\include\asio\ip\detail\socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
size	.\include\asio\ip\detail\socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::multicast_request
size	.\include\asio\ip\detail\socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:asio::ip::detail::socket_option::network_interface
size	.\include\asio\ip\detail\socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
size	.\include\asio\local\basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::local::basic_endpoint
size	.\include\asio\local\detail\endpoint.hpp	/^  std::size_t size() const$/;"	f	class:asio::local::detail::endpoint
size	.\source\strm_queue.cpp	/^std::size_t strm_queue::size()$/;"	f	class:strm_queue
size_	.\include\asio\buffer.hpp	/^      size_(size)$/;"	f	class:asio::const_buffer
size_	.\include\asio\buffer.hpp	/^      size_(size)$/;"	f	class:asio::mutable_buffer
size_	.\include\asio\buffer.hpp	/^  std::size_t size_;$/;"	m	class:asio::const_buffer
size_	.\include\asio\buffer.hpp	/^  std::size_t size_;$/;"	m	class:asio::dynamic_string_buffer
size_	.\include\asio\buffer.hpp	/^  std::size_t size_;$/;"	m	class:asio::dynamic_vector_buffer
size_	.\include\asio\buffer.hpp	/^  std::size_t size_;$/;"	m	class:asio::mutable_buffer
size_	.\include\asio\completion_condition.hpp	/^  std::size_t size_;$/;"	m	class:asio::detail::transfer_exactly_t
size_	.\include\asio\detail\hash_map.hpp	/^  std::size_t size_;$/;"	m	class:asio::detail::hash_map
size_	.\include\asio\generic\detail\endpoint.hpp	/^  std::size_t size_;$/;"	m	class:asio::generic::detail::endpoint
size_type	.\include\asio\detail\buffered_stream_storage.hpp	/^  typedef std::size_t size_type;$/;"	t	class:asio::detail::buffered_stream_storage
size_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef std::size_t size_type;$/;"	t	class:asio::ip::basic_resolver_results
sockaddr_in4_type	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_in4_type { int sin_family;$/;"	s	namespace:asio::detail
sockaddr_in6_emulation	.\include\asio\detail\old_win_sdk_compat.hpp	/^struct sockaddr_in6_emulation$/;"	s	namespace:asio::detail
sockaddr_in6_type	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_in6_type { int sin6_family;$/;"	s	namespace:asio::detail
sockaddr_storage_alignsize	.\include\asio\detail\old_win_sdk_compat.hpp	/^  sockaddr_storage_alignsize = (sizeof(__int64)), \/\/ Desired alignment.$/;"	e	enum:asio::detail::__anon15
sockaddr_storage_emulation	.\include\asio\detail\old_win_sdk_compat.hpp	/^struct sockaddr_storage_emulation$/;"	s	namespace:asio::detail
sockaddr_storage_maxsize	.\include\asio\detail\old_win_sdk_compat.hpp	/^  sockaddr_storage_maxsize = 128, \/\/ Maximum size.$/;"	e	enum:asio::detail::__anon15
sockaddr_storage_pad1size	.\include\asio\detail\old_win_sdk_compat.hpp	/^  sockaddr_storage_pad1size = (sockaddr_storage_alignsize - sizeof(short)),$/;"	e	enum:asio::detail::__anon15
sockaddr_storage_pad2size	.\include\asio\detail\old_win_sdk_compat.hpp	/^  sockaddr_storage_pad2size = (sockaddr_storage_maxsize -$/;"	e	enum:asio::detail::__anon15
sockaddr_storage_type	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_storage_type { int ss_family;$/;"	s	namespace:asio::detail
socket	.\include\asio\basic_socket_iostream.hpp	/^  basic_socket<Protocol ASIO_SVC_TARG>& socket()$/;"	f	class:asio::basic_socket_iostream
socket	.\include\asio\basic_socket_streambuf.hpp	/^  basic_socket<Protocol ASIO_SVC_TARG>& socket()$/;"	f	class:asio::basic_socket_streambuf
socket	.\include\asio\generic\datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:asio::generic::datagram_protocol
socket	.\include\asio\generic\raw_protocol.hpp	/^  typedef basic_raw_socket<raw_protocol> socket;$/;"	t	class:asio::generic::raw_protocol
socket	.\include\asio\generic\seq_packet_protocol.hpp	/^  typedef basic_seq_packet_socket<seq_packet_protocol> socket;$/;"	t	class:asio::generic::seq_packet_protocol
socket	.\include\asio\generic\stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:asio::generic::stream_protocol
socket	.\include\asio\ip\icmp.hpp	/^  typedef basic_raw_socket<icmp> socket;$/;"	t	class:asio::ip::icmp
socket	.\include\asio\ip\tcp.hpp	/^  typedef basic_stream_socket<tcp> socket;$/;"	t	class:asio::ip::tcp
socket	.\include\asio\ip\udp.hpp	/^  typedef basic_datagram_socket<udp> socket;$/;"	t	class:asio::ip::udp
socket	.\include\asio\local\datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:asio::local::datagram_protocol
socket	.\include\asio\local\stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:asio::local::stream_protocol
socket	.\include\udp_channel.hpp	/^	udp::socket socket;$/;"	m	class:udp_channel
socket_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
socket_	.\include\asio\detail\reactive_socket_connect_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_connect_op_base
socket_	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_recv_op_base
socket_	.\include\asio\detail\reactive_socket_recvfrom_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_recvfrom_op_base
socket_	.\include\asio\detail\reactive_socket_recvmsg_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_recvmsg_op_base
socket_	.\include\asio\detail\reactive_socket_send_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_send_op_base
socket_	.\include\asio\detail\reactive_socket_sendto_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::reactive_socket_sendto_op_base
socket_	.\include\asio\detail\reactive_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:asio::detail::reactive_socket_service_base::base_implementation_type
socket_	.\include\asio\detail\socket_holder.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::socket_holder
socket_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
socket_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
socket_	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  socket_type socket_;$/;"	m	class:asio::detail::win_iocp_socket_connect_op_base
socket_	.\include\asio\detail\win_iocp_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:asio::detail::win_iocp_socket_service::native_handle_type
socket_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    socket_type socket_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
socket_	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^    native_handle_type socket_;$/;"	m	struct:asio::detail::winrt_ssocket_service_base::base_implementation_type
socket_	.\include\asio\impl\connect.hpp	/^    basic_socket<Protocol ASIO_SVC_TARG>& socket_;$/;"	m	class:asio::detail::iterator_connect_op
socket_	.\include\asio\impl\connect.hpp	/^    basic_socket<Protocol ASIO_SVC_TARG>& socket_;$/;"	m	class:asio::detail::range_connect_op
socket_acceptor_service	.\include\asio\socket_acceptor_service.hpp	/^  explicit socket_acceptor_service(asio::io_context& io_context)$/;"	f	class:asio::socket_acceptor_service
socket_acceptor_service	.\include\asio\socket_acceptor_service.hpp	/^class socket_acceptor_service$/;"	c	namespace:asio
socket_addr_type	.\include\asio\detail\socket_types.hpp	/^struct socket_addr_type { int sa_family; };$/;"	s	namespace:asio::detail
socket_base	.\include\asio\socket_base.hpp	/^class socket_base$/;"	c	namespace:asio
socket_errc	.\include\asio\error.hpp	/^namespace socket_errc {$/;"	n	namespace:asio
socket_holder	.\include\asio\detail\socket_holder.hpp	/^  explicit socket_holder(socket_type s)$/;"	f	class:asio::detail::socket_holder
socket_holder	.\include\asio\detail\socket_holder.hpp	/^  socket_holder()$/;"	f	class:asio::detail::socket_holder
socket_holder	.\include\asio\detail\socket_holder.hpp	/^class socket_holder$/;"	c	namespace:asio::detail
socket_iostream_base	.\include\asio\basic_socket_iostream.hpp	/^  socket_iostream_base()$/;"	f	class:asio::detail::socket_iostream_base
socket_iostream_base	.\include\asio\basic_socket_iostream.hpp	/^  socket_iostream_base(basic_stream_socket<Protocol> s)$/;"	f	class:asio::detail::socket_iostream_base
socket_iostream_base	.\include\asio\basic_socket_iostream.hpp	/^  socket_iostream_base(socket_iostream_base&& other)$/;"	f	class:asio::detail::socket_iostream_base
socket_iostream_base	.\include\asio\basic_socket_iostream.hpp	/^class socket_iostream_base$/;"	c	namespace:asio::detail
socket_ops	.\include\asio\detail\socket_ops.hpp	/^namespace socket_ops {$/;"	n	namespace:asio::detail
socket_option	.\include\asio\detail\socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:asio::detail
socket_option	.\include\asio\ip\detail\socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:asio::ip::detail
socket_select_interrupter	.\include\asio\detail\socket_select_interrupter.hpp	/^class socket_select_interrupter$/;"	c	namespace:asio::detail
socket_service_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_service_base& socket_service_;$/;"	m	class:asio::detail::win_iocp_socket_accept_op
socket_service_	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_service_base& socket_service_;$/;"	m	class:asio::detail::win_iocp_socket_move_accept_op
socket_streambuf_buffers	.\include\asio\basic_socket_streambuf.hpp	/^  socket_streambuf_buffers()$/;"	f	class:asio::detail::socket_streambuf_buffers
socket_streambuf_buffers	.\include\asio\basic_socket_streambuf.hpp	/^class socket_streambuf_buffers$/;"	c	namespace:asio::detail
socket_streambuf_io_context	.\include\asio\basic_socket_streambuf.hpp	/^  socket_streambuf_io_context(io_context* ctx)$/;"	f	class:asio::detail::socket_streambuf_io_context
socket_streambuf_io_context	.\include\asio\basic_socket_streambuf.hpp	/^class socket_streambuf_io_context$/;"	c	namespace:asio::detail
socket_type_not_supported	.\include\asio\error.hpp	/^  socket_type_not_supported = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::addrinfo_errors
software	.\include\asio\serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:asio::serial_port_base::flow_control::type
solaris_fenced_block	.\include\asio\detail\solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(full_t)$/;"	f	class:asio::detail::solaris_fenced_block
solaris_fenced_block	.\include\asio\detail\solaris_fenced_block.hpp	/^  explicit solaris_fenced_block(half_t)$/;"	f	class:asio::detail::solaris_fenced_block
solaris_fenced_block	.\include\asio\detail\solaris_fenced_block.hpp	/^class solaris_fenced_block$/;"	c	namespace:asio::detail
spares_	.\include\asio\detail\hash_map.hpp	/^  std::list<value_type> spares_;$/;"	m	class:asio::detail::hash_map
spawn	.\include\asio\impl\spawn.hpp	/^inline void spawn(ExecutionContext& ctx,$/;"	f	namespace:asio
spawn	.\include\asio\impl\spawn.hpp	/^inline void spawn(const Executor& ex,$/;"	f	namespace:asio
spawn	.\include\asio\impl\spawn.hpp	/^inline void spawn(const asio::io_context::strand& s,$/;"	f	namespace:asio
spawn	.\include\asio\impl\spawn.hpp	/^inline void spawn(const strand<Executor>& ex,$/;"	f	namespace:asio
spawn	.\include\asio\impl\spawn.hpp	/^void spawn(basic_yield_context<Handler> ctx,$/;"	f	namespace:asio
spawn_data	.\include\asio\impl\spawn.hpp	/^  struct spawn_data : private noncopyable$/;"	s	namespace:asio::detail
spawn_helper	.\include\asio\impl\spawn.hpp	/^  struct spawn_helper$/;"	s	namespace:asio::detail
ss_bytes	.\include\asio\detail\socket_types.hpp	/^  unsigned char ss_bytes[128 - sizeof(int)]; };$/;"	m	struct:asio::detail::sockaddr_storage_type
ss_family	.\include\asio\detail\old_win_sdk_compat.hpp	/^  short ss_family;$/;"	m	struct:asio::detail::sockaddr_storage_emulation
ss_family	.\include\asio\detail\socket_types.hpp	/^struct sockaddr_storage_type { int ss_family;$/;"	m	struct:asio::detail::sockaddr_storage_type
ssl	.\include\asio\ssl\context.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\context_base.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\engine.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\handshake_op.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\io.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\openssl_init.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\password_callback.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\read_op.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\shutdown_op.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\stream_core.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\verify_callback.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\detail\write_op.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\error.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\impl\context.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\rfc2818_verification.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\stream.hpp	/^    SSL* ssl;$/;"	m	struct:asio::ssl::stream::impl_struct
ssl	.\include\asio\ssl\stream.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\stream_base.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\verify_context.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl	.\include\asio\ssl\verify_mode.hpp	/^namespace ssl {$/;"	n	namespace:asio
ssl_	.\include\asio\ssl\detail\engine.hpp	/^  SSL* ssl_;$/;"	m	class:asio::ssl::detail::engine
ssl_errors	.\include\asio\ssl\error.hpp	/^enum ssl_errors$/;"	g	namespace:asio::error
sslv2	.\include\asio\ssl\context_base.hpp	/^    sslv2,$/;"	e	enum:asio::ssl::context_base::method
sslv23	.\include\asio\ssl\context_base.hpp	/^    sslv23,$/;"	e	enum:asio::ssl::context_base::method
sslv23_client	.\include\asio\ssl\context_base.hpp	/^    sslv23_client,$/;"	e	enum:asio::ssl::context_base::method
sslv23_server	.\include\asio\ssl\context_base.hpp	/^    sslv23_server,$/;"	e	enum:asio::ssl::context_base::method
sslv2_client	.\include\asio\ssl\context_base.hpp	/^    sslv2_client,$/;"	e	enum:asio::ssl::context_base::method
sslv2_server	.\include\asio\ssl\context_base.hpp	/^    sslv2_server,$/;"	e	enum:asio::ssl::context_base::method
sslv3	.\include\asio\ssl\context_base.hpp	/^    sslv3,$/;"	e	enum:asio::ssl::context_base::method
sslv3_client	.\include\asio\ssl\context_base.hpp	/^    sslv3_client,$/;"	e	enum:asio::ssl::context_base::method
sslv3_server	.\include\asio\ssl\context_base.hpp	/^    sslv3_server,$/;"	e	enum:asio::ssl::context_base::method
start_	.\include\asio\impl\connect.hpp	/^    int start_;$/;"	m	class:asio::detail::iterator_connect_op
start_	.\include\asio\impl\connect.hpp	/^    int start_;$/;"	m	class:asio::detail::range_connect_op
start_	.\include\asio\impl\read.hpp	/^    int start_;$/;"	m	class:asio::detail::read_dynbuf_op
start_	.\include\asio\impl\read.hpp	/^    int start_;$/;"	m	class:asio::detail::read_op
start_	.\include\asio\impl\read_at.hpp	/^    int start_;$/;"	m	class:asio::detail::read_at_op
start_	.\include\asio\impl\read_at.hpp	/^    int start_;$/;"	m	class:asio::detail::read_at_streambuf_op
start_	.\include\asio\impl\read_until.hpp	/^    int start_;$/;"	m	class:asio::detail::read_until_delim_op
start_	.\include\asio\impl\read_until.hpp	/^    int start_;$/;"	m	class:asio::detail::read_until_delim_string_op
start_	.\include\asio\impl\read_until.hpp	/^    int start_;$/;"	m	class:asio::detail::read_until_expr_op
start_	.\include\asio\impl\read_until.hpp	/^    int start_;$/;"	m	class:asio::detail::read_until_match_op
start_	.\include\asio\impl\write.hpp	/^    int start_;$/;"	m	class:asio::detail::write_op
start_	.\include\asio\impl\write_at.hpp	/^    int start_;$/;"	m	class:asio::detail::write_at_op
start_	.\include\asio\ssl\detail\io.hpp	/^  int start_;$/;"	m	class:asio::ssl::detail::io_op
start_read_at_buffer_sequence_op	.\include\asio\impl\read_at.hpp	/^  inline void start_read_at_buffer_sequence_op(AsyncRandomAccessReadDevice& d,$/;"	f	namespace:asio::detail
start_read_buffer_sequence_op	.\include\asio\impl\read.hpp	/^  inline void start_read_buffer_sequence_op(AsyncReadStream& stream,$/;"	f	namespace:asio::detail
start_state_machine	.\source\udp_if.cpp	/^void udp_if::start_state_machine()$/;"	f	class:udp_if
start_state_machine_blocking	.\source\udp_if.cpp	/^void udp_if::start_state_machine_blocking()$/;"	f	class:udp_if
start_write_at_buffer_sequence_op	.\include\asio\impl\write_at.hpp	/^  inline void start_write_at_buffer_sequence_op(AsyncRandomAccessWriteDevice& d,$/;"	f	namespace:asio::detail
start_write_buffer_sequence_op	.\include\asio\impl\write.hpp	/^  inline void start_write_buffer_sequence_op(AsyncWriteStream& stream,$/;"	f	namespace:asio::detail
state	.\include\udp_channel.hpp	/^	udp_states state;$/;"	m	class:udp_channel
state_	.\include\asio\detail\posix_event.hpp	/^  std::size_t state_;$/;"	m	class:asio::detail::posix_event
state_	.\include\asio\detail\reactive_descriptor_service.hpp	/^    descriptor_ops::state_type state_;$/;"	m	class:asio::detail::reactive_descriptor_service::implementation_type
state_	.\include\asio\detail\reactive_socket_accept_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:asio::detail::reactive_socket_accept_op_base
state_	.\include\asio\detail\reactive_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:asio::detail::reactive_socket_recv_op_base
state_	.\include\asio\detail\reactive_socket_send_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:asio::detail::reactive_socket_send_op_base
state_	.\include\asio\detail\reactive_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:asio::detail::reactive_socket_service_base::base_implementation_type
state_	.\include\asio\detail\std_event.hpp	/^    std::size_t& state_;$/;"	m	class:asio::detail::std_event::waiter
state_	.\include\asio\detail\std_event.hpp	/^  std::size_t state_;$/;"	m	class:asio::detail::std_event
state_	.\include\asio\detail\win_event.hpp	/^  std::size_t state_;$/;"	m	class:asio::detail::win_event
state_	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  socket_ops::state_type state_;$/;"	m	class:asio::detail::win_iocp_socket_recv_op
state_	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^    socket_ops::state_type state_;$/;"	m	struct:asio::detail::win_iocp_socket_service_base::base_implementation_type
state_type	.\include\asio\detail\descriptor_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:asio::detail::descriptor_ops
state_type	.\include\asio\detail\socket_ops.hpp	/^typedef unsigned char state_type;$/;"	t	namespace:asio::detail::socket_ops
static_mutex	.\include\asio\detail\static_mutex.hpp	/^typedef null_static_mutex static_mutex;$/;"	t	namespace:asio::detail
static_ptr_	.\include\asio\detail\posix_global.hpp	/^  static T* static_ptr_;$/;"	m	struct:asio::detail::posix_global_impl
static_ptr_	.\include\asio\detail\posix_global.hpp	/^T* posix_global_impl<T>::static_ptr_ = 0;$/;"	m	class:asio::detail::posix_global_impl
status	.\include\asio\detail\reactor_op.hpp	/^  enum status { not_done, done, done_and_exhausted };$/;"	g	class:asio::detail::reactor_op
std	.\include\asio\error.hpp	/^namespace std {$/;"	n
std	.\include\asio\experimental\impl\co_spawn.hpp	/^namespace std { namespace experimental {$/;"	n
std	.\include\asio\ssl\error.hpp	/^namespace std {$/;"	n
std_allocator_void	.\include\asio\use_future.hpp	/^    ASIO_CONSTEXPR std_allocator_void()$/;"	f	struct:asio::use_future_t::std_allocator_void
std_allocator_void	.\include\asio\use_future.hpp	/^  struct std_allocator_void$/;"	s	class:asio::use_future_t
std_event	.\include\asio\detail\std_event.hpp	/^  std_event()$/;"	f	class:asio::detail::std_event
std_event	.\include\asio\detail\std_event.hpp	/^class std_event$/;"	c	namespace:asio::detail
std_fenced_block	.\include\asio\detail\std_fenced_block.hpp	/^  explicit std_fenced_block(full_t)$/;"	f	class:asio::detail::std_fenced_block
std_fenced_block	.\include\asio\detail\std_fenced_block.hpp	/^  explicit std_fenced_block(half_t)$/;"	f	class:asio::detail::std_fenced_block
std_fenced_block	.\include\asio\detail\std_fenced_block.hpp	/^class std_fenced_block$/;"	c	namespace:asio::detail
std_global	.\include\asio\detail\std_global.hpp	/^T& std_global()$/;"	f	namespace:asio::detail
std_global_impl	.\include\asio\detail\std_global.hpp	/^struct std_global_impl$/;"	s	namespace:asio::detail
std_mutex	.\include\asio\detail\std_mutex.hpp	/^  std_mutex()$/;"	f	class:asio::detail::std_mutex
std_mutex	.\include\asio\detail\std_mutex.hpp	/^class std_mutex$/;"	c	namespace:asio::detail
std_static_mutex	.\include\asio\detail\std_static_mutex.hpp	/^  std_static_mutex(int)$/;"	f	class:asio::detail::std_static_mutex
std_static_mutex	.\include\asio\detail\std_static_mutex.hpp	/^class std_static_mutex$/;"	c	namespace:asio::detail
std_thread	.\include\asio\detail\std_thread.hpp	/^  std_thread(Function f, unsigned int = 0)$/;"	f	class:asio::detail::std_thread
std_thread	.\include\asio\detail\std_thread.hpp	/^class std_thread$/;"	c	namespace:asio::detail
steady_clock	.\include\asio\detail\chrono.hpp	/^typedef std::chrono::monotonic_clock steady_clock;$/;"	t	namespace:asio::chrono
steady_timer	.\include\asio\steady_timer.hpp	/^typedef basic_waitable_timer<chrono::steady_clock> steady_timer;$/;"	t	namespace:asio
steady_timer	.\include\asio\ts\netfwd.hpp	/^typedef basic_waitable_timer<chrono::steady_clock> steady_timer;$/;"	t	namespace:asio
stop_bits	.\include\asio\serial_port_base.hpp	/^  class stop_bits$/;"	c	class:asio::serial_port_base
stop_event_posted_	.\include\asio\detail\win_iocp_io_context.hpp	/^  long stop_event_posted_;$/;"	m	class:asio::detail::win_iocp_io_context
stop_thread_	.\include\asio\detail\select_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:asio::detail::select_reactor
stop_thread_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  bool stop_thread_;$/;"	m	class:asio::detail::winrt_timer_scheduler
stopped	.\include\asio\detail\win_iocp_io_context.hpp	/^  bool stopped() const$/;"	f	class:asio::detail::win_iocp_io_context
stopped_	.\include\asio\detail\scheduler.hpp	/^  bool stopped_;$/;"	m	class:asio::detail::scheduler
stopped_	.\include\asio\detail\win_iocp_io_context.hpp	/^  mutable long stopped_;$/;"	m	class:asio::detail::win_iocp_io_context
stopped_state	.\include\global_types.hpp	/^	stopped_state$/;"	e	enum:udp_states
storage_	.\include\asio\buffered_read_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:asio::buffered_read_stream
storage_	.\include\asio\buffered_write_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:asio::buffered_write_stream
storage_	.\include\asio\impl\buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:asio::detail::buffered_fill_handler
storage_	.\include\asio\impl\buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:asio::detail::buffered_read_some_handler
storage_	.\include\asio\impl\buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:asio::detail::buffered_flush_handler
storage_	.\include\asio\impl\buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:asio::detail::buffered_write_some_handler
store_function_type	.\include\asio\detail\reactive_serial_port_service.hpp	/^  typedef asio::error_code (*store_function_type)($/;"	t	class:asio::detail::reactive_serial_port_service::asio
store_function_type	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  typedef asio::error_code (*store_function_type)($/;"	t	class:asio::detail::win_iocp_serial_port_service::asio
store_option	.\include\asio\detail\reactive_serial_port_service.hpp	/^  static asio::error_code store_option(const void* option,$/;"	f	class:asio::detail::reactive_serial_port_service
store_option	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  static asio::error_code store_option(const void* option,$/;"	f	class:asio::detail::win_iocp_serial_port_service
strand	.\include\asio\io_context_strand.hpp	/^  explicit strand(asio::io_context& io_context)$/;"	f	class:asio::io_context::strand
strand	.\include\asio\io_context_strand.hpp	/^class io_context::strand$/;"	c	class:asio::io_context
strand	.\include\asio\strand.hpp	/^  explicit strand(const Executor& e)$/;"	f	class:asio::strand
strand	.\include\asio\strand.hpp	/^  strand()$/;"	f	class:asio::strand
strand	.\include\asio\strand.hpp	/^class strand$/;"	c	namespace:asio
strand_executor_service	.\include\asio\detail\strand_executor_service.hpp	/^class strand_executor_service$/;"	c	namespace:asio::detail
strand_impl	.\include\asio\detail\impl\strand_service.hpp	/^inline strand_service::strand_impl::strand_impl()$/;"	f	class:asio::detail::strand_service::strand_impl
strand_impl	.\include\asio\detail\strand_executor_service.hpp	/^  class strand_impl$/;"	c	class:asio::detail::strand_executor_service
strand_impl	.\include\asio\detail\strand_service.hpp	/^  class strand_impl$/;"	c	class:asio::detail::strand_service
strand_service	.\include\asio\detail\strand_service.hpp	/^class strand_service$/;"	c	namespace:asio::detail
stream	.\include\asio\ssl\stream.hpp	/^  stream(Arg& arg, context& ctx)$/;"	f	class:asio::ssl::stream
stream	.\include\asio\ssl\stream.hpp	/^  stream(Arg&& arg, context& ctx)$/;"	f	class:asio::ssl::stream
stream	.\include\asio\ssl\stream.hpp	/^class stream :$/;"	c	namespace:asio::ssl
stream_	.\include\asio\impl\read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_dynbuf_op
stream_	.\include\asio\impl\read.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_op
stream_	.\include\asio\impl\read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_until_delim_op
stream_	.\include\asio\impl\read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_until_delim_string_op
stream_	.\include\asio\impl\read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_until_expr_op
stream_	.\include\asio\impl\read_until.hpp	/^    AsyncReadStream& stream_;$/;"	m	class:asio::detail::read_until_match_op
stream_	.\include\asio\impl\write.hpp	/^    AsyncWriteStream& stream_;$/;"	m	class:asio::detail::write_dynbuf_op
stream_	.\include\asio\impl\write.hpp	/^    AsyncWriteStream& stream_;$/;"	m	class:asio::detail::write_op
stream_base	.\include\asio\ssl\stream_base.hpp	/^class stream_base$/;"	c	namespace:asio::ssl
stream_core	.\include\asio\ssl\detail\stream_core.hpp	/^  stream_core(SSL_CTX* context, asio::io_context& io_context)$/;"	f	struct:asio::ssl::detail::stream_core
stream_core	.\include\asio\ssl\detail\stream_core.hpp	/^struct stream_core$/;"	s	namespace:asio::ssl::detail
stream_descriptor	.\include\asio\posix\stream_descriptor.hpp	/^typedef basic_stream_descriptor<> stream_descriptor;$/;"	t	namespace:asio::posix
stream_descriptor_service	.\include\asio\posix\stream_descriptor_service.hpp	/^  explicit stream_descriptor_service(asio::io_context& io_context)$/;"	f	class:asio::posix::stream_descriptor_service
stream_descriptor_service	.\include\asio\posix\stream_descriptor_service.hpp	/^class stream_descriptor_service$/;"	c	namespace:asio::posix
stream_errc	.\include\asio\error.hpp	/^namespace stream_errc {$/;"	n	namespace:asio
stream_errors	.\include\asio\ssl\error.hpp	/^enum stream_errors$/;"	g	namespace:asio::ssl::error
stream_handle	.\include\asio\windows\stream_handle.hpp	/^typedef basic_stream_handle<> stream_handle;$/;"	t	namespace:asio::windows
stream_handle_service	.\include\asio\windows\stream_handle_service.hpp	/^  explicit stream_handle_service(asio::io_context& io_context)$/;"	f	class:asio::windows::stream_handle_service
stream_handle_service	.\include\asio\windows\stream_handle_service.hpp	/^class stream_handle_service$/;"	c	namespace:asio::windows
stream_impl_	.\include\asio\buffered_stream.hpp	/^  read_stream_type stream_impl_;$/;"	m	class:asio::buffered_stream
stream_oriented	.\include\asio\detail\socket_ops.hpp	/^  stream_oriented = 16,$/;"	e	enum:asio::detail::socket_ops::__anon18
stream_protocol	.\include\asio\generic\stream_protocol.hpp	/^  stream_protocol(const Protocol& source_protocol)$/;"	f	class:asio::generic::stream_protocol
stream_protocol	.\include\asio\generic\stream_protocol.hpp	/^  stream_protocol(int address_family, int socket_protocol)$/;"	f	class:asio::generic::stream_protocol
stream_protocol	.\include\asio\generic\stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:asio::generic
stream_protocol	.\include\asio\local\stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:asio::local
stream_socket_service	.\include\asio\stream_socket_service.hpp	/^  explicit stream_socket_service(asio::io_context& io_context)$/;"	f	class:asio::stream_socket_service
stream_socket_service	.\include\asio\stream_socket_service.hpp	/^class stream_socket_service$/;"	c	namespace:asio
stream_truncated	.\include\asio\ssl\error.hpp	/^  stream_truncated$/;"	e	enum:asio::ssl::error::stream_errors
streambuf	.\include\asio\streambuf.hpp	/^typedef basic_streambuf<> streambuf;$/;"	t	namespace:asio
streambuf_	.\include\asio\basic_socket_iostream.hpp	/^    Clock, WaitTraits ASIO_SVC_TARG1> streambuf_;$/;"	m	class:asio::detail::socket_iostream_base
streambuf_	.\include\asio\impl\read_at.hpp	/^    asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:asio::detail::read_at_streambuf_op
streambuf_	.\include\asio\impl\write_at.hpp	/^    asio::basic_streambuf<Allocator>& streambuf_;$/;"	m	class:asio::detail::write_at_streambuf_op
string	.\include\asio\detail\winrt_utils.hpp	/^inline Platform::String^ string(const T& from)$/;"	f	namespace:asio::detail::winrt_utils
string	.\include\asio\detail\winrt_utils.hpp	/^inline Platform::String^ string(const char* from)$/;"	f	namespace:asio::detail::winrt_utils
string	.\include\asio\detail\winrt_utils.hpp	/^inline Platform::String^ string(const std::string& from)$/;"	f	namespace:asio::detail::winrt_utils
string	.\include\asio\detail\winrt_utils.hpp	/^inline Platform::String^ string(unsigned short from)$/;"	f	namespace:asio::detail::winrt_utils
string_	.\include\asio\buffer.hpp	/^  std::basic_string<Elem, Traits, Allocator>& string_;$/;"	m	class:asio::dynamic_string_buffer
strm_channel	.\include\udp_if.hpp	/^	udp_channel strm_channel;$/;"	m	class:udp_if
strm_data	.\include\udp_if.hpp	/^	strm_queue strm_data;$/;"	m	class:udp_if
strm_enabled	.\include\udp_if.hpp	/^	atomic_bool strm_enabled;$/;"	m	class:udp_if
strm_queue	.\include\strm_queue.hpp	/^class strm_queue$/;"	c
strm_state_machine	.\source\udp_if.cpp	/^void udp_if::strm_state_machine()$/;"	f	class:udp_if
subtract	.\include\asio\detail\chrono_time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:asio::detail::chrono_time_traits
subtract	.\include\asio\time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:asio::time_traits
swap_heap	.\include\asio\detail\timer_queue.hpp	/^  void swap_heap(std::size_t index1, std::size_t index2)$/;"	f	class:asio::detail::timer_queue
sync	.\include\asio\basic_socket_streambuf.hpp	/^  int sync()$/;"	f	class:asio::basic_socket_streambuf
system_context	.\include\asio\system_context.hpp	/^class system_context : public execution_context$/;"	c	namespace:asio
system_error	.\include\asio\system_error.hpp	/^typedef std::system_error system_error;$/;"	t	namespace:asio
system_executor	.\include\asio\system_executor.hpp	/^class system_executor$/;"	c	namespace:asio
system_timer	.\include\asio\system_timer.hpp	/^typedef basic_waitable_timer<chrono::system_clock> system_timer;$/;"	t	namespace:asio
system_timer	.\include\asio\ts\netfwd.hpp	/^typedef basic_waitable_timer<chrono::system_clock> system_timer;$/;"	t	namespace:asio
target_	.\include\asio\bind_executor.hpp	/^  T target_;$/;"	m	class:asio::detail::executor_binder_base
target_	.\include\asio\bind_executor.hpp	/^  async_result<T, Signature> target_;$/;"	m	class:asio::async_result
target_	.\include\asio\bind_executor.hpp	/^  async_result<T> target_;$/;"	m	class:asio::async_result
target_type	.\include\asio\bind_executor.hpp	/^  typedef T target_type;$/;"	t	class:asio::executor_binder
task_	.\include\asio\detail\scheduler.hpp	/^  reactor* task_;$/;"	m	class:asio::detail::scheduler
task_interrupted_	.\include\asio\detail\scheduler.hpp	/^  bool task_interrupted_;$/;"	m	class:asio::detail::scheduler
task_operation	.\include\asio\detail\scheduler.hpp	/^    task_operation() : operation(0) {}$/;"	f	struct:asio::detail::scheduler::task_operation
task_operation	.\include\asio\detail\scheduler.hpp	/^  struct task_operation : operation$/;"	s	class:asio::detail::scheduler
task_operation_	.\include\asio\detail\scheduler.hpp	/^  } task_operation_;$/;"	m	class:asio::detail::scheduler	typeref:struct:asio::detail::scheduler::task_operation
task_result_	.\include\asio\detail\scheduler_operation.hpp	/^  unsigned int task_result_; \/\/ Passed into bytes transferred.$/;"	m	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
tcp	.\include\asio\ip\tcp.hpp	/^  explicit tcp(int protocol_family)$/;"	f	class:asio::ip::tcp
tcp	.\include\asio\ip\tcp.hpp	/^class tcp$/;"	c	namespace:asio::ip
terminate_threads	.\include\asio\detail\win_thread.hpp	/^  static bool terminate_threads()$/;"	f	class:asio::detail::win_thread_base
terminate_threads_	.\include\asio\detail\win_thread.hpp	/^  static long terminate_threads_;$/;"	m	class:asio::detail::win_thread_base
terminate_threads_	.\include\asio\detail\win_thread.hpp	/^long win_thread_base<T>::terminate_threads_ = 0;$/;"	m	class:asio::detail::win_thread_base
test	.\source\udp_parser.cpp	/^void udp_parser::test()$/;"	f	class:udp_parser
this_	.\include\asio\detail\impl\strand_executor_service.hpp	/^    invoker* this_;$/;"	m	struct:asio::detail::strand_executor_service::invoker::on_invoker_exit
this_	.\include\asio\experimental\impl\co_spawn.hpp	/^    awaitee_base* this_;$/;"	m	class:asio::experimental::detail::awaitee_base::awaitable_executor
this_	.\include\asio\experimental\impl\co_spawn.hpp	/^    awaitee_base* this_;$/;"	m	class:asio::experimental::detail::awaitee_base::awaitable_token
this_	.\include\asio\experimental\impl\co_spawn.hpp	/^    awaitee_base* this_;$/;"	m	struct:asio::experimental::detail::awaitee_base::final_suspender
this_coro	.\include\asio\experimental\co_spawn.hpp	/^namespace this_coro {$/;"	n	namespace:asio::experimental
thread	.\include\asio\detail\thread.hpp	/^typedef null_thread thread;$/;"	t	namespace:asio::detail
thread	.\include\asio\thread.hpp	/^  explicit thread(Function f)$/;"	f	class:asio::thread
thread	.\include\asio\thread.hpp	/^class thread$/;"	c	namespace:asio
thread_	.\include\asio\detail\posix_thread.hpp	/^  ::pthread_t thread_;$/;"	m	class:asio::detail::posix_thread
thread_	.\include\asio\detail\select_reactor.hpp	/^  asio::detail::thread* thread_;$/;"	m	class:asio::detail::select_reactor
thread_	.\include\asio\detail\std_thread.hpp	/^  std::thread thread_;$/;"	m	class:asio::detail::std_thread
thread_	.\include\asio\detail\thread_group.hpp	/^    asio::detail::thread thread_;$/;"	m	struct:asio::detail::thread_group::item
thread_	.\include\asio\detail\win_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:asio::detail::win_thread
thread_	.\include\asio\detail\winapp_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:asio::detail::winapp_thread
thread_	.\include\asio\detail\wince_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:asio::detail::wince_thread
thread_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  asio::detail::thread* thread_;$/;"	m	class:asio::detail::winrt_timer_scheduler
thread_call_stack	.\include\asio\detail\thread_context.hpp	/^  typedef call_stack<thread_context, thread_info_base> thread_call_stack;$/;"	t	class:asio::detail::thread_context
thread_context	.\include\asio\detail\thread_context.hpp	/^class thread_context$/;"	c	namespace:asio::detail
thread_group	.\include\asio\detail\thread_group.hpp	/^  thread_group()$/;"	f	class:asio::detail::thread_group
thread_group	.\include\asio\detail\thread_group.hpp	/^class thread_group$/;"	c	namespace:asio::detail
thread_info	.\include\asio\detail\scheduler.hpp	/^  typedef scheduler_thread_info thread_info;$/;"	t	class:asio::detail::scheduler
thread_info_base	.\include\asio\detail\thread_info_base.hpp	/^  thread_info_base()$/;"	f	class:asio::detail::thread_info_base
thread_info_base	.\include\asio\detail\thread_info_base.hpp	/^class thread_info_base$/;"	c	namespace:asio::detail
thread_pool	.\include\asio\thread_pool.hpp	/^class thread_pool$/;"	c	namespace:asio
threads_	.\include\asio\system_context.hpp	/^  detail::thread_group threads_;$/;"	m	class:asio::system_context
threads_	.\include\asio\thread_pool.hpp	/^  detail::thread_group threads_;$/;"	m	class:asio::thread_pool
threshold	.\include\bmi08x_defs.h	/^uint16_t threshold;$/;"	m	struct:bmi08x_anymotion_cfg
throw_error	.\include\asio\detail\throw_error.hpp	/^inline void throw_error(const asio::error_code& err)$/;"	f	namespace:asio::detail
throw_error	.\include\asio\detail\throw_error.hpp	/^inline void throw_error(const asio::error_code& err,$/;"	f	namespace:asio::detail
ticks	.\include\asio\detail\chrono_time_traits.hpp	/^    int64_t ticks() const$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
time_	.\include\asio\detail\timer_queue.hpp	/^    time_type time_;$/;"	m	struct:asio::detail::timer_queue::heap_entry
time_point	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename WaitTraits::time_point time_point;$/;"	t	class:asio::basic_socket_iostream
time_point	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename traits_helper::time_type time_point;$/;"	t	class:asio::basic_socket_iostream
time_point	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename WaitTraits::time_point time_point;$/;"	t	class:asio::basic_socket_streambuf
time_point	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename traits_helper::time_type time_point;$/;"	t	class:asio::basic_socket_streambuf
time_point	.\include\asio\basic_waitable_timer.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:asio::basic_waitable_timer
time_point	.\include\asio\waitable_timer_service.hpp	/^  typedef typename clock_type::time_point time_point;$/;"	t	class:asio::waitable_timer_service
time_traits	.\include\asio\time_traits.hpp	/^struct time_traits<boost::posix_time::ptime>$/;"	s	namespace:asio
time_type	.\include\asio\basic_deadline_timer.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:asio::basic_deadline_timer
time_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename WaitTraits::time_type time_type;$/;"	t	class:asio::basic_socket_iostream
time_type	.\include\asio\basic_socket_iostream.hpp	/^  typedef typename traits_helper::time_type time_type;$/;"	t	class:asio::basic_socket_iostream
time_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename WaitTraits::time_type time_type;$/;"	t	class:asio::basic_socket_streambuf
time_type	.\include\asio\basic_socket_streambuf.hpp	/^  typedef typename traits_helper::time_type time_type;$/;"	t	class:asio::basic_socket_streambuf
time_type	.\include\asio\deadline_timer_service.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:asio::deadline_timer_service
time_type	.\include\asio\detail\chrono_time_traits.hpp	/^  typedef typename clock_type::time_point time_type;$/;"	t	struct:asio::detail::chrono_time_traits
time_type	.\include\asio\detail\deadline_timer_service.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:asio::detail::deadline_timer_service
time_type	.\include\asio\detail\timer_queue.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:asio::detail::timer_queue
time_type	.\include\asio\detail\timer_queue_ptime.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	class:asio::detail::timer_queue
time_type	.\include\asio\time_traits.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	struct:asio::time_traits
timed_out	.\include\asio\error.hpp	/^  timed_out = ASIO_SOCKET_ERROR(ETIMEDOUT),$/;"	e	enum:asio::error::basic_errors
timeout	.\include\asio\basic_socket_streambuf.hpp	/^  int timeout() const$/;"	f	class:asio::basic_socket_streambuf
timer_	.\include\asio\detail\timer_queue.hpp	/^    per_timer_data* timer_;$/;"	m	struct:asio::detail::timer_queue::heap_entry
timer_data	.\include\asio\detail\deadline_timer_service.hpp	/^    typename timer_queue<Time_Traits>::per_timer_data timer_data;$/;"	m	struct:asio::detail::deadline_timer_service::implementation_type
timer_fd_	.\include\asio\detail\epoll_reactor.hpp	/^  int timer_fd_;$/;"	m	class:asio::detail::epoll_reactor
timer_queue	.\include\asio\detail\timer_queue.hpp	/^  timer_queue()$/;"	f	class:asio::detail::timer_queue
timer_queue	.\include\asio\detail\timer_queue.hpp	/^class timer_queue$/;"	c	namespace:asio::detail
timer_queue	.\include\asio\detail\timer_queue_ptime.hpp	/^class timer_queue<time_traits<boost::posix_time::ptime> >$/;"	c	namespace:asio::detail
timer_queue_	.\include\asio\detail\deadline_timer_service.hpp	/^  timer_queue<Time_Traits> timer_queue_;$/;"	m	class:asio::detail::deadline_timer_service
timer_queue_base	.\include\asio\detail\timer_queue_base.hpp	/^  timer_queue_base() : next_(0) {}$/;"	f	class:asio::detail::timer_queue_base
timer_queue_base	.\include\asio\detail\timer_queue_base.hpp	/^class timer_queue_base$/;"	c	namespace:asio::detail
timer_queue_set	.\include\asio\detail\timer_queue_set.hpp	/^class timer_queue_set$/;"	c	namespace:asio::detail
timer_queues_	.\include\asio\detail\dev_poll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::dev_poll_reactor
timer_queues_	.\include\asio\detail\epoll_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::epoll_reactor
timer_queues_	.\include\asio\detail\kqueue_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::kqueue_reactor
timer_queues_	.\include\asio\detail\select_reactor.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::select_reactor
timer_queues_	.\include\asio\detail\win_iocp_io_context.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::win_iocp_io_context
timer_queues_	.\include\asio\detail\winrt_timer_scheduler.hpp	/^  timer_queue_set timer_queues_;$/;"	m	class:asio::detail::winrt_timer_scheduler
timer_scheduler	.\include\asio\detail\timer_scheduler_fwd.hpp	/^typedef class winrt_timer_scheduler timer_scheduler;$/;"	t	namespace:asio::detail	typeref:class:asio::detail::winrt_timer_scheduler
timer_thread_	.\include\asio\detail\win_iocp_io_context.hpp	/^  scoped_ptr<thread> timer_thread_;$/;"	m	class:asio::detail::win_iocp_io_context
timers_	.\include\asio\detail\timer_queue.hpp	/^  per_timer_data* timers_;$/;"	m	class:asio::detail::timer_queue
timestamp	.\include\global_types.hpp	/^	double timestamp;$/;"	m	struct:board_msg_t
timestamp	.\include\global_types.hpp	/^    double timestamp;$/;"	m	struct:msg_t
timestamp	.\source\udp_server.h	/^	double timestamp;$/;"	m	struct:board_msg_t
timestamp	.\test\udp_server.h	/^	double timestamp;$/;"	m	struct:board_msg_t
tls	.\include\asio\ssl\context_base.hpp	/^    tls,$/;"	e	enum:asio::ssl::context_base::method
tls_client	.\include\asio\ssl\context_base.hpp	/^    tls_client,$/;"	e	enum:asio::ssl::context_base::method
tls_server	.\include\asio\ssl\context_base.hpp	/^    tls_server$/;"	e	enum:asio::ssl::context_base::method
tlsv1	.\include\asio\ssl\context_base.hpp	/^    tlsv1,$/;"	e	enum:asio::ssl::context_base::method
tlsv11	.\include\asio\ssl\context_base.hpp	/^    tlsv11,$/;"	e	enum:asio::ssl::context_base::method
tlsv11_client	.\include\asio\ssl\context_base.hpp	/^    tlsv11_client,$/;"	e	enum:asio::ssl::context_base::method
tlsv11_server	.\include\asio\ssl\context_base.hpp	/^    tlsv11_server,$/;"	e	enum:asio::ssl::context_base::method
tlsv12	.\include\asio\ssl\context_base.hpp	/^    tlsv12,$/;"	e	enum:asio::ssl::context_base::method
tlsv12_client	.\include\asio\ssl\context_base.hpp	/^    tlsv12_client,$/;"	e	enum:asio::ssl::context_base::method
tlsv12_server	.\include\asio\ssl\context_base.hpp	/^    tlsv12_server,$/;"	e	enum:asio::ssl::context_base::method
tlsv1_client	.\include\asio\ssl\context_base.hpp	/^    tlsv1_client,$/;"	e	enum:asio::ssl::context_base::method
tlsv1_server	.\include\asio\ssl\context_base.hpp	/^    tlsv1_server,$/;"	e	enum:asio::ssl::context_base::method
to_msec	.\include\asio\detail\timer_queue.hpp	/^  long to_msec(const Duration& d, long max_duration) const$/;"	f	class:asio::detail::timer_queue
to_posix_duration	.\include\asio\detail\chrono_time_traits.hpp	/^  static posix_time_duration to_posix_duration(const duration_type& d)$/;"	f	struct:asio::detail::chrono_time_traits
to_posix_duration	.\include\asio\time_traits.hpp	/^  static boost::posix_time::time_duration to_posix_duration($/;"	f	struct:asio::time_traits
to_usec	.\include\asio\detail\timer_queue.hpp	/^  long to_usec(const Duration& d, long max_duration) const$/;"	f	class:asio::detail::timer_queue
to_wait_duration	.\include\asio\wait_traits.hpp	/^  static typename Clock::duration to_wait_duration($/;"	f	struct:asio::wait_traits
token	.\include\asio\defer.hpp	/^    ASIO_MOVE_ARG(CompletionToken) token);$/;"	m	namespace:asio
token	.\include\asio\dispatch.hpp	/^    ASIO_MOVE_ARG(CompletionToken) token);$/;"	m	namespace:asio
token	.\include\asio\experimental\co_spawn.hpp	/^constexpr inline token_t token() { return {}; }$/;"	f	namespace:asio::experimental::this_coro
token	.\include\asio\post.hpp	/^    ASIO_MOVE_ARG(CompletionToken) token);$/;"	m	namespace:asio
token_	.\include\asio\experimental\redirect_error.hpp	/^  CompletionToken token_;$/;"	m	class:asio::experimental::redirect_error_t
token_t	.\include\asio\experimental\co_spawn.hpp	/^struct token_t {};$/;"	s	namespace:asio::experimental::this_coro
top	.\include\asio\detail\call_stack.hpp	/^  static Value* top()$/;"	f	class:asio::detail::call_stack
top	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaiter<Executor>* top()$/;"	f	class:asio::experimental::detail::awaitee_base
top_	.\include\asio\detail\call_stack.hpp	/^  static tss_ptr<context> top_;$/;"	m	class:asio::detail::call_stack
top_	.\include\asio\detail\call_stack.hpp	/^call_stack<Key, Value>::top_;$/;"	m	class:asio::detail::call_stack
total_buffer_size_	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  std::size_t total_buffer_size_;$/;"	m	class:asio::detail::buffer_sequence_adapter
total_buffer_size_	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  std::size_t total_buffer_size_;$/;"	m	class:asio::ssl::detail::buffered_handshake_op
total_consumed	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed() const$/;"	f	class:asio::detail::consuming_buffers
total_consumed	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed() const$/;"	f	class:asio::detail::consuming_single_buffer
total_consumed	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed() const$/;"	f	struct:asio::detail::prepared_buffers
total_consumed_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed_;$/;"	m	class:asio::detail::consuming_buffers
total_consumed_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed_;$/;"	m	class:asio::detail::consuming_single_buffer
total_consumed_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_consumed_;$/;"	m	struct:asio::detail::prepared_buffers
total_microseconds	.\include\asio\detail\chrono_time_traits.hpp	/^    int64_t total_microseconds() const$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
total_milliseconds	.\include\asio\detail\chrono_time_traits.hpp	/^    int64_t total_milliseconds() const$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
total_seconds	.\include\asio\detail\chrono_time_traits.hpp	/^    int64_t total_seconds() const$/;"	f	class:asio::detail::chrono_time_traits::posix_time_duration
total_size	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  std::size_t total_size() const$/;"	f	class:asio::detail::buffer_sequence_adapter
total_size_	.\include\asio\detail\consuming_buffers.hpp	/^  std::size_t total_size_;$/;"	m	struct:asio::detail::prepared_buffers
total_transferred_	.\include\asio\impl\read.hpp	/^    std::size_t total_transferred_;$/;"	m	class:asio::detail::read_dynbuf_op
total_transferred_	.\include\asio\impl\read_at.hpp	/^    std::size_t total_transferred_;$/;"	m	class:asio::detail::read_at_streambuf_op
traits_helper	.\include\asio\basic_socket_iostream.hpp	/^  typedef WaitTraits traits_helper;$/;"	t	class:asio::basic_socket_iostream
traits_helper	.\include\asio\basic_socket_streambuf.hpp	/^  typedef WaitTraits traits_helper;$/;"	t	class:asio::basic_socket_streambuf
traits_type	.\include\asio\basic_deadline_timer.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:asio::basic_deadline_timer
traits_type	.\include\asio\basic_waitable_timer.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:asio::basic_waitable_timer
traits_type	.\include\asio\deadline_timer_service.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:asio::deadline_timer_service
traits_type	.\include\asio\waitable_timer_service.hpp	/^  typedef WaitTraits traits_type;$/;"	t	class:asio::waitable_timer_service
transfer_all_t	.\include\asio\completion_condition.hpp	/^class transfer_all_t$/;"	c	namespace:asio::detail
transfer_at_least	.\include\asio\completion_condition.hpp	/^inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)$/;"	f	namespace:asio
transfer_at_least_t	.\include\asio\completion_condition.hpp	/^  explicit transfer_at_least_t(std::size_t minimum)$/;"	f	class:asio::detail::transfer_at_least_t
transfer_at_least_t	.\include\asio\completion_condition.hpp	/^class transfer_at_least_t$/;"	c	namespace:asio::detail
transfer_exactly	.\include\asio\completion_condition.hpp	/^inline detail::transfer_exactly_t transfer_exactly(std::size_t size)$/;"	f	namespace:asio
transfer_exactly_t	.\include\asio\completion_condition.hpp	/^  explicit transfer_exactly_t(std::size_t size)$/;"	f	class:asio::detail::transfer_exactly_t
transfer_exactly_t	.\include\asio\completion_condition.hpp	/^class transfer_exactly_t$/;"	c	namespace:asio::detail
try_again	.\include\asio\error.hpp	/^  const error::netdb_errors try_again = error::host_not_found_try_again;$/;"	m	namespace:asio::resolver_errc
try_again	.\include\asio\error.hpp	/^  try_again = ASIO_WIN_OR_POSIX($/;"	e	enum:asio::error::basic_errors
try_speculative_	.\include\asio\detail\epoll_reactor.hpp	/^    bool try_speculative_[max_ops];$/;"	m	class:asio::detail::epoll_reactor::descriptor_state
tss_key_	.\include\asio\detail\posix_tss_ptr.hpp	/^  pthread_key_t tss_key_;$/;"	m	class:asio::detail::posix_tss_ptr
tss_key_	.\include\asio\detail\win_tss_ptr.hpp	/^  DWORD tss_key_;$/;"	m	class:asio::detail::win_tss_ptr
tss_ptr	.\include\asio\detail\tss_ptr.hpp	/^class tss_ptr$/;"	c	namespace:asio::detail
tss_ptr_	.\include\asio\detail\win_global.hpp	/^  static tss_ptr<T> tss_ptr_;$/;"	m	struct:asio::detail::win_global_impl
tss_ptr_	.\include\asio\detail\win_global.hpp	/^tss_ptr<T> win_global_impl<T>::tss_ptr_;$/;"	m	class:asio::detail::win_global_impl
two	.\include\asio\serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:asio::serial_port_base::stop_bits::type
type	.\include\asio\associated_allocator.hpp	/^  typedef E type;$/;"	t	struct:asio::detail::associated_allocator_impl
type	.\include\asio\associated_allocator.hpp	/^  typedef see_below type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\associated_allocator.hpp	/^  typedef typename T::allocator_type type;$/;"	t	struct:asio::detail::associated_allocator_impl
type	.\include\asio\associated_allocator.hpp	/^  typedef void type;$/;"	t	struct:asio::detail::associated_allocator_check
type	.\include\asio\associated_executor.hpp	/^  typedef E type;$/;"	t	struct:asio::detail::associated_executor_impl
type	.\include\asio\associated_executor.hpp	/^  typedef see_below type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\associated_executor.hpp	/^  typedef typename T::executor_type type;$/;"	t	struct:asio::detail::associated_executor_impl
type	.\include\asio\associated_executor.hpp	/^  typedef void type;$/;"	t	struct:asio::detail::associated_executor_check
type	.\include\asio\async_result.hpp	/^  typedef void type;$/;"	t	class:asio::async_result
type	.\include\asio\bind_executor.hpp	/^    typename handler_type<T, Signature>::type, Executor> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\bind_executor.hpp	/^  typedef Executor type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\bind_executor.hpp	/^  typedef typename associated_allocator<T, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\bind_executor.hpp	/^  typedef typename async_result<T>::type type;$/;"	t	class:asio::async_result
type	.\include\asio\bind_executor.hpp	/^  typedef typename result_of<T()>::type type;$/;"	t	struct:asio::detail::executor_binder_result_of0
type	.\include\asio\bind_executor.hpp	/^  typedef void type;$/;"	t	struct:asio::detail::executor_binder_check
type	.\include\asio\bind_executor.hpp	/^  typedef void type;$/;"	t	struct:asio::detail::executor_binder_result_of0
type	.\include\asio\buffers_iterator.hpp	/^      typedef ByteType type;$/;"	t	struct:asio::detail::buffers_iterator_types_helper::byte_type
type	.\include\asio\buffers_iterator.hpp	/^      typedef typename add_const<ByteType>::type type;$/;"	t	struct:asio::detail::buffers_iterator_types_helper::byte_type
type	.\include\asio\detail\bind_handler.hpp	/^  typedef typename associated_allocator<Handler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\detail\bind_handler.hpp	/^  typedef typename associated_executor<Handler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\detail\dependent_type.hpp	/^  typedef T type;$/;"	t	struct:asio::detail::dependent_type
type	.\include\asio\detail\handler_alloc_helpers.hpp	/^  typedef Allocator type;$/;"	t	struct:asio::detail::get_hook_allocator
type	.\include\asio\detail\handler_alloc_helpers.hpp	/^  typedef hook_allocator<Handler, T> type;$/;"	t	struct:asio::detail::get_hook_allocator
type	.\include\asio\detail\recycling_allocator.hpp	/^  typedef Allocator type;$/;"	t	struct:asio::detail::get_recycling_allocator
type	.\include\asio\detail\recycling_allocator.hpp	/^  typedef recycling_allocator<T> type;$/;"	t	struct:asio::detail::get_recycling_allocator
type	.\include\asio\experimental\impl\co_spawn.hpp	/^    Executor, Args...>::awaitable_type type;$/;"	t	class:asio::async_result
type	.\include\asio\experimental\impl\co_spawn.hpp	/^    Executor, typename decay<Args>::type...> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef void type(std::exception_ptr);$/;"	t	struct:asio::experimental::detail::awaitable_signature
type	.\include\asio\experimental\impl\co_spawn.hpp	/^  typedef void type(std::exception_ptr, T);$/;"	t	struct:asio::experimental::detail::awaitable_signature
type	.\include\asio\experimental\impl\redirect_error.hpp	/^        ::completion_handler_type> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\experimental\impl\redirect_error.hpp	/^  typedef R type();$/;"	t	struct:asio::experimental::detail::redirect_error_signature
type	.\include\asio\experimental\impl\redirect_error.hpp	/^  typedef R type(Args...);$/;"	t	struct:asio::experimental::detail::redirect_error_signature
type	.\include\asio\experimental\impl\redirect_error.hpp	/^  typedef Signature type;$/;"	t	struct:asio::experimental::detail::redirect_error_signature
type	.\include\asio\experimental\impl\redirect_error.hpp	/^  typedef typename associated_allocator<Handler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\experimental\impl\redirect_error.hpp	/^  typedef typename associated_executor<Handler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\generic\datagram_protocol.hpp	/^  int type() const$/;"	f	class:asio::generic::datagram_protocol
type	.\include\asio\generic\raw_protocol.hpp	/^  int type() const$/;"	f	class:asio::generic::raw_protocol
type	.\include\asio\generic\seq_packet_protocol.hpp	/^  int type() const$/;"	f	class:asio::generic::seq_packet_protocol
type	.\include\asio\generic\stream_protocol.hpp	/^  int type() const$/;"	f	class:asio::generic::stream_protocol
type	.\include\asio\handler_type.hpp	/^  >::type::type type;$/;"	t	struct:asio::handler_type
type	.\include\asio\impl\buffered_read_stream.hpp	/^  typedef typename associated_allocator<ReadHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\buffered_read_stream.hpp	/^  typedef typename associated_executor<ReadHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\buffered_write_stream.hpp	/^  typedef typename associated_allocator<WriteHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\buffered_write_stream.hpp	/^  typedef typename associated_executor<WriteHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\connect.hpp	/^      IteratorConnectHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\connect.hpp	/^      IteratorConnectHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\connect.hpp	/^      RangeConnectHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\connect.hpp	/^      RangeConnectHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\read.hpp	/^  typedef typename associated_allocator<ReadHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\read.hpp	/^  typedef typename associated_executor<ReadHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\read_at.hpp	/^  typedef typename associated_allocator<ReadHandler, Allocator1>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\read_at.hpp	/^  typedef typename associated_allocator<ReadHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\read_at.hpp	/^  typedef typename associated_executor<ReadHandler, Executor1>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\read_at.hpp	/^  typedef typename associated_executor<ReadHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\read_until.hpp	/^  typedef typename associated_allocator<ReadHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\read_until.hpp	/^  typedef typename associated_executor<ReadHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\spawn.hpp	/^  typedef detail::coro_handler<Handler, typename decay<Arg1>::type> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\impl\spawn.hpp	/^  typedef detail::coro_handler<Handler, typename decay<Arg2>::type> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\impl\spawn.hpp	/^  typedef detail::coro_handler<Handler, void> type;$/;"	t	struct:asio::handler_type
type	.\include\asio\impl\spawn.hpp	/^  typedef typename associated_allocator<Handler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\spawn.hpp	/^  typedef typename associated_executor<Handler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\spawn.hpp	/^  typedef typename detail::coro_async_result<Handler, T>::return_type type;$/;"	t	class:asio::async_result
type	.\include\asio\impl\use_future.hpp	/^    Function, Allocator, Result>::return_type type;$/;"	t	class:asio::async_result
type	.\include\asio\impl\use_future.hpp	/^    Signature, Allocator>::return_type type;$/;"	t	class:asio::async_result
type	.\include\asio\impl\use_future.hpp	/^    Signature>::completion_handler_type type;$/;"	t	struct:asio::handler_type
type	.\include\asio\impl\write.hpp	/^  typedef typename associated_allocator<WriteHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\write.hpp	/^  typedef typename associated_executor<WriteHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\write_at.hpp	/^  typedef typename associated_allocator<WriteHandler, Allocator1>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\write_at.hpp	/^  typedef typename associated_allocator<WriteHandler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\impl\write_at.hpp	/^  typedef typename associated_executor<WriteHandler, Executor1>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\impl\write_at.hpp	/^  typedef typename associated_executor<WriteHandler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\asio\ip\icmp.hpp	/^  int type() const$/;"	f	class:asio::ip::icmp
type	.\include\asio\ip\tcp.hpp	/^  int type() const$/;"	f	class:asio::ip::tcp
type	.\include\asio\ip\udp.hpp	/^  int type() const$/;"	f	class:asio::ip::udp
type	.\include\asio\local\datagram_protocol.hpp	/^  int type() const$/;"	f	class:asio::local::datagram_protocol
type	.\include\asio\local\stream_protocol.hpp	/^  int type() const$/;"	f	class:asio::local::stream_protocol
type	.\include\asio\serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	g	class:asio::serial_port_base::parity
type	.\include\asio\serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	g	class:asio::serial_port_base::flow_control
type	.\include\asio\serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	g	class:asio::serial_port_base::stop_bits
type	.\include\asio\spawn.hpp	/^      !is_convertible<Handler&, execution_context&>::value>::type* = 0);$/;"	m	class:asio::enable_if
type	.\include\asio\ssl\detail\io.hpp	/^  typedef typename associated_allocator<Handler, Allocator>::type type;$/;"	t	struct:asio::associated_allocator
type	.\include\asio\ssl\detail\io.hpp	/^  typedef typename associated_executor<Handler, Executor>::type type;$/;"	t	struct:asio::associated_executor
type	.\include\global_types.hpp	/^	char* type;$/;"	m	struct:board_msg_t
type	.\include\global_types.hpp	/^	std::string type;$/;"	m	struct:msg_t
type	.\source\udp_server.h	/^	char* type;$/;"	m	struct:board_msg_t
type	.\test\udp_server.h	/^	char* type;$/;"	m	struct:board_msg_t
type_	.\include\asio\ip\address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	m	class:asio::ip::address	typeref:enum:asio::ip::address::__anon28
type_	.\include\asio\ssl\detail\buffered_handshake_op.hpp	/^  stream_base::handshake_type type_;$/;"	m	class:asio::ssl::detail::buffered_handshake_op
type_	.\include\asio\ssl\detail\handshake_op.hpp	/^  stream_base::handshake_type type_;$/;"	m	class:asio::ssl::detail::handshake_op
type_id	.\include\asio\executor.hpp	/^  static type_id_result_type type_id()$/;"	f	class:asio::executor
type_id_result_type	.\include\asio\executor.hpp	/^  typedef const std::type_info& type_id_result_type;$/;"	t	class:asio::executor
type_id_result_type	.\include\asio\executor.hpp	/^  typedef const void* type_id_result_type;$/;"	t	class:asio::executor
type_info_	.\include\asio\execution_context.hpp	/^    const std::type_info* type_info_;$/;"	m	struct:asio::execution_context::service::key
typeid_wrapper	.\include\asio\detail\service_registry.hpp	/^class typeid_wrapper {};$/;"	c	namespace:asio::detail
u	.\include\asio\detail\old_win_sdk_compat.hpp	/^  } u;$/;"	m	struct:asio::detail::in6_addr_emulation	typeref:union:asio::detail::in6_addr_emulation::__anon16
u_long_type	.\include\asio\detail\socket_types.hpp	/^typedef unsigned __int32 u_long_type;$/;"	t	namespace:asio::detail
u_short_type	.\include\asio\detail\socket_types.hpp	/^typedef unsigned __int16 u_short_type;$/;"	t	namespace:asio::detail
udp	.\include\asio\ip\udp.hpp	/^  explicit udp(int protocol_family)$/;"	f	class:asio::ip::udp
udp	.\include\asio\ip\udp.hpp	/^class udp$/;"	c	namespace:asio::ip
udp_channel	.\include\udp_channel.hpp	/^class udp_channel$/;"	c
udp_channel	.\source\udp_channel.cpp	/^udp_channel::udp_channel(std::string p) : $/;"	f	class:udp_channel
udp_cmd_worker	.\include\udp_if.hpp	/^	std::thread* udp_cmd_worker;$/;"	m	class:udp_if
udp_if	.\include\udp_if.hpp	/^class udp_if$/;"	c
udp_if	.\source\udp_if.cpp	/^udp_if::udp_if(std::string cmd_p, std::string strm_p, unsigned s_id) : $/;"	f	class:udp_if
udp_if_ptr	.\source\c_binding.cpp	/^static udp_if* udp_if_ptr;$/;"	v	file:
udp_parser	.\include\udp_parser.hpp	/^class udp_parser$/;"	c
udp_parser	.\source\udp_parser.cpp	/^udp_parser::udp_parser()$/;"	f	class:udp_parser
udp_states	.\include\global_types.hpp	/^enum udp_states$/;"	g
udp_strm_worker	.\include\udp_if.hpp	/^	std::thread* udp_strm_worker;$/;"	m	class:udp_if
uint_type	.\include\asio\ip\address_v4.hpp	/^  typedef uint_least32_t uint_type;$/;"	t	class:asio::ip::address_v4
ulong_ptr_t	.\include\asio\detail\win_iocp_io_context.hpp	/^  typedef ULONG ulong_ptr_t;$/;"	t	class:asio::detail::win_iocp_io_context
ulong_ptr_t	.\include\asio\detail\win_iocp_io_context.hpp	/^  typedef ULONG_PTR ulong_ptr_t;$/;"	t	class:asio::detail::win_iocp_io_context
unattached_callee_	.\include\asio\experimental\impl\co_spawn.hpp	/^  awaitee_base<Executor>* unattached_callee_ = nullptr;$/;"	m	class:asio::experimental::detail::awaitee_base
unblock	.\include\asio\detail\null_signal_blocker.hpp	/^  void unblock()$/;"	f	class:asio::detail::null_signal_blocker
unblock	.\include\asio\detail\posix_signal_blocker.hpp	/^  void unblock()$/;"	f	class:asio::detail::posix_signal_blocker
undelivered_	.\include\asio\detail\signal_set_service.hpp	/^    std::size_t undelivered_;$/;"	m	class:asio::detail::signal_set_service::registration
underflow	.\include\asio\basic_socket_streambuf.hpp	/^  int_type underflow()$/;"	f	class:asio::basic_socket_streambuf
underflow	.\include\asio\basic_streambuf.hpp	/^  int_type underflow()$/;"	f	class:asio::basic_streambuf
unhandled_exception	.\include\asio\experimental\impl\co_spawn.hpp	/^  void unhandled_exception()$/;"	f	class:asio::experimental::detail::awaitee_base
unhandled_exception	.\include\asio\experimental\impl\co_spawn.hpp	/^  void unhandled_exception()$/;"	f	class:asio::experimental::detail::awaiter
unicast	.\include\asio\ip\unicast.hpp	/^namespace unicast {$/;"	n	namespace:asio::ip
unicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^  explicit unicast_hops(int v)$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
unicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^  unicast_hops()$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
unicast_hops	.\include\asio\ip\detail\socket_option.hpp	/^class unicast_hops$/;"	c	namespace:asio::ip::detail::socket_option
unique_lock_	.\include\asio\detail\std_event.hpp	/^    std::unique_lock<std::mutex> unique_lock_;$/;"	m	struct:asio::detail::std_event::unique_lock_adapter
unique_lock_adapter	.\include\asio\detail\std_event.hpp	/^    explicit unique_lock_adapter(Lock& lock)$/;"	f	struct:asio::detail::std_event::unique_lock_adapter
unique_lock_adapter	.\include\asio\detail\std_event.hpp	/^  struct unique_lock_adapter$/;"	s	class:asio::detail::std_event
unlock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    void unlock()$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
unlock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::conditionally_enabled_mutex
unlock	.\include\asio\detail\null_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::null_mutex
unlock	.\include\asio\detail\null_static_mutex.hpp	/^  void unlock()$/;"	f	struct:asio::detail::null_static_mutex
unlock	.\include\asio\detail\posix_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::posix_mutex
unlock	.\include\asio\detail\posix_static_mutex.hpp	/^  void unlock()$/;"	f	struct:asio::detail::posix_static_mutex
unlock	.\include\asio\detail\scoped_lock.hpp	/^  void unlock()$/;"	f	class:asio::detail::scoped_lock
unlock	.\include\asio\detail\std_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::std_mutex
unlock	.\include\asio\detail\std_static_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::std_static_mutex
unlock	.\include\asio\detail\win_mutex.hpp	/^  void unlock()$/;"	f	class:asio::detail::win_mutex
unlock	.\include\asio\detail\win_static_mutex.hpp	/^  void unlock()$/;"	f	struct:asio::detail::win_static_mutex
unlock	.\source\strm_queue.cpp	/^void strm_queue::unlock()$/;"	f	class:strm_queue
unlock_and_signal_one	.\include\asio\detail\conditionally_enabled_event.hpp	/^  void unlock_and_signal_one($/;"	f	class:asio::detail::conditionally_enabled_event
unlock_and_signal_one	.\include\asio\detail\null_event.hpp	/^  void unlock_and_signal_one(Lock&)$/;"	f	class:asio::detail::null_event
unlock_and_signal_one	.\include\asio\detail\posix_event.hpp	/^  void unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::posix_event
unlock_and_signal_one	.\include\asio\detail\std_event.hpp	/^  void unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::std_event
unlock_and_signal_one	.\include\asio\detail\win_event.hpp	/^  void unlock_and_signal_one(Lock& lock)$/;"	f	class:asio::detail::win_event
unspecified_bool_true	.\include\asio\error_code.hpp	/^  static void unspecified_bool_true(unspecified_bool_type_t) {}$/;"	f	class:asio::error_code
unspecified_bool_true	.\include\asio\executor.hpp	/^  static void unspecified_bool_true(unspecified_bool_type_t) {}$/;"	f	class:asio::executor
unspecified_bool_type	.\include\asio\error_code.hpp	/^  typedef void (*unspecified_bool_type)(unspecified_bool_type_t);$/;"	t	class:asio::error_code
unspecified_bool_type	.\include\asio\executor.hpp	/^  typedef void (*unspecified_bool_type)(unspecified_bool_type_t);$/;"	t	class:asio::executor
unspecified_bool_type_t	.\include\asio\error_code.hpp	/^  struct unspecified_bool_type_t$/;"	s	class:asio::error_code
unspecified_bool_type_t	.\include\asio\executor.hpp	/^  struct unspecified_bool_type_t {};$/;"	s	class:asio::executor
unused_	.\include\asio\detail\null_static_mutex.hpp	/^  int unused_;$/;"	m	struct:asio::detail::null_static_mutex
up_heap	.\include\asio\detail\timer_queue.hpp	/^  void up_heap(std::size_t index)$/;"	f	class:asio::detail::timer_queue
use_future	.\include\asio\use_future.hpp	/^__declspec(selectany) use_future_t<> use_future;$/;"	m	namespace:asio
use_future	.\include\asio\use_future.hpp	/^constexpr use_future_t<> use_future;$/;"	m	namespace:asio
use_future_t	.\include\asio\use_future.hpp	/^  ASIO_CONSTEXPR use_future_t()$/;"	f	class:asio::use_future_t
use_future_t	.\include\asio\use_future.hpp	/^  explicit use_future_t(const Allocator& allocator)$/;"	f	class:asio::use_future_t
use_future_t	.\include\asio\use_future.hpp	/^class use_future_t$/;"	c	namespace:asio
use_service	.\include\asio\detail\impl\service_registry.hpp	/^Service& service_registry::use_service()$/;"	f	class:asio::detail::service_registry
use_service	.\include\asio\detail\impl\service_registry.hpp	/^Service& service_registry::use_service(io_context& owner)$/;"	f	class:asio::detail::service_registry
use_service	.\include\asio\impl\execution_context.hpp	/^inline Service& use_service(execution_context& e)$/;"	f	namespace:asio
use_service	.\include\asio\impl\io_context.hpp	/^inline Service& use_service(io_context& ioc)$/;"	f	namespace:asio
use_service	.\include\asio\impl\io_context.hpp	/^inline detail::io_context_impl& use_service<detail::io_context_impl>($/;"	f	namespace:asio
user_set_linger	.\include\asio\detail\socket_ops.hpp	/^  user_set_linger = 8,$/;"	e	enum:asio::detail::socket_ops::__anon18
user_set_non_blocking	.\include\asio\detail\descriptor_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:asio::detail::descriptor_ops::__anon13
user_set_non_blocking	.\include\asio\detail\socket_ops.hpp	/^  user_set_non_blocking = 1,$/;"	e	enum:asio::detail::socket_ops::__anon18
uses_executor	.\include\asio\bind_executor.hpp	/^struct uses_executor<executor_binder<T, Executor>, Executor>$/;"	s	namespace:asio
uses_executor	.\include\asio\uses_executor.hpp	/^struct uses_executor : false_type {};$/;"	s	namespace:asio
v4	.\include\asio\ip\detail\endpoint.hpp	/^    asio::detail::sockaddr_in4_type v4;$/;"	m	union:asio::ip::detail::endpoint::data_union
v4	.\include\asio\ip\icmp.hpp	/^  static icmp v4()$/;"	f	class:asio::ip::icmp
v4	.\include\asio\ip\tcp.hpp	/^  static tcp v4()$/;"	f	class:asio::ip::tcp
v4	.\include\asio\ip\udp.hpp	/^  static udp v4()$/;"	f	class:asio::ip::udp
v4_mapped	.\include\asio\ip\address_v6.hpp	/^enum v4_mapped_t { v4_mapped };$/;"	e	enum:asio::ip::v4_mapped_t
v4_mapped	.\include\asio\ip\resolver_base.hpp	/^  static const flags v4_mapped = implementation_defined;$/;"	m	class:asio::ip::resolver_base
v4_mapped_t	.\include\asio\ip\address_v6.hpp	/^enum v4_mapped_t { v4_mapped };$/;"	g	namespace:asio::ip
v6	.\include\asio\ip\detail\endpoint.hpp	/^    asio::detail::sockaddr_in6_type v6;$/;"	m	union:asio::ip::detail::endpoint::data_union
v6	.\include\asio\ip\icmp.hpp	/^  static icmp v6()$/;"	f	class:asio::ip::icmp
v6	.\include\asio\ip\tcp.hpp	/^  static tcp v6()$/;"	f	class:asio::ip::tcp
v6	.\include\asio\ip\udp.hpp	/^  static udp v6()$/;"	f	class:asio::ip::udp
v6_only	.\include\asio\ip\v6_only.hpp	/^typedef implementation_defined v6_only;$/;"	t	namespace:asio::ip
val	.\include\global_types.hpp	/^	bool val;$/;"	m	class:atomic_bool
val_mtx	.\include\global_types.hpp	/^	std::mutex val_mtx;$/;"	m	class:atomic_bool
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(Iterator begin, Iterator end)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const Buffers& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const asio::const_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const asio::const_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const asio::mutable_buffer& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const asio::mutable_buffers_1& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const boost::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
validate	.\include\asio\detail\buffer_sequence_adapter.hpp	/^  static void validate(const std::array<Elem, 2>& buffer_sequence)$/;"	f	class:asio::detail::buffer_sequence_adapter
value	.\include\asio\basic_io_object.hpp	/^    static const bool value =$/;"	m	class:asio::detail::service_has_move
value	.\include\asio\connect.hpp	/^    enum { value = (sizeof((has_iterator_helper)((T*)(0))) == 1) };$/;"	e	enum:asio::detail::has_iterator_typedef::__anon5
value	.\include\asio\connect.hpp	/^  static const bool value;$/;"	m	struct:asio::is_endpoint_sequence
value	.\include\asio\detail\chrono_time_traits.hpp	/^struct gcd { enum { value = gcd<v2, v1 % v2>::value }; };$/;"	e	enum:asio::detail::gcd::__anon7
value	.\include\asio\detail\chrono_time_traits.hpp	/^struct gcd<v1, 0> { enum { value = v1 }; };$/;"	e	enum:asio::detail::gcd::__anon8
value	.\include\asio\detail\consuming_buffers.hpp	/^  enum { value = N };$/;"	e	enum:asio::detail::prepared_buffers_max::__anon10
value	.\include\asio\detail\consuming_buffers.hpp	/^  enum { value = N };$/;"	e	enum:asio::detail::prepared_buffers_max::__anon11
value	.\include\asio\detail\consuming_buffers.hpp	/^  enum { value = buffer_sequence_adapter_base::max_buffers };$/;"	e	enum:asio::detail::prepared_buffers_max::__anon9
value	.\include\asio\detail\socket_option.hpp	/^  bool value() const$/;"	f	class:asio::detail::socket_option::boolean
value	.\include\asio\detail\socket_option.hpp	/^  int value() const$/;"	f	class:asio::detail::socket_option::integer
value	.\include\asio\error.hpp	/^  static const bool value = true;$/;"	m	struct:std::is_error_code_enum
value	.\include\asio\error_code.hpp	/^  int value() const$/;"	f	class:asio::error_code
value	.\include\asio\impl\connect.hpp	/^    static const bool value =$/;"	m	struct:asio::detail::is_legacy_connect_condition
value	.\include\asio\impl\serial_port_base.hpp	/^inline serial_port_base::parity::type serial_port_base::parity::value() const$/;"	f	class:asio::serial_port_base::parity
value	.\include\asio\impl\serial_port_base.hpp	/^inline unsigned int serial_port_base::baud_rate::value() const$/;"	f	class:asio::serial_port_base::baud_rate
value	.\include\asio\impl\serial_port_base.hpp	/^inline unsigned int serial_port_base::character_size::value() const$/;"	f	class:asio::serial_port_base::character_size
value	.\include\asio\impl\serial_port_base.hpp	/^serial_port_base::flow_control::value() const$/;"	f	class:asio::serial_port_base::flow_control
value	.\include\asio\impl\serial_port_base.hpp	/^serial_port_base::stop_bits::value() const$/;"	f	class:asio::serial_port_base::stop_bits
value	.\include\asio\ip\detail\socket_option.hpp	/^  bool value() const$/;"	f	class:asio::ip::detail::socket_option::multicast_enable_loopback
value	.\include\asio\ip\detail\socket_option.hpp	/^  int value() const$/;"	f	class:asio::ip::detail::socket_option::multicast_hops
value	.\include\asio\ip\detail\socket_option.hpp	/^  int value() const$/;"	f	class:asio::ip::detail::socket_option::unicast_hops
value	.\include\asio\is_read_buffered.hpp	/^  static const bool value;$/;"	m	class:asio::is_read_buffered
value	.\include\asio\is_write_buffered.hpp	/^  static const bool value;$/;"	m	class:asio::is_write_buffered
value	.\include\asio\read_until.hpp	/^    enum { value = (sizeof((has_result_type_helper)((T*)(0))) == 1) };$/;"	e	enum:asio::detail::has_result_type::__anon29
value	.\include\asio\read_until.hpp	/^  static const bool value;$/;"	m	struct:asio::is_match_condition
value	.\include\asio\ssl\error.hpp	/^  static const bool value = true;$/;"	m	struct:std::is_error_code_enum
value	.\include\global_types.hpp	/^	char* value;$/;"	m	struct:board_command_t
value_	.\include\asio\coroutine.hpp	/^  int value_;$/;"	m	class:asio::coroutine
value_	.\include\asio\coroutine.hpp	/^  int& value_;$/;"	m	class:asio::detail::coroutine_ref
value_	.\include\asio\detail\call_stack.hpp	/^    Value* value_;$/;"	m	class:asio::detail::call_stack::context
value_	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  int value_;$/;"	m	class:asio::detail::gcc_sync_fenced_block
value_	.\include\asio\detail\io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:asio::detail::io_control::bytes_readable
value_	.\include\asio\detail\keyword_tss_ptr.hpp	/^  static ASIO_THREAD_KEYWORD T* value_;$/;"	m	class:asio::detail::keyword_tss_ptr
value_	.\include\asio\detail\keyword_tss_ptr.hpp	/^ASIO_THREAD_KEYWORD T* keyword_tss_ptr<T>::value_;$/;"	m	class:asio::detail::keyword_tss_ptr
value_	.\include\asio\detail\null_tss_ptr.hpp	/^  T* value_;$/;"	m	class:asio::detail::null_tss_ptr
value_	.\include\asio\detail\socket_option.hpp	/^  detail::linger_type value_;$/;"	m	class:asio::detail::socket_option::linger
value_	.\include\asio\detail\socket_option.hpp	/^  int value_;$/;"	m	class:asio::detail::socket_option::boolean
value_	.\include\asio\detail\socket_option.hpp	/^  int value_;$/;"	m	class:asio::detail::socket_option::integer
value_	.\include\asio\error_code.hpp	/^  int value_;$/;"	m	class:asio::error_code
value_	.\include\asio\impl\spawn.hpp	/^    T* value_;$/;"	m	class:asio::detail::coro_handler
value_	.\include\asio\impl\spawn.hpp	/^    return_type value_;$/;"	m	class:asio::detail::coro_async_result
value_	.\include\asio\ip\detail\socket_option.hpp	/^  int value_;$/;"	m	class:asio::ip::detail::socket_option::unicast_hops
value_	.\include\asio\serial_port_base.hpp	/^    type value_;$/;"	m	class:asio::serial_port_base::flow_control
value_	.\include\asio\serial_port_base.hpp	/^    type value_;$/;"	m	class:asio::serial_port_base::parity
value_	.\include\asio\serial_port_base.hpp	/^    type value_;$/;"	m	class:asio::serial_port_base::stop_bits
value_	.\include\asio\serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:asio::serial_port_base::baud_rate
value_	.\include\asio\serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:asio::serial_port_base::character_size
value_type	.\include\asio\buffer.hpp	/^  typedef const_buffer value_type;$/;"	t	class:asio::const_buffers_1
value_type	.\include\asio\buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:asio::mutable_buffers_1
value_type	.\include\asio\buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:asio::null_buffers
value_type	.\include\asio\buffers_iterator.hpp	/^  typedef ByteType value_type;$/;"	t	class:asio::buffers_iterator
value_type	.\include\asio\detail\consuming_buffers.hpp	/^  typedef Buffer value_type;$/;"	t	struct:asio::detail::prepared_buffers
value_type	.\include\asio\detail\handler_alloc_helpers.hpp	/^  typedef T value_type;$/;"	t	class:asio::detail::hook_allocator
value_type	.\include\asio\detail\handler_alloc_helpers.hpp	/^  typedef void value_type;$/;"	t	class:asio::detail::hook_allocator
value_type	.\include\asio\detail\hash_map.hpp	/^  typedef std::pair<K, V> value_type;$/;"	t	class:asio::detail::hash_map
value_type	.\include\asio\detail\reactor_op_queue.hpp	/^  typedef typename hash_map<key_type, mapped_type>::value_type value_type;$/;"	t	class:asio::detail::reactor_op_queue
value_type	.\include\asio\detail\recycling_allocator.hpp	/^  typedef T value_type;$/;"	t	class:asio::detail::recycling_allocator
value_type	.\include\asio\detail\recycling_allocator.hpp	/^  typedef void value_type;$/;"	t	class:asio::detail::recycling_allocator
value_type	.\include\asio\experimental\co_spawn.hpp	/^  typedef T value_type;$/;"	t	class:asio::experimental::awaitable
value_type	.\include\asio\ip\address_v4_iterator.hpp	/^  typedef address_v4 value_type;$/;"	t	class:asio::ip::basic_address_iterator
value_type	.\include\asio\ip\address_v6_iterator.hpp	/^  typedef address_v6 value_type;$/;"	t	class:asio::ip::basic_address_iterator
value_type	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef basic_resolver_entry<InternetProtocol> value_type;$/;"	t	class:asio::ip::basic_resolver_iterator
value_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef basic_resolver_entry<protocol_type> value_type;$/;"	t	class:asio::ip::basic_resolver_results
values_	.\include\asio\detail\hash_map.hpp	/^  std::list<value_type> values_;$/;"	m	class:asio::detail::hash_map
values_	.\include\asio\ip\basic_resolver_iterator.hpp	/^  values_ptr_type values_;$/;"	m	class:asio::ip::basic_resolver_iterator
values_erase	.\include\asio\detail\hash_map.hpp	/^  void values_erase(iterator it)$/;"	f	class:asio::detail::hash_map
values_insert	.\include\asio\detail\hash_map.hpp	/^  iterator values_insert(iterator it, const value_type& v)$/;"	f	class:asio::detail::hash_map
values_ptr_type	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef asio::detail::shared_ptr<values_type> values_ptr_type;$/;"	t	class:asio::ip::basic_resolver_iterator
values_type	.\include\asio\ip\basic_resolver_iterator.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:asio::ip::basic_resolver_iterator
values_type	.\include\asio\ip\basic_resolver_results.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:asio::ip::basic_resolver_results
var_mtx	.\include\global_types.hpp	/^	std::mutex var_mtx;$/;"	m	class:wait_semaphore
vector_	.\include\asio\buffer.hpp	/^  std::vector<Elem, Allocator>& vector_;$/;"	m	class:asio::dynamic_vector_buffer
verify_callback	.\include\asio\ssl\detail\verify_callback.hpp	/^  explicit verify_callback(VerifyCallback callback)$/;"	f	class:asio::ssl::detail::verify_callback
verify_callback	.\include\asio\ssl\detail\verify_callback.hpp	/^class verify_callback : public verify_callback_base$/;"	c	namespace:asio::ssl::detail
verify_callback_base	.\include\asio\ssl\detail\verify_callback.hpp	/^class verify_callback_base$/;"	c	namespace:asio::ssl::detail
verify_client_once	.\include\asio\ssl\verify_mode.hpp	/^const int verify_client_once = SSL_VERIFY_CLIENT_ONCE;$/;"	m	namespace:asio::ssl
verify_client_once	.\include\asio\ssl\verify_mode.hpp	/^const int verify_client_once = implementation_defined;$/;"	m	namespace:asio::ssl
verify_context	.\include\asio\ssl\verify_context.hpp	/^  explicit verify_context(native_handle_type handle)$/;"	f	class:asio::ssl::verify_context
verify_context	.\include\asio\ssl\verify_context.hpp	/^class verify_context$/;"	c	namespace:asio::ssl
verify_fail_if_no_peer_cert	.\include\asio\ssl\verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT;$/;"	m	namespace:asio::ssl
verify_fail_if_no_peer_cert	.\include\asio\ssl\verify_mode.hpp	/^const int verify_fail_if_no_peer_cert = implementation_defined;$/;"	m	namespace:asio::ssl
verify_mode	.\include\asio\ssl\context_base.hpp	/^  typedef int verify_mode;$/;"	t	class:asio::ssl::context_base
verify_mode	.\include\asio\ssl\verify_mode.hpp	/^typedef int verify_mode;$/;"	t	namespace:asio::ssl
verify_none	.\include\asio\ssl\verify_mode.hpp	/^const int verify_none = SSL_VERIFY_NONE;$/;"	m	namespace:asio::ssl
verify_none	.\include\asio\ssl\verify_mode.hpp	/^const int verify_none = implementation_defined;$/;"	m	namespace:asio::ssl
verify_peer	.\include\asio\ssl\verify_mode.hpp	/^const int verify_peer = SSL_VERIFY_PEER;$/;"	m	namespace:asio::ssl
verify_peer	.\include\asio\ssl\verify_mode.hpp	/^const int verify_peer = implementation_defined;$/;"	m	namespace:asio::ssl
wait	.\include\asio\basic_deadline_timer.hpp	/^  void wait()$/;"	f	class:asio::basic_deadline_timer
wait	.\include\asio\basic_deadline_timer.hpp	/^  void wait(asio::error_code& ec)$/;"	f	class:asio::basic_deadline_timer
wait	.\include\asio\basic_socket.hpp	/^  ASIO_SYNC_OP_VOID wait(wait_type w, asio::error_code& ec)$/;"	f	class:asio::basic_socket
wait	.\include\asio\basic_socket.hpp	/^  void wait(wait_type w)$/;"	f	class:asio::basic_socket
wait	.\include\asio\basic_socket_acceptor.hpp	/^  ASIO_SYNC_OP_VOID wait(wait_type w, asio::error_code& ec)$/;"	f	class:asio::basic_socket_acceptor
wait	.\include\asio\basic_socket_acceptor.hpp	/^  void wait(wait_type w)$/;"	f	class:asio::basic_socket_acceptor
wait	.\include\asio\basic_waitable_timer.hpp	/^  void wait()$/;"	f	class:asio::basic_waitable_timer
wait	.\include\asio\basic_waitable_timer.hpp	/^  void wait(asio::error_code& ec)$/;"	f	class:asio::basic_waitable_timer
wait	.\include\asio\datagram_socket_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::datagram_socket_service
wait	.\include\asio\deadline_timer_service.hpp	/^  void wait(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::deadline_timer_service
wait	.\include\asio\detail\conditionally_enabled_event.hpp	/^  void wait(conditionally_enabled_mutex::scoped_lock& lock)$/;"	f	class:asio::detail::conditionally_enabled_event
wait	.\include\asio\detail\deadline_timer_service.hpp	/^  void wait(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::detail::deadline_timer_service
wait	.\include\asio\detail\null_event.hpp	/^  void wait(Lock&)$/;"	f	class:asio::detail::null_event
wait	.\include\asio\detail\posix_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:asio::detail::posix_event
wait	.\include\asio\detail\reactive_descriptor_service.hpp	/^  asio::error_code wait(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
wait	.\include\asio\detail\reactive_socket_service_base.hpp	/^  asio::error_code wait(base_implementation_type& impl,$/;"	f	class:asio::detail::reactive_socket_service_base
wait	.\include\asio\detail\std_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:asio::detail::std_event
wait	.\include\asio\detail\win_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:asio::detail::win_event
wait	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^  asio::error_code wait(base_implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_socket_service_base
wait	.\include\asio\posix\basic_descriptor.hpp	/^  ASIO_SYNC_OP_VOID wait(wait_type w, asio::error_code& ec)$/;"	f	class:asio::posix::basic_descriptor
wait	.\include\asio\posix\basic_descriptor.hpp	/^  void wait(wait_type w)$/;"	f	class:asio::posix::basic_descriptor
wait	.\include\asio\posix\descriptor.hpp	/^  ASIO_SYNC_OP_VOID wait(wait_type w, asio::error_code& ec)$/;"	f	class:asio::posix::descriptor
wait	.\include\asio\posix\descriptor.hpp	/^  void wait(wait_type w)$/;"	f	class:asio::posix::descriptor
wait	.\include\asio\posix\stream_descriptor_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
wait	.\include\asio\raw_socket_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::raw_socket_service
wait	.\include\asio\seq_packet_socket_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::seq_packet_socket_service
wait	.\include\asio\socket_acceptor_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::socket_acceptor_service
wait	.\include\asio\stream_socket_service.hpp	/^  ASIO_SYNC_OP_VOID wait(implementation_type& impl,$/;"	f	class:asio::stream_socket_service
wait	.\include\asio\waitable_timer_service.hpp	/^  void wait(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::waitable_timer_service
wait	.\include\asio\windows\basic_object_handle.hpp	/^  void wait()$/;"	f	class:asio::windows::basic_object_handle
wait	.\include\asio\windows\basic_object_handle.hpp	/^  void wait(asio::error_code& ec)$/;"	f	class:asio::windows::basic_object_handle
wait	.\include\asio\windows\object_handle_service.hpp	/^  void wait(implementation_type& impl, asio::error_code& ec)$/;"	f	class:asio::windows::object_handle_service
wait_duration_msec	.\include\asio\detail\timer_queue.hpp	/^  virtual long wait_duration_msec(long max_duration) const$/;"	f	class:asio::detail::timer_queue
wait_duration_usec	.\include\asio\detail\timer_queue.hpp	/^  virtual long wait_duration_usec(long max_duration) const$/;"	f	class:asio::detail::timer_queue
wait_error	.\include\asio\posix\descriptor_base.hpp	/^    wait_error$/;"	e	enum:asio::posix::descriptor_base::wait_type
wait_error	.\include\asio\socket_base.hpp	/^    wait_error$/;"	e	enum:asio::socket_base::wait_type
wait_for_false	.\include\global_types.hpp	/^	void wait_for_false()$/;"	f	class:atomic_bool
wait_for_true	.\include\global_types.hpp	/^	void wait_for_true()$/;"	f	class:atomic_bool
wait_for_usec	.\include\asio\detail\conditionally_enabled_event.hpp	/^  bool wait_for_usec($/;"	f	class:asio::detail::conditionally_enabled_event
wait_for_usec	.\include\asio\detail\null_event.hpp	/^  bool wait_for_usec(Lock&, long usec)$/;"	f	class:asio::detail::null_event
wait_for_usec	.\include\asio\detail\posix_event.hpp	/^  bool wait_for_usec(Lock& lock, long usec)$/;"	f	class:asio::detail::posix_event
wait_for_usec	.\include\asio\detail\std_event.hpp	/^  bool wait_for_usec(Lock& lock, long usec)$/;"	f	class:asio::detail::std_event
wait_for_usec	.\include\asio\detail\win_event.hpp	/^  bool wait_for_usec(Lock& lock, long usec)$/;"	f	class:asio::detail::win_event
wait_handle_	.\include\asio\detail\win_object_handle_service.hpp	/^    HANDLE wait_handle_;$/;"	m	class:asio::detail::win_object_handle_service::implementation_type
wait_handler	.\include\asio\detail\wait_handler.hpp	/^  wait_handler(Handler& h)$/;"	f	class:asio::detail::wait_handler
wait_handler	.\include\asio\detail\wait_handler.hpp	/^class wait_handler : public wait_op$/;"	c	namespace:asio::detail
wait_if_empty	.\source\strm_queue.cpp	/^void strm_queue::wait_if_empty()$/;"	f	class:strm_queue
wait_op	.\include\asio\detail\wait_op.hpp	/^  wait_op(func_type func)$/;"	f	class:asio::detail::wait_op
wait_op	.\include\asio\detail\wait_op.hpp	/^class wait_op$/;"	c	namespace:asio::detail
wait_read	.\include\asio\posix\descriptor_base.hpp	/^    wait_read,$/;"	e	enum:asio::posix::descriptor_base::wait_type
wait_read	.\include\asio\socket_base.hpp	/^    wait_read,$/;"	e	enum:asio::socket_base::wait_type
wait_semaphore	.\include\global_types.hpp	/^	wait_semaphore(unsigned l)$/;"	f	class:wait_semaphore
wait_semaphore	.\include\global_types.hpp	/^class wait_semaphore$/;"	c
wait_state	.\include\global_types.hpp	/^	wait_state,$/;"	e	enum:udp_states
wait_traits	.\include\asio\wait_traits.hpp	/^struct wait_traits$/;"	s	namespace:asio
wait_type	.\include\asio\posix\descriptor_base.hpp	/^  enum wait_type$/;"	g	class:asio::posix::descriptor_base
wait_type	.\include\asio\socket_base.hpp	/^  enum wait_type$/;"	g	class:asio::socket_base
wait_write	.\include\asio\posix\descriptor_base.hpp	/^    wait_write,$/;"	e	enum:asio::posix::descriptor_base::wait_type
wait_write	.\include\asio\socket_base.hpp	/^    wait_write,$/;"	e	enum:asio::socket_base::wait_type
waitable_timer_	.\include\asio\detail\win_iocp_io_context.hpp	/^  auto_handle waitable_timer_;$/;"	m	class:asio::detail::win_iocp_io_context
waitable_timer_service	.\include\asio\waitable_timer_service.hpp	/^  explicit waitable_timer_service(asio::io_context& io_context)$/;"	f	class:asio::waitable_timer_service
waitable_timer_service	.\include\asio\waitable_timer_service.hpp	/^class waitable_timer_service$/;"	c	namespace:asio
waiter	.\include\asio\detail\std_event.hpp	/^    explicit waiter(std::size_t& state)$/;"	f	class:asio::detail::std_event::waiter
waiter	.\include\asio\detail\std_event.hpp	/^  class waiter$/;"	c	class:asio::detail::std_event
waiting_queue_	.\include\asio\detail\strand_executor_service.hpp	/^    op_queue<scheduler_operation> waiting_queue_;$/;"	m	class:asio::detail::strand_executor_service::strand_impl
waiting_queue_	.\include\asio\detail\strand_service.hpp	/^    op_queue<operation> waiting_queue_;$/;"	m	class:asio::detail::strand_service::strand_impl
wake_caller	.\include\asio\experimental\impl\co_spawn.hpp	/^  void wake_caller()$/;"	f	class:asio::experimental::detail::awaitee_base
wake_for_dispatch	.\include\asio\detail\win_iocp_io_context.hpp	/^    wake_for_dispatch = 1,$/;"	e	enum:asio::detail::win_iocp_io_context::__anon27
wakeup_event_	.\include\asio\detail\scheduler.hpp	/^  event wakeup_event_;$/;"	m	class:asio::detail::scheduler
want	.\include\asio\ssl\detail\engine.hpp	/^  enum want$/;"	g	class:asio::ssl::detail::engine
want_	.\include\asio\ssl\detail\io.hpp	/^  engine::want want_;$/;"	m	class:asio::ssl::detail::io_op
want_input_and_retry	.\include\asio\ssl\detail\engine.hpp	/^    want_input_and_retry = -2,$/;"	e	enum:asio::ssl::detail::engine::want
want_nothing	.\include\asio\ssl\detail\engine.hpp	/^    want_nothing = 0,$/;"	e	enum:asio::ssl::detail::engine::want
want_output	.\include\asio\ssl\detail\engine.hpp	/^    want_output = 1$/;"	e	enum:asio::ssl::detail::engine::want
want_output_and_retry	.\include\asio\ssl\detail\engine.hpp	/^    want_output_and_retry = -1,$/;"	e	enum:asio::ssl::detail::engine::want
weak_cancel_token_type	.\include\asio\detail\socket_ops.hpp	/^typedef weak_ptr<void> weak_cancel_token_type;$/;"	t	namespace:asio::detail::socket_ops
win_event	.\include\asio\detail\win_event.hpp	/^class win_event$/;"	c	namespace:asio::detail
win_fd_set	.\include\asio\detail\win_fd_set_adapter.hpp	/^  struct win_fd_set$/;"	s	class:asio::detail::win_fd_set_adapter
win_fd_set_adapter	.\include\asio\detail\win_fd_set_adapter.hpp	/^  win_fd_set_adapter()$/;"	f	class:asio::detail::win_fd_set_adapter
win_fd_set_adapter	.\include\asio\detail\win_fd_set_adapter.hpp	/^class win_fd_set_adapter : noncopyable$/;"	c	namespace:asio::detail
win_fenced_block	.\include\asio\detail\win_fenced_block.hpp	/^  explicit win_fenced_block(full_t)$/;"	f	class:asio::detail::win_fenced_block
win_fenced_block	.\include\asio\detail\win_fenced_block.hpp	/^  explicit win_fenced_block(half_t)$/;"	f	class:asio::detail::win_fenced_block
win_fenced_block	.\include\asio\detail\win_fenced_block.hpp	/^class win_fenced_block$/;"	c	namespace:asio::detail
win_global	.\include\asio\detail\win_global.hpp	/^T& win_global()$/;"	f	namespace:asio::detail
win_global_impl	.\include\asio\detail\win_global.hpp	/^struct win_global_impl$/;"	s	namespace:asio::detail
win_iocp_handle_read_op	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^  win_iocp_handle_read_op($/;"	f	class:asio::detail::win_iocp_handle_read_op
win_iocp_handle_read_op	.\include\asio\detail\win_iocp_handle_read_op.hpp	/^class win_iocp_handle_read_op : public operation$/;"	c	namespace:asio::detail
win_iocp_handle_service	.\include\asio\detail\win_iocp_handle_service.hpp	/^class win_iocp_handle_service :$/;"	c	namespace:asio::detail
win_iocp_handle_write_op	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^  win_iocp_handle_write_op(const ConstBufferSequence& buffers, Handler& handler)$/;"	f	class:asio::detail::win_iocp_handle_write_op
win_iocp_handle_write_op	.\include\asio\detail\win_iocp_handle_write_op.hpp	/^class win_iocp_handle_write_op : public operation$/;"	c	namespace:asio::detail
win_iocp_io_context	.\include\asio\detail\win_iocp_io_context.hpp	/^class win_iocp_io_context$/;"	c	namespace:asio::detail
win_iocp_null_buffers_op	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^  win_iocp_null_buffers_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:asio::detail::win_iocp_null_buffers_op
win_iocp_null_buffers_op	.\include\asio\detail\win_iocp_null_buffers_op.hpp	/^class win_iocp_null_buffers_op : public reactor_op$/;"	c	namespace:asio::detail
win_iocp_operation	.\include\asio\detail\win_iocp_operation.hpp	/^  win_iocp_operation(func_type func)$/;"	f	class:asio::detail::win_iocp_operation
win_iocp_operation	.\include\asio\detail\win_iocp_operation.hpp	/^class win_iocp_operation$/;"	c	namespace:asio::detail
win_iocp_overlapped_op	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^  win_iocp_overlapped_op(Handler& handler)$/;"	f	class:asio::detail::win_iocp_overlapped_op
win_iocp_overlapped_op	.\include\asio\detail\win_iocp_overlapped_op.hpp	/^class win_iocp_overlapped_op : public operation$/;"	c	namespace:asio::detail
win_iocp_overlapped_ptr	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  explicit win_iocp_overlapped_ptr($/;"	f	class:asio::detail::win_iocp_overlapped_ptr
win_iocp_overlapped_ptr	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  win_iocp_overlapped_ptr()$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
win_iocp_overlapped_ptr	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^class win_iocp_overlapped_ptr$/;"	c	namespace:asio::detail
win_iocp_serial_port_service	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^class win_iocp_serial_port_service :$/;"	c	namespace:asio::detail
win_iocp_socket_accept_op	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_accept_op(win_iocp_socket_service_base& socket_service,$/;"	f	class:asio::detail::win_iocp_socket_accept_op
win_iocp_socket_accept_op	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^class win_iocp_socket_accept_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_connect_op	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  win_iocp_socket_connect_op(socket_type socket, Handler& handler)$/;"	f	class:asio::detail::win_iocp_socket_connect_op
win_iocp_socket_connect_op	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^class win_iocp_socket_connect_op : public win_iocp_socket_connect_op_base$/;"	c	namespace:asio::detail
win_iocp_socket_connect_op_base	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^  win_iocp_socket_connect_op_base(socket_type socket, func_type complete_func)$/;"	f	class:asio::detail::win_iocp_socket_connect_op_base
win_iocp_socket_connect_op_base	.\include\asio\detail\win_iocp_socket_connect_op.hpp	/^class win_iocp_socket_connect_op_base : public reactor_op$/;"	c	namespace:asio::detail
win_iocp_socket_move_accept_op	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^  win_iocp_socket_move_accept_op($/;"	f	class:asio::detail::win_iocp_socket_move_accept_op
win_iocp_socket_move_accept_op	.\include\asio\detail\win_iocp_socket_accept_op.hpp	/^class win_iocp_socket_move_accept_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_recv_op	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^  win_iocp_socket_recv_op(socket_ops::state_type state,$/;"	f	class:asio::detail::win_iocp_socket_recv_op
win_iocp_socket_recv_op	.\include\asio\detail\win_iocp_socket_recv_op.hpp	/^class win_iocp_socket_recv_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_recvfrom_op	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^  win_iocp_socket_recvfrom_op(Endpoint& endpoint,$/;"	f	class:asio::detail::win_iocp_socket_recvfrom_op
win_iocp_socket_recvfrom_op	.\include\asio\detail\win_iocp_socket_recvfrom_op.hpp	/^class win_iocp_socket_recvfrom_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_recvmsg_op	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^  win_iocp_socket_recvmsg_op($/;"	f	class:asio::detail::win_iocp_socket_recvmsg_op
win_iocp_socket_recvmsg_op	.\include\asio\detail\win_iocp_socket_recvmsg_op.hpp	/^class win_iocp_socket_recvmsg_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_send_op	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^  win_iocp_socket_send_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:asio::detail::win_iocp_socket_send_op
win_iocp_socket_send_op	.\include\asio\detail\win_iocp_socket_send_op.hpp	/^class win_iocp_socket_send_op : public operation$/;"	c	namespace:asio::detail
win_iocp_socket_service	.\include\asio\detail\win_iocp_socket_service.hpp	/^  win_iocp_socket_service(asio::io_context& io_context)$/;"	f	class:asio::detail::win_iocp_socket_service
win_iocp_socket_service	.\include\asio\detail\win_iocp_socket_service.hpp	/^class win_iocp_socket_service :$/;"	c	namespace:asio::detail
win_iocp_socket_service_base	.\include\asio\detail\win_iocp_socket_service_base.hpp	/^class win_iocp_socket_service_base$/;"	c	namespace:asio::detail
win_iocp_thread_info	.\include\asio\detail\win_iocp_thread_info.hpp	/^struct win_iocp_thread_info : public thread_info_base$/;"	s	namespace:asio::detail
win_iocp_wait_op	.\include\asio\detail\win_iocp_wait_op.hpp	/^  win_iocp_wait_op(socket_ops::weak_cancel_token_type cancel_token,$/;"	f	class:asio::detail::win_iocp_wait_op
win_iocp_wait_op	.\include\asio\detail\win_iocp_wait_op.hpp	/^class win_iocp_wait_op : public reactor_op$/;"	c	namespace:asio::detail
win_mutex	.\include\asio\detail\win_mutex.hpp	/^class win_mutex$/;"	c	namespace:asio::detail
win_object_handle_service	.\include\asio\detail\win_object_handle_service.hpp	/^class win_object_handle_service :$/;"	c	namespace:asio::detail
win_static_mutex	.\include\asio\detail\win_static_mutex.hpp	/^struct win_static_mutex$/;"	s	namespace:asio::detail
win_thread	.\include\asio\detail\win_thread.hpp	/^  win_thread(Function f, unsigned int stack_size = 0)$/;"	f	class:asio::detail::win_thread
win_thread	.\include\asio\detail\win_thread.hpp	/^class win_thread$/;"	c	namespace:asio::detail
win_thread_base	.\include\asio\detail\win_thread.hpp	/^class win_thread_base$/;"	c	namespace:asio::detail
win_tss_ptr	.\include\asio\detail\win_tss_ptr.hpp	/^  win_tss_ptr()$/;"	f	class:asio::detail::win_tss_ptr
win_tss_ptr	.\include\asio\detail\win_tss_ptr.hpp	/^class win_tss_ptr$/;"	c	namespace:asio::detail
winapp_thread	.\include\asio\detail\winapp_thread.hpp	/^  winapp_thread(Function f, unsigned int = 0)$/;"	f	class:asio::detail::winapp_thread
winapp_thread	.\include\asio\detail\winapp_thread.hpp	/^class winapp_thread$/;"	c	namespace:asio::detail
winapp_thread_function	.\include\asio\detail\winapp_thread.hpp	/^inline DWORD WINAPI winapp_thread_function(LPVOID arg)$/;"	f	namespace:asio::detail
wince_thread	.\include\asio\detail\wince_thread.hpp	/^  wince_thread(Function f, unsigned int = 0)$/;"	f	class:asio::detail::wince_thread
wince_thread	.\include\asio\detail\wince_thread.hpp	/^class wince_thread$/;"	c	namespace:asio::detail
wince_thread_function	.\include\asio\detail\wince_thread.hpp	/^inline DWORD WINAPI wince_thread_function(LPVOID arg)$/;"	f	namespace:asio::detail
windows	.\include\asio\windows\basic_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\basic_object_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\basic_random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\basic_stream_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\object_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\object_handle_service.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\overlapped_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\overlapped_ptr.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\random_access_handle_service.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\stream_handle.hpp	/^namespace windows {$/;"	n	namespace:asio
windows	.\include\asio\windows\stream_handle_service.hpp	/^namespace windows {$/;"	n	namespace:asio
winrt_async_manager	.\include\asio\detail\winrt_async_manager.hpp	/^  winrt_async_manager(asio::io_context& io_context)$/;"	f	class:asio::detail::winrt_async_manager
winrt_async_manager	.\include\asio\detail\winrt_async_manager.hpp	/^class winrt_async_manager$/;"	c	namespace:asio::detail
winrt_async_op	.\include\asio\detail\winrt_async_op.hpp	/^  winrt_async_op(func_type complete_func)$/;"	f	class:asio::detail::winrt_async_op
winrt_async_op	.\include\asio\detail\winrt_async_op.hpp	/^class winrt_async_op$/;"	c	namespace:asio::detail
winrt_async_op	.\include\asio\detail\winrt_async_op.hpp	/^class winrt_async_op<void>$/;"	c	namespace:asio::detail
winrt_resolve_op	.\include\asio\detail\winrt_resolve_op.hpp	/^  winrt_resolve_op(const query_type& query, Handler& handler)$/;"	f	class:asio::detail::winrt_resolve_op
winrt_resolve_op	.\include\asio\detail\winrt_resolve_op.hpp	/^class winrt_resolve_op :$/;"	c	namespace:asio::detail
winrt_resolver_service	.\include\asio\detail\winrt_resolver_service.hpp	/^  winrt_resolver_service(asio::io_context& io_context)$/;"	f	class:asio::detail::winrt_resolver_service
winrt_resolver_service	.\include\asio\detail\winrt_resolver_service.hpp	/^class winrt_resolver_service :$/;"	c	namespace:asio::detail
winrt_socket_connect_op	.\include\asio\detail\winrt_socket_connect_op.hpp	/^  winrt_socket_connect_op(Handler& handler)$/;"	f	class:asio::detail::winrt_socket_connect_op
winrt_socket_connect_op	.\include\asio\detail\winrt_socket_connect_op.hpp	/^class winrt_socket_connect_op :$/;"	c	namespace:asio::detail
winrt_socket_recv_op	.\include\asio\detail\winrt_socket_recv_op.hpp	/^  winrt_socket_recv_op(const MutableBufferSequence& buffers, Handler& handler)$/;"	f	class:asio::detail::winrt_socket_recv_op
winrt_socket_recv_op	.\include\asio\detail\winrt_socket_recv_op.hpp	/^class winrt_socket_recv_op :$/;"	c	namespace:asio::detail
winrt_socket_send_op	.\include\asio\detail\winrt_socket_send_op.hpp	/^  winrt_socket_send_op(const ConstBufferSequence& buffers, Handler& handler)$/;"	f	class:asio::detail::winrt_socket_send_op
winrt_socket_send_op	.\include\asio\detail\winrt_socket_send_op.hpp	/^class winrt_socket_send_op :$/;"	c	namespace:asio::detail
winrt_ssocket_service	.\include\asio\detail\winrt_ssocket_service.hpp	/^  winrt_ssocket_service(asio::io_context& io_context)$/;"	f	class:asio::detail::winrt_ssocket_service
winrt_ssocket_service	.\include\asio\detail\winrt_ssocket_service.hpp	/^class winrt_ssocket_service :$/;"	c	namespace:asio::detail
winrt_ssocket_service_base	.\include\asio\detail\winrt_ssocket_service_base.hpp	/^class winrt_ssocket_service_base$/;"	c	namespace:asio::detail
winrt_timer_scheduler	.\include\asio\detail\winrt_timer_scheduler.hpp	/^class winrt_timer_scheduler$/;"	c	namespace:asio::detail
winrt_utils	.\include\asio\detail\winrt_utils.hpp	/^namespace winrt_utils {$/;"	n	namespace:asio::detail
winsock_init	.\include\asio\detail\winsock_init.hpp	/^  winsock_init(bool allow_throw = true)$/;"	f	class:asio::detail::winsock_init
winsock_init	.\include\asio\detail\winsock_init.hpp	/^  winsock_init(const winsock_init&)$/;"	f	class:asio::detail::winsock_init
winsock_init	.\include\asio\detail\winsock_init.hpp	/^class winsock_init : private winsock_init_base$/;"	c	namespace:asio::detail
winsock_init_base	.\include\asio\detail\winsock_init.hpp	/^class winsock_init_base$/;"	c	namespace:asio::detail
winsock_init_instance	.\include\asio\detail\winsock_init.hpp	/^static const winsock_init<>& winsock_init_instance = winsock_init<>(false);$/;"	m	namespace:asio::detail
work	.\include\asio\impl\io_context.hpp	/^inline io_context::work::work(asio::io_context& io_context)$/;"	f	class:asio::io_context::work
work	.\include\asio\impl\io_context.hpp	/^inline io_context::work::work(const work& other)$/;"	f	class:asio::io_context::work
work	.\include\asio\io_context.hpp	/^class io_context::work$/;"	c	class:asio::io_context
work_	.\include\asio\detail\impl\strand_executor_service.hpp	/^  executor_work_guard<Executor> work_;$/;"	m	class:asio::detail::strand_executor_service::invoker
work_	.\include\asio\detail\resolver_service_base.hpp	/^      asio::io_context::executor_type> work_;$/;"	m	class:asio::detail::resolver_service_base
work_	.\include\asio\detail\work_dispatcher.hpp	/^  executor_work_guard<typename associated_executor<Handler>::type> work_;$/;"	m	class:asio::detail::work_dispatcher
work_dispatcher	.\include\asio\detail\work_dispatcher.hpp	/^  work_dispatcher(Handler& handler)$/;"	f	class:asio::detail::work_dispatcher
work_dispatcher	.\include\asio\detail\work_dispatcher.hpp	/^  work_dispatcher(const work_dispatcher& other)$/;"	f	class:asio::detail::work_dispatcher
work_dispatcher	.\include\asio\detail\work_dispatcher.hpp	/^  work_dispatcher(work_dispatcher&& other)$/;"	f	class:asio::detail::work_dispatcher
work_dispatcher	.\include\asio\detail\work_dispatcher.hpp	/^class work_dispatcher$/;"	c	namespace:asio::detail
work_finished	.\include\asio\detail\scheduler.hpp	/^  void work_finished()$/;"	f	class:asio::detail::scheduler
work_finished	.\include\asio\detail\win_iocp_io_context.hpp	/^  void work_finished()$/;"	f	class:asio::detail::win_iocp_io_context
work_io_context_	.\include\asio\detail\resolver_service_base.hpp	/^  asio::detail::scoped_ptr<asio::io_context> work_io_context_;$/;"	m	class:asio::detail::resolver_service_base
work_io_context_impl_	.\include\asio\detail\resolver_service_base.hpp	/^  io_context_impl& work_io_context_impl_;$/;"	m	class:asio::detail::resolver_service_base
work_started	.\include\asio\detail\scheduler.hpp	/^  void work_started()$/;"	f	class:asio::detail::scheduler
work_started	.\include\asio\detail\win_iocp_io_context.hpp	/^  void work_started()$/;"	f	class:asio::detail::win_iocp_io_context
work_thread_	.\include\asio\detail\resolver_service_base.hpp	/^  asio::detail::scoped_ptr<asio::detail::thread> work_thread_;$/;"	m	class:asio::detail::resolver_service_base
would_block	.\include\asio\error.hpp	/^  would_block = ASIO_SOCKET_ERROR(EWOULDBLOCK)$/;"	e	enum:asio::error::basic_errors
wrap	.\include\asio\impl\io_context.hpp	/^io_context::wrap(Handler handler)$/;"	f	class:asio::io_context
wrap	.\include\asio\io_context_strand.hpp	/^  wrap(Handler handler)$/;"	f	class:asio::io_context::strand
wrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  wrapped_handler(Dispatcher dispatcher, Handler& handler)$/;"	f	class:asio::detail::wrapped_handler
wrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  wrapped_handler(const wrapped_handler& other)$/;"	f	class:asio::detail::wrapped_handler
wrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^  wrapped_handler(wrapped_handler&& other)$/;"	f	class:asio::detail::wrapped_handler
wrapped_handler	.\include\asio\detail\wrapped_handler.hpp	/^class wrapped_handler$/;"	c	namespace:asio::detail
write	.\include\asio\impl\write.hpp	/^inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	f	namespace:asio
write	.\include\asio\impl\write.hpp	/^inline std::size_t write(SyncWriteStream& s,$/;"	f	namespace:asio
write	.\include\asio\impl\write.hpp	/^std::size_t write(SyncWriteStream& s,$/;"	f	namespace:asio
write	.\include\bmi08x_defs.h	/^bmi08x_com_fptr_t write;$/;"	m	struct:bmi08x_dev
write_at	.\include\asio\impl\write_at.hpp	/^inline std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:asio
write_at	.\include\asio\impl\write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:asio
write_at_buffer_sequence	.\include\asio\impl\write_at.hpp	/^  std::size_t write_at_buffer_sequence(SyncRandomAccessWriteDevice& d,$/;"	f	namespace:asio::detail
write_at_op	.\include\asio\impl\write_at.hpp	/^    write_at_op(AsyncRandomAccessWriteDevice& device,$/;"	f	class:asio::detail::write_at_op
write_at_op	.\include\asio\impl\write_at.hpp	/^    write_at_op(const write_at_op& other)$/;"	f	class:asio::detail::write_at_op
write_at_op	.\include\asio\impl\write_at.hpp	/^    write_at_op(write_at_op&& other)$/;"	f	class:asio::detail::write_at_op
write_at_op	.\include\asio\impl\write_at.hpp	/^  class write_at_op$/;"	c	namespace:asio::detail
write_at_streambuf_op	.\include\asio\impl\write_at.hpp	/^    write_at_streambuf_op($/;"	f	class:asio::detail::write_at_streambuf_op
write_at_streambuf_op	.\include\asio\impl\write_at.hpp	/^    write_at_streambuf_op(const write_at_streambuf_op& other)$/;"	f	class:asio::detail::write_at_streambuf_op
write_at_streambuf_op	.\include\asio\impl\write_at.hpp	/^    write_at_streambuf_op(write_at_streambuf_op&& other)$/;"	f	class:asio::detail::write_at_streambuf_op
write_at_streambuf_op	.\include\asio\impl\write_at.hpp	/^  class write_at_streambuf_op$/;"	c	namespace:asio::detail
write_buffer_sequence	.\include\asio\impl\write.hpp	/^  std::size_t write_buffer_sequence(SyncWriteStream& s,$/;"	f	namespace:asio::detail
write_descriptor_	.\include\asio\detail\eventfd_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:asio::detail::eventfd_select_interrupter
write_descriptor_	.\include\asio\detail\pipe_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:asio::detail::pipe_select_interrupter
write_descriptor_	.\include\asio\detail\socket_select_interrupter.hpp	/^  socket_type write_descriptor_;$/;"	m	class:asio::detail::socket_select_interrupter
write_dynbuf_op	.\include\asio\impl\write.hpp	/^    write_dynbuf_op(AsyncWriteStream& stream,$/;"	f	class:asio::detail::write_dynbuf_op
write_dynbuf_op	.\include\asio\impl\write.hpp	/^    write_dynbuf_op(const write_dynbuf_op& other)$/;"	f	class:asio::detail::write_dynbuf_op
write_dynbuf_op	.\include\asio\impl\write.hpp	/^    write_dynbuf_op(write_dynbuf_op&& other)$/;"	f	class:asio::detail::write_dynbuf_op
write_dynbuf_op	.\include\asio\impl\write.hpp	/^  class write_dynbuf_op$/;"	c	namespace:asio::detail
write_op	.\include\asio\detail\dev_poll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::dev_poll_reactor::op_types
write_op	.\include\asio\detail\epoll_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::epoll_reactor::op_types
write_op	.\include\asio\detail\kqueue_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1,$/;"	e	enum:asio::detail::kqueue_reactor::op_types
write_op	.\include\asio\detail\select_reactor.hpp	/^  enum op_types { read_op = 0, write_op = 1, except_op = 2,$/;"	e	enum:asio::detail::select_reactor::op_types
write_op	.\include\asio\impl\write.hpp	/^    write_op(AsyncWriteStream& stream, const ConstBufferSequence& buffers,$/;"	f	class:asio::detail::write_op
write_op	.\include\asio\impl\write.hpp	/^    write_op(const write_op& other)$/;"	f	class:asio::detail::write_op
write_op	.\include\asio\impl\write.hpp	/^    write_op(write_op&& other)$/;"	f	class:asio::detail::write_op
write_op	.\include\asio\impl\write.hpp	/^  class write_op$/;"	c	namespace:asio::detail
write_op	.\include\asio\ssl\detail\write_op.hpp	/^  write_op(const ConstBufferSequence& buffers)$/;"	f	class:asio::ssl::detail::write_op
write_op	.\include\asio\ssl\detail\write_op.hpp	/^class write_op$/;"	c	namespace:asio::ssl::detail
write_some	.\include\asio\basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::basic_serial_port
write_some	.\include\asio\basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_serial_port
write_some	.\include\asio\basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::basic_stream_socket
write_some	.\include\asio\basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::basic_stream_socket
write_some	.\include\asio\buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::buffered_read_stream
write_some	.\include\asio\buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::buffered_read_stream
write_some	.\include\asio\buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::buffered_stream
write_some	.\include\asio\buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::buffered_stream
write_some	.\include\asio\detail\reactive_descriptor_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_descriptor_service
write_some	.\include\asio\detail\reactive_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:asio::detail::reactive_serial_port_service
write_some	.\include\asio\detail\win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_handle_service
write_some	.\include\asio\detail\win_iocp_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:asio::detail::win_iocp_serial_port_service
write_some	.\include\asio\impl\buffered_write_stream.hpp	/^std::size_t buffered_write_stream<Stream>::write_some($/;"	f	class:asio::buffered_write_stream
write_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::posix::basic_stream_descriptor
write_some	.\include\asio\posix\basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::posix::basic_stream_descriptor
write_some	.\include\asio\posix\stream_descriptor_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:asio::posix::stream_descriptor_service
write_some	.\include\asio\serial_port_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:asio::serial_port_service
write_some	.\include\asio\ssl\stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::ssl::stream
write_some	.\include\asio\ssl\stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::ssl::stream
write_some	.\include\asio\windows\basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:asio::windows::basic_stream_handle
write_some	.\include\asio\windows\basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:asio::windows::basic_stream_handle
write_some	.\include\asio\windows\stream_handle_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:asio::windows::stream_handle_service
write_some_at	.\include\asio\detail\win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::detail::win_iocp_handle_service
write_some_at	.\include\asio\windows\basic_random_access_handle.hpp	/^  std::size_t write_some_at(uint64_t offset,$/;"	f	class:asio::windows::basic_random_access_handle
write_some_at	.\include\asio\windows\random_access_handle_service.hpp	/^  std::size_t write_some_at(implementation_type& impl, uint64_t offset,$/;"	f	class:asio::windows::random_access_handle_service
write_stream_type	.\include\asio\buffered_stream.hpp	/^  typedef buffered_write_stream<Stream> write_stream_type;$/;"	t	class:asio::buffered_stream
x	.\include\bmi08x_defs.h	/^float x;$/;"	m	struct:bmi08x_sensor_data_f
x	.\include\bmi08x_defs.h	/^int16_t x;$/;"	m	struct:bmi08x_sensor_data
x_en	.\include\bmi08x_defs.h	/^uint16_t x_en;$/;"	m	struct:bmi08x_anymotion_cfg
y	.\include\bmi08x_defs.h	/^float y;$/;"	m	struct:bmi08x_sensor_data_f
y	.\include\bmi08x_defs.h	/^int16_t y;$/;"	m	struct:bmi08x_sensor_data
y_en	.\include\bmi08x_defs.h	/^uint16_t y_en;$/;"	m	struct:bmi08x_anymotion_cfg
yield	.\include\asio\unyield.hpp	16;"	d
yield	.\include\asio\yield.hpp	18;"	d
yield_context	.\include\asio\spawn.hpp	/^  executor_binder<void(*)(), executor> > yield_context;$/;"	t	namespace:asio
yield_context	.\include\asio\spawn.hpp	/^typedef basic_yield_context<unspecified> yield_context;$/;"	t	namespace:asio
z	.\include\bmi08x_defs.h	/^float z;$/;"	m	struct:bmi08x_sensor_data_f
z	.\include\bmi08x_defs.h	/^int16_t z;$/;"	m	struct:bmi08x_sensor_data
z_en	.\include\bmi08x_defs.h	/^uint16_t z_en;$/;"	m	struct:bmi08x_anymotion_cfg
~auto_addrinfo	.\include\asio\detail\resolver_service_base.hpp	/^    ~auto_addrinfo()$/;"	f	class:asio::detail::resolver_service_base::auto_addrinfo
~auto_func_base_ptr	.\include\asio\detail\posix_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:asio::detail::posix_thread::auto_func_base_ptr
~auto_func_base_ptr	.\include\asio\detail\win_thread.hpp	/^    ~auto_func_base_ptr() { delete ptr; }$/;"	f	struct:asio::detail::win_thread::auto_func_base_ptr
~auto_handle	.\include\asio\detail\win_iocp_io_context.hpp	/^    ~auto_handle() { if (handle) ::CloseHandle(handle); }$/;"	f	struct:asio::detail::win_iocp_io_context::auto_handle
~auto_service_ptr	.\include\asio\detail\service_registry.hpp	/^    ~auto_service_ptr() { destroy(ptr_); }$/;"	f	struct:asio::detail::service_registry::auto_service_ptr
~awaitable	.\include\asio\experimental\co_spawn.hpp	/^  ~awaitable()$/;"	f	class:asio::experimental::awaitable
~awaitee	.\include\asio\experimental\impl\co_spawn.hpp	/^  ~awaitee()$/;"	f	class:asio::experimental::detail::awaitee
~awaiter	.\include\asio\experimental\impl\co_spawn.hpp	/^  ~awaiter()$/;"	f	class:asio::experimental::detail::awaiter
~awaiter_task	.\include\asio\experimental\impl\co_spawn.hpp	/^  ~awaiter_task()$/;"	f	class:asio::experimental::detail::awaiter_task
~basic_datagram_socket	.\include\asio\basic_datagram_socket.hpp	/^  ~basic_datagram_socket()$/;"	f	class:asio::basic_datagram_socket
~basic_deadline_timer	.\include\asio\basic_deadline_timer.hpp	/^  ~basic_deadline_timer()$/;"	f	class:asio::basic_deadline_timer
~basic_descriptor	.\include\asio\posix\basic_descriptor.hpp	/^  ~basic_descriptor()$/;"	f	class:asio::posix::basic_descriptor
~basic_handle	.\include\asio\windows\basic_handle.hpp	/^  ~basic_handle()$/;"	f	class:asio::windows::basic_handle
~basic_io_object	.\include\asio\basic_io_object.hpp	/^  ~basic_io_object()$/;"	f	class:asio::basic_io_object
~basic_raw_socket	.\include\asio\basic_raw_socket.hpp	/^  ~basic_raw_socket()$/;"	f	class:asio::basic_raw_socket
~basic_resolver	.\include\asio\ip\basic_resolver.hpp	/^  ~basic_resolver()$/;"	f	class:asio::ip::basic_resolver
~basic_seq_packet_socket	.\include\asio\basic_seq_packet_socket.hpp	/^  ~basic_seq_packet_socket()$/;"	f	class:asio::basic_seq_packet_socket
~basic_socket	.\include\asio\basic_socket.hpp	/^  ~basic_socket()$/;"	f	class:asio::basic_socket
~basic_socket_acceptor	.\include\asio\basic_socket_acceptor.hpp	/^  ~basic_socket_acceptor()$/;"	f	class:asio::basic_socket_acceptor
~basic_socket_streambuf	.\include\asio\basic_socket_streambuf.hpp	/^  virtual ~basic_socket_streambuf()$/;"	f	class:asio::basic_socket_streambuf
~basic_stream_socket	.\include\asio\basic_stream_socket.hpp	/^  ~basic_stream_socket()$/;"	f	class:asio::basic_stream_socket
~basic_waitable_timer	.\include\asio\basic_waitable_timer.hpp	/^  ~basic_waitable_timer()$/;"	f	class:asio::basic_waitable_timer
~buffer_debug_check	.\include\asio\buffer.hpp	/^  ~buffer_debug_check()$/;"	f	class:asio::detail::buffer_debug_check
~buffer_resize_guard	.\include\asio\detail\buffer_resize_guard.hpp	/^  ~buffer_resize_guard()$/;"	f	class:asio::detail::buffer_resize_guard
~conditionally_enabled_event	.\include\asio\detail\conditionally_enabled_event.hpp	/^  ~conditionally_enabled_event()$/;"	f	class:asio::detail::conditionally_enabled_event
~conditionally_enabled_mutex	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^  ~conditionally_enabled_mutex()$/;"	f	class:asio::detail::conditionally_enabled_mutex
~context	.\include\asio\detail\call_stack.hpp	/^    ~context()$/;"	f	class:asio::detail::call_stack::context
~context_base	.\include\asio\ssl\context_base.hpp	/^  ~context_base()$/;"	f	class:asio::ssl::context_base
~coroutine_ref	.\include\asio\coroutine.hpp	/^  ~coroutine_ref() { if (!modified_) value_ = -1; }$/;"	f	class:asio::detail::coroutine_ref
~deadline_timer_service	.\include\asio\detail\deadline_timer_service.hpp	/^  ~deadline_timer_service()$/;"	f	class:asio::detail::deadline_timer_service
~descriptor	.\include\asio\posix\descriptor.hpp	/^  ~descriptor()$/;"	f	class:asio::posix::descriptor
~descriptor_base	.\include\asio\posix\descriptor_base.hpp	/^  ~descriptor_base()$/;"	f	class:asio::posix::descriptor_base
~executor	.\include\asio\executor.hpp	/^  ~executor()$/;"	f	class:asio::executor
~executor_binder	.\include\asio\bind_executor.hpp	/^  ~executor_binder()$/;"	f	class:asio::executor_binder
~executor_work_guard	.\include\asio\executor_work_guard.hpp	/^  ~executor_work_guard()$/;"	f	class:asio::executor_work_guard
~func_base	.\include\asio\detail\posix_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:asio::detail::posix_thread::func_base
~func_base	.\include\asio\detail\win_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:asio::detail::win_thread::func_base
~func_base	.\include\asio\detail\winapp_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:asio::detail::winapp_thread::func_base
~func_base	.\include\asio\detail\wince_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:asio::detail::wince_thread::func_base
~function	.\include\asio\impl\executor.hpp	/^  ~function()$/;"	f	class:asio::executor::function
~gcc_arm_fenced_block	.\include\asio\detail\gcc_arm_fenced_block.hpp	/^  ~gcc_arm_fenced_block()$/;"	f	class:asio::detail::gcc_arm_fenced_block
~gcc_hppa_fenced_block	.\include\asio\detail\gcc_hppa_fenced_block.hpp	/^  ~gcc_hppa_fenced_block()$/;"	f	class:asio::detail::gcc_hppa_fenced_block
~gcc_sync_fenced_block	.\include\asio\detail\gcc_sync_fenced_block.hpp	/^  ~gcc_sync_fenced_block()$/;"	f	class:asio::detail::gcc_sync_fenced_block
~gcc_x86_fenced_block	.\include\asio\detail\gcc_x86_fenced_block.hpp	/^  ~gcc_x86_fenced_block()$/;"	f	class:asio::detail::gcc_x86_fenced_block
~handler_work	.\include\asio\detail\handler_work.hpp	/^  ~handler_work() {}$/;"	f	class:asio::detail::handler_work
~handler_work	.\include\asio\detail\handler_work.hpp	/^  ~handler_work()$/;"	f	class:asio::detail::handler_work
~hash_map	.\include\asio\detail\hash_map.hpp	/^  ~hash_map()$/;"	f	class:asio::detail::hash_map
~impl_base	.\include\asio\executor.hpp	/^    virtual ~impl_base() {}$/;"	f	class:asio::executor::impl_base
~keyword_tss_ptr	.\include\asio\detail\keyword_tss_ptr.hpp	/^  ~keyword_tss_ptr()$/;"	f	class:asio::detail::keyword_tss_ptr
~local_free_on_block_exit	.\include\asio\detail\local_free_on_block_exit.hpp	/^  ~local_free_on_block_exit()$/;"	f	class:asio::detail::local_free_on_block_exit
~macos_fenced_block	.\include\asio\detail\macos_fenced_block.hpp	/^  ~macos_fenced_block()$/;"	f	class:asio::detail::macos_fenced_block
~manual	.\include\asio\detail\winsock_init.hpp	/^    ~manual()$/;"	f	class:asio::detail::winsock_init::manual
~noncopyable	.\include\asio\detail\noncopyable.hpp	/^  ~noncopyable() {}$/;"	f	class:asio::detail::noncopyable
~null_event	.\include\asio\detail\null_event.hpp	/^  ~null_event()$/;"	f	class:asio::detail::null_event
~null_fenced_block	.\include\asio\detail\null_fenced_block.hpp	/^  ~null_fenced_block()$/;"	f	class:asio::detail::null_fenced_block
~null_global_impl	.\include\asio\detail\null_global.hpp	/^  ~null_global_impl()$/;"	f	struct:asio::detail::null_global_impl
~null_mutex	.\include\asio\detail\null_mutex.hpp	/^  ~null_mutex()$/;"	f	class:asio::detail::null_mutex
~null_reactor	.\include\asio\detail\null_reactor.hpp	/^  ~null_reactor()$/;"	f	class:asio::detail::null_reactor
~null_signal_blocker	.\include\asio\detail\null_signal_blocker.hpp	/^  ~null_signal_blocker()$/;"	f	class:asio::detail::null_signal_blocker
~null_thread	.\include\asio\detail\null_thread.hpp	/^  ~null_thread()$/;"	f	class:asio::detail::null_thread
~null_tss_ptr	.\include\asio\detail\null_tss_ptr.hpp	/^  ~null_tss_ptr()$/;"	f	class:asio::detail::null_tss_ptr
~object_pool	.\include\asio\detail\object_pool.hpp	/^  ~object_pool()$/;"	f	class:asio::detail::object_pool
~on_dispatch_exit	.\include\asio\detail\impl\strand_service.hpp	/^  ~on_dispatch_exit()$/;"	f	struct:asio::detail::strand_service::on_dispatch_exit
~on_invoker_exit	.\include\asio\detail\impl\strand_executor_service.hpp	/^    ~on_invoker_exit()$/;"	f	struct:asio::detail::strand_executor_service::invoker::on_invoker_exit
~op_queue	.\include\asio\detail\op_queue.hpp	/^  ~op_queue()$/;"	f	class:asio::detail::op_queue
~openssl_init	.\include\asio\ssl\detail\openssl_init.hpp	/^  ~openssl_init()$/;"	f	class:asio::ssl::detail::openssl_init
~overlapped_handle	.\include\asio\windows\overlapped_handle.hpp	/^  ~overlapped_handle()$/;"	f	class:asio::windows::overlapped_handle
~overlapped_ptr	.\include\asio\windows\overlapped_ptr.hpp	/^  ~overlapped_ptr()$/;"	f	class:asio::windows::overlapped_ptr
~password_callback_base	.\include\asio\ssl\detail\password_callback.hpp	/^  virtual ~password_callback_base()$/;"	f	class:asio::ssl::detail::password_callback_base
~posix_event	.\include\asio\detail\posix_event.hpp	/^  ~posix_event()$/;"	f	class:asio::detail::posix_event
~posix_global_impl	.\include\asio\detail\posix_global.hpp	/^  ~posix_global_impl()$/;"	f	struct:asio::detail::posix_global_impl
~posix_mutex	.\include\asio\detail\posix_mutex.hpp	/^  ~posix_mutex()$/;"	f	class:asio::detail::posix_mutex
~posix_signal_blocker	.\include\asio\detail\posix_signal_blocker.hpp	/^  ~posix_signal_blocker()$/;"	f	class:asio::detail::posix_signal_blocker
~posix_tss_ptr	.\include\asio\detail\posix_tss_ptr.hpp	/^  ~posix_tss_ptr()$/;"	f	class:asio::detail::posix_tss_ptr
~raw_mem	.\include\asio\impl\executor.hpp	/^    ~raw_mem()$/;"	f	struct:asio::executor::impl::raw_mem
~resolve_query_op	.\include\asio\detail\resolve_query_op.hpp	/^  ~resolve_query_op()$/;"	f	class:asio::detail::resolve_query_op
~resolver_base	.\include\asio\ip\resolver_base.hpp	/^  ~resolver_base()$/;"	f	class:asio::ip::resolver_base
~resolver_query_base	.\include\asio\ip\resolver_query_base.hpp	/^  ~resolver_query_base()$/;"	f	class:asio::ip::resolver_query_base
~scheduler_operation	.\include\asio\detail\scheduler_operation.hpp	/^  ~scheduler_operation()$/;"	f	class:asio::detail::ASIO_INHERIT_TRACKED_HANDLER
~scoped_lock	.\include\asio\detail\conditionally_enabled_mutex.hpp	/^    ~scoped_lock()$/;"	f	class:asio::detail::conditionally_enabled_mutex::scoped_lock
~scoped_lock	.\include\asio\detail\scoped_lock.hpp	/^  ~scoped_lock()$/;"	f	class:asio::detail::scoped_lock
~scoped_ptr	.\include\asio\detail\scoped_ptr.hpp	/^  ~scoped_ptr()$/;"	f	class:asio::detail::scoped_ptr
~serial_port_base	.\include\asio\serial_port_base.hpp	/^  ~serial_port_base()$/;"	f	class:asio::serial_port_base
~socket_base	.\include\asio\socket_base.hpp	/^  ~socket_base()$/;"	f	class:asio::socket_base
~socket_holder	.\include\asio\detail\socket_holder.hpp	/^  ~socket_holder()$/;"	f	class:asio::detail::socket_holder
~solaris_fenced_block	.\include\asio\detail\solaris_fenced_block.hpp	/^  ~solaris_fenced_block()$/;"	f	class:asio::detail::solaris_fenced_block
~std_event	.\include\asio\detail\std_event.hpp	/^  ~std_event()$/;"	f	class:asio::detail::std_event
~std_fenced_block	.\include\asio\detail\std_fenced_block.hpp	/^  ~std_fenced_block()$/;"	f	class:asio::detail::std_fenced_block
~std_global_impl	.\include\asio\detail\std_global.hpp	/^  ~std_global_impl()$/;"	f	struct:asio::detail::std_global_impl
~std_mutex	.\include\asio\detail\std_mutex.hpp	/^  ~std_mutex()$/;"	f	class:asio::detail::std_mutex
~std_static_mutex	.\include\asio\detail\std_static_mutex.hpp	/^  ~std_static_mutex()$/;"	f	class:asio::detail::std_static_mutex
~std_thread	.\include\asio\detail\std_thread.hpp	/^  ~std_thread()$/;"	f	class:asio::detail::std_thread
~strand	.\include\asio\io_context_strand.hpp	/^  ~strand()$/;"	f	class:asio::io_context::strand
~strand	.\include\asio\strand.hpp	/^  ~strand()$/;"	f	class:asio::strand
~stream	.\include\asio\ssl\stream.hpp	/^  ~stream()$/;"	f	class:asio::ssl::stream
~stream_base	.\include\asio\ssl\stream_base.hpp	/^  ~stream_base()$/;"	f	class:asio::ssl::stream_base
~stream_core	.\include\asio\ssl\detail\stream_core.hpp	/^  ~stream_core()$/;"	f	struct:asio::ssl::detail::stream_core
~thread	.\include\asio\thread.hpp	/^  ~thread()$/;"	f	class:asio::thread
~thread_group	.\include\asio\detail\thread_group.hpp	/^  ~thread_group()$/;"	f	class:asio::detail::thread_group
~thread_info_base	.\include\asio\detail\thread_info_base.hpp	/^  ~thread_info_base()$/;"	f	class:asio::detail::thread_info_base
~timer_queue_base	.\include\asio\detail\timer_queue_base.hpp	/^  virtual ~timer_queue_base() {}$/;"	f	class:asio::detail::timer_queue_base
~unique_lock_adapter	.\include\asio\detail\std_event.hpp	/^    ~unique_lock_adapter()$/;"	f	struct:asio::detail::std_event::unique_lock_adapter
~verify_callback_base	.\include\asio\ssl\detail\verify_callback.hpp	/^  virtual ~verify_callback_base()$/;"	f	class:asio::ssl::detail::verify_callback_base
~waiter	.\include\asio\detail\std_event.hpp	/^    ~waiter()$/;"	f	class:asio::detail::std_event::waiter
~win_fd_set_adapter	.\include\asio\detail\win_fd_set_adapter.hpp	/^  ~win_fd_set_adapter()$/;"	f	class:asio::detail::win_fd_set_adapter
~win_fenced_block	.\include\asio\detail\win_fenced_block.hpp	/^  ~win_fenced_block()$/;"	f	class:asio::detail::win_fenced_block
~win_global_impl	.\include\asio\detail\win_global.hpp	/^  ~win_global_impl()$/;"	f	struct:asio::detail::win_global_impl
~win_iocp_operation	.\include\asio\detail\win_iocp_operation.hpp	/^  ~win_iocp_operation()$/;"	f	class:asio::detail::win_iocp_operation
~win_iocp_overlapped_ptr	.\include\asio\detail\win_iocp_overlapped_ptr.hpp	/^  ~win_iocp_overlapped_ptr()$/;"	f	class:asio::detail::win_iocp_overlapped_ptr
~win_mutex	.\include\asio\detail\win_mutex.hpp	/^  ~win_mutex()$/;"	f	class:asio::detail::win_mutex
~win_tss_ptr	.\include\asio\detail\win_tss_ptr.hpp	/^  ~win_tss_ptr()$/;"	f	class:asio::detail::win_tss_ptr
~winapp_thread	.\include\asio\detail\winapp_thread.hpp	/^  ~winapp_thread()$/;"	f	class:asio::detail::winapp_thread
~wince_thread	.\include\asio\detail\wince_thread.hpp	/^  ~wince_thread()$/;"	f	class:asio::detail::wince_thread
~winrt_async_manager	.\include\asio\detail\winrt_async_manager.hpp	/^  ~winrt_async_manager()$/;"	f	class:asio::detail::winrt_async_manager
~winrt_resolver_service	.\include\asio\detail\winrt_resolver_service.hpp	/^  ~winrt_resolver_service()$/;"	f	class:asio::detail::winrt_resolver_service
~winsock_init	.\include\asio\detail\winsock_init.hpp	/^  ~winsock_init()$/;"	f	class:asio::detail::winsock_init
~work	.\include\asio\impl\io_context.hpp	/^inline io_context::work::~work()$/;"	f	class:asio::io_context::work
